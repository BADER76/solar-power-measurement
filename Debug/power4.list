
power4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000749c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000192c  080075b0  080075b0  000175b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008edc  08008edc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08008edc  08008edc  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008edc  08008edc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008edc  08008edc  00018edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ee0  08008ee0  00018ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  200001ec  080090d0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  080090d0  0002072c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa57  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e5  00000000  00000000  0002fc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  00031f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  00032b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001916d  00000000  00000000  00033628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecb9  00000000  00000000  0004c795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bf82  00000000  00000000  0005b44e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e73d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042ec  00000000  00000000  000e7424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08007594 	.word	0x08007594

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08007594 	.word	0x08007594

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001034:	b098      	sub	sp, #96	; 0x60
 8001036:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f000 ff34 	bl	8001ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103c:	f000 f95a 	bl	80012f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001040:	f000 fa56 	bl	80014f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001044:	f000 f9ae 	bl	80013a4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001048:	f000 f9fa 	bl	8001440 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800104c:	f000 fa26 	bl	800149c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SSD1306_Init();
 8001050:	f000 fa76 	bl	8001540 <SSD1306_Init>

  while (1)
  {
      // Start ADC and read current (PA0) and voltage (PA1)
      HAL_ADC_Start(&hadc1);
 8001054:	4892      	ldr	r0, [pc, #584]	; (80012a0 <main+0x270>)
 8001056:	f001 f883 	bl	8002160 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 100);
 800105a:	2164      	movs	r1, #100	; 0x64
 800105c:	4890      	ldr	r0, [pc, #576]	; (80012a0 <main+0x270>)
 800105e:	f001 f959 	bl	8002314 <HAL_ADC_PollForConversion>
      adc_val_current = HAL_ADC_GetValue(&hadc1);
 8001062:	488f      	ldr	r0, [pc, #572]	; (80012a0 <main+0x270>)
 8001064:	f001 fa5c 	bl	8002520 <HAL_ADC_GetValue>
 8001068:	4603      	mov	r3, r0
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b8d      	ldr	r3, [pc, #564]	; (80012a4 <main+0x274>)
 800106e:	801a      	strh	r2, [r3, #0]

      HAL_ADC_PollForConversion(&hadc1, 100);
 8001070:	2164      	movs	r1, #100	; 0x64
 8001072:	488b      	ldr	r0, [pc, #556]	; (80012a0 <main+0x270>)
 8001074:	f001 f94e 	bl	8002314 <HAL_ADC_PollForConversion>
      adc_val_voltage = HAL_ADC_GetValue(&hadc1);
 8001078:	4889      	ldr	r0, [pc, #548]	; (80012a0 <main+0x270>)
 800107a:	f001 fa51 	bl	8002520 <HAL_ADC_GetValue>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	4b89      	ldr	r3, [pc, #548]	; (80012a8 <main+0x278>)
 8001084:	801a      	strh	r2, [r3, #0]
      HAL_ADC_Stop(&hadc1);
 8001086:	4886      	ldr	r0, [pc, #536]	; (80012a0 <main+0x270>)
 8001088:	f001 f918 	bl	80022bc <HAL_ADC_Stop>

      float Vadc_voltage = (adc_val_voltage * 3.3f / 4095.0f);
 800108c:	4b86      	ldr	r3, [pc, #536]	; (80012a8 <main+0x278>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fdb3 	bl	8000bfc <__aeabi_i2f>
 8001096:	4603      	mov	r3, r0
 8001098:	4984      	ldr	r1, [pc, #528]	; (80012ac <main+0x27c>)
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fe02 	bl	8000ca4 <__aeabi_fmul>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4983      	ldr	r1, [pc, #524]	; (80012b0 <main+0x280>)
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff feb1 	bl	8000e0c <__aeabi_fdiv>
 80010aa:	4603      	mov	r3, r0
 80010ac:	64fb      	str	r3, [r7, #76]	; 0x4c
      float Vadc_current = (adc_val_current * 3.3f / 4095.0f);
 80010ae:	4b7d      	ldr	r3, [pc, #500]	; (80012a4 <main+0x274>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fda2 	bl	8000bfc <__aeabi_i2f>
 80010b8:	4603      	mov	r3, r0
 80010ba:	497c      	ldr	r1, [pc, #496]	; (80012ac <main+0x27c>)
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fdf1 	bl	8000ca4 <__aeabi_fmul>
 80010c2:	4603      	mov	r3, r0
 80010c4:	497a      	ldr	r1, [pc, #488]	; (80012b0 <main+0x280>)
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fea0 	bl	8000e0c <__aeabi_fdiv>
 80010cc:	4603      	mov	r3, r0
 80010ce:	64bb      	str	r3, [r7, #72]	; 0x48

      const float zero_offset = 2.47f;     // Measured idle value
 80010d0:	4b78      	ldr	r3, [pc, #480]	; (80012b4 <main+0x284>)
 80010d2:	647b      	str	r3, [r7, #68]	; 0x44
      const float sensitivity = 0.185f;    // ACS712-5A
 80010d4:	4b78      	ldr	r3, [pc, #480]	; (80012b8 <main+0x288>)
 80010d6:	643b      	str	r3, [r7, #64]	; 0x40

      voltage = Vadc_voltage * 2.0f;
 80010d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010da:	4619      	mov	r1, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fcd9 	bl	8000a94 <__addsf3>
 80010e2:	4603      	mov	r3, r0
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b75      	ldr	r3, [pc, #468]	; (80012bc <main+0x28c>)
 80010e8:	601a      	str	r2, [r3, #0]
      current = (Vadc_current - zero_offset) / sensitivity;
 80010ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80010ec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80010ee:	f7ff fccf 	bl	8000a90 <__aeabi_fsub>
 80010f2:	4603      	mov	r3, r0
 80010f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fe88 	bl	8000e0c <__aeabi_fdiv>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461a      	mov	r2, r3
 8001100:	4b6f      	ldr	r3, [pc, #444]	; (80012c0 <main+0x290>)
 8001102:	601a      	str	r2, [r3, #0]

      if (fabs(current) < 0.05f) current = 0;
 8001104:	4b6e      	ldr	r3, [pc, #440]	; (80012c0 <main+0x290>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800110c:	496d      	ldr	r1, [pc, #436]	; (80012c4 <main+0x294>)
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff66 	bl	8000fe0 <__aeabi_fcmplt>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <main+0xf2>
 800111a:	4b69      	ldr	r3, [pc, #420]	; (80012c0 <main+0x290>)
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
      if (voltage < 0.5f) voltage = 0;
 8001122:	4b66      	ldr	r3, [pc, #408]	; (80012bc <main+0x28c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff58 	bl	8000fe0 <__aeabi_fcmplt>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <main+0x10e>
 8001136:	4b61      	ldr	r3, [pc, #388]	; (80012bc <main+0x28c>)
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	601a      	str	r2, [r3, #0]

      power = voltage * current;
 800113e:	4b5f      	ldr	r3, [pc, #380]	; (80012bc <main+0x28c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a5f      	ldr	r2, [pc, #380]	; (80012c0 <main+0x290>)
 8001144:	6812      	ldr	r2, [r2, #0]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fdab 	bl	8000ca4 <__aeabi_fmul>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	4b5d      	ldr	r3, [pc, #372]	; (80012c8 <main+0x298>)
 8001154:	601a      	str	r2, [r3, #0]
      if (fabs(power) < 0.1f) power = 0;
 8001156:	4b5c      	ldr	r3, [pc, #368]	; (80012c8 <main+0x298>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800115e:	495b      	ldr	r1, [pc, #364]	; (80012cc <main+0x29c>)
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff3d 	bl	8000fe0 <__aeabi_fcmplt>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <main+0x144>
 800116c:	4b56      	ldr	r3, [pc, #344]	; (80012c8 <main+0x298>)
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	601a      	str	r2, [r3, #0]

      // Send data to ESP32 over UART
      char uart_msg[64];
      sprintf(uart_msg, "V:%.2f I:%.2f P:%.2f\n", voltage, current, power);
 8001174:	4b51      	ldr	r3, [pc, #324]	; (80012bc <main+0x28c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f955 	bl	8000428 <__aeabi_f2d>
 800117e:	4680      	mov	r8, r0
 8001180:	4689      	mov	r9, r1
 8001182:	4b4f      	ldr	r3, [pc, #316]	; (80012c0 <main+0x290>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f94e 	bl	8000428 <__aeabi_f2d>
 800118c:	4604      	mov	r4, r0
 800118e:	460d      	mov	r5, r1
 8001190:	4b4d      	ldr	r3, [pc, #308]	; (80012c8 <main+0x298>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f947 	bl	8000428 <__aeabi_f2d>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4638      	mov	r0, r7
 80011a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011a4:	e9cd 4500 	strd	r4, r5, [sp]
 80011a8:	4642      	mov	r2, r8
 80011aa:	464b      	mov	r3, r9
 80011ac:	4948      	ldr	r1, [pc, #288]	; (80012d0 <main+0x2a0>)
 80011ae:	f003 ffb9 	bl	8005124 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 80011b2:	463b      	mov	r3, r7
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7fe ffcb 	bl	8000150 <strlen>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b29a      	uxth	r2, r3
 80011be:	4639      	mov	r1, r7
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	4843      	ldr	r0, [pc, #268]	; (80012d4 <main+0x2a4>)
 80011c6:	f003 f947 	bl	8004458 <HAL_UART_Transmit>

      // OLED output
      if (voltage == 0 && current == 0) {
 80011ca:	4b3c      	ldr	r3, [pc, #240]	; (80012bc <main+0x28c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f04f 0100 	mov.w	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fefa 	bl	8000fcc <__aeabi_fcmpeq>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d01b      	beq.n	8001216 <main+0x1e6>
 80011de:	4b38      	ldr	r3, [pc, #224]	; (80012c0 <main+0x290>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f04f 0100 	mov.w	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fef0 	bl	8000fcc <__aeabi_fcmpeq>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d011      	beq.n	8001216 <main+0x1e6>
          SSD1306_Clear();
 80011f2:	f000 fbc8 	bl	8001986 <SSD1306_Clear>
          SSD1306_GotoXY(20, 20);
 80011f6:	2114      	movs	r1, #20
 80011f8:	2014      	movs	r0, #20
 80011fa:	f000 fb09 	bl	8001810 <SSD1306_GotoXY>
          SSD1306_Puts("No Input", &Font_11x18, 1);
 80011fe:	2201      	movs	r2, #1
 8001200:	4935      	ldr	r1, [pc, #212]	; (80012d8 <main+0x2a8>)
 8001202:	4836      	ldr	r0, [pc, #216]	; (80012dc <main+0x2ac>)
 8001204:	f000 fb9a 	bl	800193c <SSD1306_Puts>
          SSD1306_UpdateScreen();
 8001208:	f000 fa5e 	bl	80016c8 <SSD1306_UpdateScreen>
          HAL_Delay(500);
 800120c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001210:	f000 feaa 	bl	8001f68 <HAL_Delay>
 8001214:	e71e      	b.n	8001054 <main+0x24>
          continue;
      }

      SSD1306_Clear();
 8001216:	f000 fbb6 	bl	8001986 <SSD1306_Clear>

      SSD1306_GotoXY(0, 0);
 800121a:	2100      	movs	r1, #0
 800121c:	2000      	movs	r0, #0
 800121e:	f000 faf7 	bl	8001810 <SSD1306_GotoXY>
      sprintf(display_buffer, "V: %.2f", voltage);
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <main+0x28c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f8fe 	bl	8000428 <__aeabi_f2d>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	492b      	ldr	r1, [pc, #172]	; (80012e0 <main+0x2b0>)
 8001232:	482c      	ldr	r0, [pc, #176]	; (80012e4 <main+0x2b4>)
 8001234:	f003 ff76 	bl	8005124 <siprintf>
      SSD1306_Puts(display_buffer, &Font_7x10, 1);
 8001238:	2201      	movs	r2, #1
 800123a:	492b      	ldr	r1, [pc, #172]	; (80012e8 <main+0x2b8>)
 800123c:	4829      	ldr	r0, [pc, #164]	; (80012e4 <main+0x2b4>)
 800123e:	f000 fb7d 	bl	800193c <SSD1306_Puts>

      SSD1306_GotoXY(0, 12);
 8001242:	210c      	movs	r1, #12
 8001244:	2000      	movs	r0, #0
 8001246:	f000 fae3 	bl	8001810 <SSD1306_GotoXY>
      sprintf(display_buffer, "I: %.2f", current);
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <main+0x290>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f8ea 	bl	8000428 <__aeabi_f2d>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4924      	ldr	r1, [pc, #144]	; (80012ec <main+0x2bc>)
 800125a:	4822      	ldr	r0, [pc, #136]	; (80012e4 <main+0x2b4>)
 800125c:	f003 ff62 	bl	8005124 <siprintf>
      SSD1306_Puts(display_buffer, &Font_7x10, 1);
 8001260:	2201      	movs	r2, #1
 8001262:	4921      	ldr	r1, [pc, #132]	; (80012e8 <main+0x2b8>)
 8001264:	481f      	ldr	r0, [pc, #124]	; (80012e4 <main+0x2b4>)
 8001266:	f000 fb69 	bl	800193c <SSD1306_Puts>

      SSD1306_GotoXY(0, 24);
 800126a:	2118      	movs	r1, #24
 800126c:	2000      	movs	r0, #0
 800126e:	f000 facf 	bl	8001810 <SSD1306_GotoXY>
      sprintf(display_buffer, "P: %.2fW", power);
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <main+0x298>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f8d6 	bl	8000428 <__aeabi_f2d>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	491b      	ldr	r1, [pc, #108]	; (80012f0 <main+0x2c0>)
 8001282:	4818      	ldr	r0, [pc, #96]	; (80012e4 <main+0x2b4>)
 8001284:	f003 ff4e 	bl	8005124 <siprintf>
      SSD1306_Puts(display_buffer, &Font_7x10, 1);
 8001288:	2201      	movs	r2, #1
 800128a:	4917      	ldr	r1, [pc, #92]	; (80012e8 <main+0x2b8>)
 800128c:	4815      	ldr	r0, [pc, #84]	; (80012e4 <main+0x2b4>)
 800128e:	f000 fb55 	bl	800193c <SSD1306_Puts>

      SSD1306_UpdateScreen();
 8001292:	f000 fa19 	bl	80016c8 <SSD1306_UpdateScreen>
      HAL_Delay(1000);
 8001296:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800129a:	f000 fe65 	bl	8001f68 <HAL_Delay>
  {
 800129e:	e6d9      	b.n	8001054 <main+0x24>
 80012a0:	200006a0 	.word	0x200006a0
 80012a4:	2000020a 	.word	0x2000020a
 80012a8:	20000208 	.word	0x20000208
 80012ac:	40533333 	.word	0x40533333
 80012b0:	457ff000 	.word	0x457ff000
 80012b4:	401e147b 	.word	0x401e147b
 80012b8:	3e3d70a4 	.word	0x3e3d70a4
 80012bc:	2000020c 	.word	0x2000020c
 80012c0:	20000210 	.word	0x20000210
 80012c4:	3d4ccccd 	.word	0x3d4ccccd
 80012c8:	20000214 	.word	0x20000214
 80012cc:	3dcccccd 	.word	0x3dcccccd
 80012d0:	080075b0 	.word	0x080075b0
 80012d4:	200006d0 	.word	0x200006d0
 80012d8:	20000008 	.word	0x20000008
 80012dc:	080075c8 	.word	0x080075c8
 80012e0:	080075d4 	.word	0x080075d4
 80012e4:	2000062c 	.word	0x2000062c
 80012e8:	20000000 	.word	0x20000000
 80012ec:	080075dc 	.word	0x080075dc
 80012f0:	080075e4 	.word	0x080075e4

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b094      	sub	sp, #80	; 0x50
 80012f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012fe:	2228      	movs	r2, #40	; 0x28
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f003 faa6 	bl	8004854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001324:	2302      	movs	r3, #2
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001328:	2301      	movs	r3, #1
 800132a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800132c:	2310      	movs	r3, #16
 800132e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001330:	2302      	movs	r3, #2
 8001332:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001334:	2300      	movs	r3, #0
 8001336:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001338:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800133c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001342:	4618      	mov	r0, r3
 8001344:	f002 fabe 	bl	80038c4 <HAL_RCC_OscConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800134e:	f000 f8f1 	bl	8001534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001352:	230f      	movs	r3, #15
 8001354:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001356:	2302      	movs	r3, #2
 8001358:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800135e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001362:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2102      	movs	r1, #2
 800136e:	4618      	mov	r0, r3
 8001370:	f002 fd28 	bl	8003dc4 <HAL_RCC_ClockConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800137a:	f000 f8db 	bl	8001534 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800137e:	2302      	movs	r3, #2
 8001380:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001386:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	4618      	mov	r0, r3
 800138c:	f002 fea8 	bl	80040e0 <HAL_RCCEx_PeriphCLKConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001396:	f000 f8cd 	bl	8001534 <Error_Handler>
  }
}
 800139a:	bf00      	nop
 800139c:	3750      	adds	r7, #80	; 0x50
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80013b4:	4b20      	ldr	r3, [pc, #128]	; (8001438 <MX_ADC1_Init+0x94>)
 80013b6:	4a21      	ldr	r2, [pc, #132]	; (800143c <MX_ADC1_Init+0x98>)
 80013b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <MX_ADC1_Init+0x94>)
 80013bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <MX_ADC1_Init+0x94>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013c8:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <MX_ADC1_Init+0x94>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <MX_ADC1_Init+0x94>)
 80013d0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d6:	4b18      	ldr	r3, [pc, #96]	; (8001438 <MX_ADC1_Init+0x94>)
 80013d8:	2200      	movs	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80013dc:	4b16      	ldr	r3, [pc, #88]	; (8001438 <MX_ADC1_Init+0x94>)
 80013de:	2202      	movs	r2, #2
 80013e0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013e2:	4815      	ldr	r0, [pc, #84]	; (8001438 <MX_ADC1_Init+0x94>)
 80013e4:	f000 fde4 	bl	8001fb0 <HAL_ADC_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80013ee:	f000 f8a1 	bl	8001534 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013f6:	2301      	movs	r3, #1
 80013f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80013fa:	2306      	movs	r3, #6
 80013fc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	4619      	mov	r1, r3
 8001402:	480d      	ldr	r0, [pc, #52]	; (8001438 <MX_ADC1_Init+0x94>)
 8001404:	f001 f898 	bl	8002538 <HAL_ADC_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800140e:	f000 f891 	bl	8001534 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001412:	2301      	movs	r3, #1
 8001414:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001416:	2302      	movs	r3, #2
 8001418:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	4619      	mov	r1, r3
 800141e:	4806      	ldr	r0, [pc, #24]	; (8001438 <MX_ADC1_Init+0x94>)
 8001420:	f001 f88a 	bl	8002538 <HAL_ADC_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800142a:	f000 f883 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200006a0 	.word	0x200006a0
 800143c:	40012400 	.word	0x40012400

08001440 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <MX_I2C1_Init+0x50>)
 8001446:	4a13      	ldr	r2, [pc, #76]	; (8001494 <MX_I2C1_Init+0x54>)
 8001448:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_I2C1_Init+0x50>)
 800144c:	4a12      	ldr	r2, [pc, #72]	; (8001498 <MX_I2C1_Init+0x58>)
 800144e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_I2C1_Init+0x50>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MX_I2C1_Init+0x50>)
 8001458:	2200      	movs	r2, #0
 800145a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_I2C1_Init+0x50>)
 800145e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001462:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <MX_I2C1_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_I2C1_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <MX_I2C1_Init+0x50>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_I2C1_Init+0x50>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_I2C1_Init+0x50>)
 800147e:	f001 fc57 	bl	8002d30 <HAL_I2C_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001488:	f000 f854 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	2000064c 	.word	0x2000064c
 8001494:	40005400 	.word	0x40005400
 8001498:	00061a80 	.word	0x00061a80

0800149c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	; (80014ec <MX_USART1_UART_Init+0x50>)
 80014a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014d4:	f002 ff70 	bl	80043b8 <HAL_UART_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014de:	f000 f829 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200006d0 	.word	0x200006d0
 80014ec:	40013800 	.word	0x40013800

080014f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_GPIO_Init+0x40>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	4a0d      	ldr	r2, [pc, #52]	; (8001530 <MX_GPIO_Init+0x40>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6193      	str	r3, [r2, #24]
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_GPIO_Init+0x40>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_GPIO_Init+0x40>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	4a07      	ldr	r2, [pc, #28]	; (8001530 <MX_GPIO_Init+0x40>)
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	6193      	str	r3, [r2, #24]
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <MX_GPIO_Init+0x40>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]

}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	40021000 	.word	0x40021000

08001534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001538:	b672      	cpsid	i
}
 800153a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153c:	e7fe      	b.n	800153c <Error_Handler+0x8>
	...

08001540 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001546:	f000 fa27 	bl	8001998 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800154a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800154e:	2201      	movs	r2, #1
 8001550:	2178      	movs	r1, #120	; 0x78
 8001552:	485b      	ldr	r0, [pc, #364]	; (80016c0 <SSD1306_Init+0x180>)
 8001554:	f001 fe2e 	bl	80031b4 <HAL_I2C_IsDeviceReady>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800155e:	2300      	movs	r3, #0
 8001560:	e0a9      	b.n	80016b6 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001562:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001566:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001568:	e002      	b.n	8001570 <SSD1306_Init+0x30>
		p--;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3b01      	subs	r3, #1
 800156e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f9      	bne.n	800156a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001576:	22ae      	movs	r2, #174	; 0xae
 8001578:	2100      	movs	r1, #0
 800157a:	2078      	movs	r0, #120	; 0x78
 800157c:	f000 fa68 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001580:	2220      	movs	r2, #32
 8001582:	2100      	movs	r1, #0
 8001584:	2078      	movs	r0, #120	; 0x78
 8001586:	f000 fa63 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800158a:	2210      	movs	r2, #16
 800158c:	2100      	movs	r1, #0
 800158e:	2078      	movs	r0, #120	; 0x78
 8001590:	f000 fa5e 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001594:	22b0      	movs	r2, #176	; 0xb0
 8001596:	2100      	movs	r1, #0
 8001598:	2078      	movs	r0, #120	; 0x78
 800159a:	f000 fa59 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800159e:	22c8      	movs	r2, #200	; 0xc8
 80015a0:	2100      	movs	r1, #0
 80015a2:	2078      	movs	r0, #120	; 0x78
 80015a4:	f000 fa54 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80015a8:	2200      	movs	r2, #0
 80015aa:	2100      	movs	r1, #0
 80015ac:	2078      	movs	r0, #120	; 0x78
 80015ae:	f000 fa4f 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80015b2:	2210      	movs	r2, #16
 80015b4:	2100      	movs	r1, #0
 80015b6:	2078      	movs	r0, #120	; 0x78
 80015b8:	f000 fa4a 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80015bc:	2240      	movs	r2, #64	; 0x40
 80015be:	2100      	movs	r1, #0
 80015c0:	2078      	movs	r0, #120	; 0x78
 80015c2:	f000 fa45 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80015c6:	2281      	movs	r2, #129	; 0x81
 80015c8:	2100      	movs	r1, #0
 80015ca:	2078      	movs	r0, #120	; 0x78
 80015cc:	f000 fa40 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80015d0:	22ff      	movs	r2, #255	; 0xff
 80015d2:	2100      	movs	r1, #0
 80015d4:	2078      	movs	r0, #120	; 0x78
 80015d6:	f000 fa3b 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80015da:	22a1      	movs	r2, #161	; 0xa1
 80015dc:	2100      	movs	r1, #0
 80015de:	2078      	movs	r0, #120	; 0x78
 80015e0:	f000 fa36 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80015e4:	22a6      	movs	r2, #166	; 0xa6
 80015e6:	2100      	movs	r1, #0
 80015e8:	2078      	movs	r0, #120	; 0x78
 80015ea:	f000 fa31 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80015ee:	22a8      	movs	r2, #168	; 0xa8
 80015f0:	2100      	movs	r1, #0
 80015f2:	2078      	movs	r0, #120	; 0x78
 80015f4:	f000 fa2c 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80015f8:	223f      	movs	r2, #63	; 0x3f
 80015fa:	2100      	movs	r1, #0
 80015fc:	2078      	movs	r0, #120	; 0x78
 80015fe:	f000 fa27 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001602:	22a4      	movs	r2, #164	; 0xa4
 8001604:	2100      	movs	r1, #0
 8001606:	2078      	movs	r0, #120	; 0x78
 8001608:	f000 fa22 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800160c:	22d3      	movs	r2, #211	; 0xd3
 800160e:	2100      	movs	r1, #0
 8001610:	2078      	movs	r0, #120	; 0x78
 8001612:	f000 fa1d 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	2078      	movs	r0, #120	; 0x78
 800161c:	f000 fa18 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001620:	22d5      	movs	r2, #213	; 0xd5
 8001622:	2100      	movs	r1, #0
 8001624:	2078      	movs	r0, #120	; 0x78
 8001626:	f000 fa13 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800162a:	22f0      	movs	r2, #240	; 0xf0
 800162c:	2100      	movs	r1, #0
 800162e:	2078      	movs	r0, #120	; 0x78
 8001630:	f000 fa0e 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001634:	22d9      	movs	r2, #217	; 0xd9
 8001636:	2100      	movs	r1, #0
 8001638:	2078      	movs	r0, #120	; 0x78
 800163a:	f000 fa09 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800163e:	2222      	movs	r2, #34	; 0x22
 8001640:	2100      	movs	r1, #0
 8001642:	2078      	movs	r0, #120	; 0x78
 8001644:	f000 fa04 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001648:	22da      	movs	r2, #218	; 0xda
 800164a:	2100      	movs	r1, #0
 800164c:	2078      	movs	r0, #120	; 0x78
 800164e:	f000 f9ff 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001652:	2212      	movs	r2, #18
 8001654:	2100      	movs	r1, #0
 8001656:	2078      	movs	r0, #120	; 0x78
 8001658:	f000 f9fa 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800165c:	22db      	movs	r2, #219	; 0xdb
 800165e:	2100      	movs	r1, #0
 8001660:	2078      	movs	r0, #120	; 0x78
 8001662:	f000 f9f5 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001666:	2220      	movs	r2, #32
 8001668:	2100      	movs	r1, #0
 800166a:	2078      	movs	r0, #120	; 0x78
 800166c:	f000 f9f0 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001670:	228d      	movs	r2, #141	; 0x8d
 8001672:	2100      	movs	r1, #0
 8001674:	2078      	movs	r0, #120	; 0x78
 8001676:	f000 f9eb 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800167a:	2214      	movs	r2, #20
 800167c:	2100      	movs	r1, #0
 800167e:	2078      	movs	r0, #120	; 0x78
 8001680:	f000 f9e6 	bl	8001a50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001684:	22af      	movs	r2, #175	; 0xaf
 8001686:	2100      	movs	r1, #0
 8001688:	2078      	movs	r0, #120	; 0x78
 800168a:	f000 f9e1 	bl	8001a50 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800168e:	222e      	movs	r2, #46	; 0x2e
 8001690:	2100      	movs	r1, #0
 8001692:	2078      	movs	r0, #120	; 0x78
 8001694:	f000 f9dc 	bl	8001a50 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001698:	2000      	movs	r0, #0
 800169a:	f000 f843 	bl	8001724 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800169e:	f000 f813 	bl	80016c8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <SSD1306_Init+0x184>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <SSD1306_Init+0x184>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80016ae:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <SSD1306_Init+0x184>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80016b4:	2301      	movs	r3, #1
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	2000064c 	.word	0x2000064c
 80016c4:	20000618 	.word	0x20000618

080016c8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80016ce:	2300      	movs	r3, #0
 80016d0:	71fb      	strb	r3, [r7, #7]
 80016d2:	e01d      	b.n	8001710 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	3b50      	subs	r3, #80	; 0x50
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	461a      	mov	r2, r3
 80016dc:	2100      	movs	r1, #0
 80016de:	2078      	movs	r0, #120	; 0x78
 80016e0:	f000 f9b6 	bl	8001a50 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2100      	movs	r1, #0
 80016e8:	2078      	movs	r0, #120	; 0x78
 80016ea:	f000 f9b1 	bl	8001a50 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80016ee:	2210      	movs	r2, #16
 80016f0:	2100      	movs	r1, #0
 80016f2:	2078      	movs	r0, #120	; 0x78
 80016f4:	f000 f9ac 	bl	8001a50 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	01db      	lsls	r3, r3, #7
 80016fc:	4a08      	ldr	r2, [pc, #32]	; (8001720 <SSD1306_UpdateScreen+0x58>)
 80016fe:	441a      	add	r2, r3
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	2140      	movs	r1, #64	; 0x40
 8001704:	2078      	movs	r0, #120	; 0x78
 8001706:	f000 f95b 	bl	80019c0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	3301      	adds	r3, #1
 800170e:	71fb      	strb	r3, [r7, #7]
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	2b07      	cmp	r3, #7
 8001714:	d9de      	bls.n	80016d4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001716:	bf00      	nop
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000218 	.word	0x20000218

08001724 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <SSD1306_Fill+0x14>
 8001734:	2300      	movs	r3, #0
 8001736:	e000      	b.n	800173a <SSD1306_Fill+0x16>
 8001738:	23ff      	movs	r3, #255	; 0xff
 800173a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800173e:	4619      	mov	r1, r3
 8001740:	4803      	ldr	r0, [pc, #12]	; (8001750 <SSD1306_Fill+0x2c>)
 8001742:	f003 f887 	bl	8004854 <memset>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000218 	.word	0x20000218

08001754 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	80fb      	strh	r3, [r7, #6]
 800175e:	460b      	mov	r3, r1
 8001760:	80bb      	strh	r3, [r7, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	70fb      	strb	r3, [r7, #3]
	if (
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	2b7f      	cmp	r3, #127	; 0x7f
 800176a:	d848      	bhi.n	80017fe <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800176c:	88bb      	ldrh	r3, [r7, #4]
 800176e:	2b3f      	cmp	r3, #63	; 0x3f
 8001770:	d845      	bhi.n	80017fe <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001772:	4b25      	ldr	r3, [pc, #148]	; (8001808 <SSD1306_DrawPixel+0xb4>)
 8001774:	791b      	ldrb	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d006      	beq.n	8001788 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	2b00      	cmp	r3, #0
 800177e:	bf0c      	ite	eq
 8001780:	2301      	moveq	r3, #1
 8001782:	2300      	movne	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d11a      	bne.n	80017c4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800178e:	88fa      	ldrh	r2, [r7, #6]
 8001790:	88bb      	ldrh	r3, [r7, #4]
 8001792:	08db      	lsrs	r3, r3, #3
 8001794:	b298      	uxth	r0, r3
 8001796:	4603      	mov	r3, r0
 8001798:	01db      	lsls	r3, r3, #7
 800179a:	4413      	add	r3, r2
 800179c:	4a1b      	ldr	r2, [pc, #108]	; (800180c <SSD1306_DrawPixel+0xb8>)
 800179e:	5cd3      	ldrb	r3, [r2, r3]
 80017a0:	b25a      	sxtb	r2, r3
 80017a2:	88bb      	ldrh	r3, [r7, #4]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	2101      	movs	r1, #1
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	b25b      	sxtb	r3, r3
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b259      	sxtb	r1, r3
 80017b4:	88fa      	ldrh	r2, [r7, #6]
 80017b6:	4603      	mov	r3, r0
 80017b8:	01db      	lsls	r3, r3, #7
 80017ba:	4413      	add	r3, r2
 80017bc:	b2c9      	uxtb	r1, r1
 80017be:	4a13      	ldr	r2, [pc, #76]	; (800180c <SSD1306_DrawPixel+0xb8>)
 80017c0:	54d1      	strb	r1, [r2, r3]
 80017c2:	e01d      	b.n	8001800 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80017c4:	88fa      	ldrh	r2, [r7, #6]
 80017c6:	88bb      	ldrh	r3, [r7, #4]
 80017c8:	08db      	lsrs	r3, r3, #3
 80017ca:	b298      	uxth	r0, r3
 80017cc:	4603      	mov	r3, r0
 80017ce:	01db      	lsls	r3, r3, #7
 80017d0:	4413      	add	r3, r2
 80017d2:	4a0e      	ldr	r2, [pc, #56]	; (800180c <SSD1306_DrawPixel+0xb8>)
 80017d4:	5cd3      	ldrb	r3, [r2, r3]
 80017d6:	b25a      	sxtb	r2, r3
 80017d8:	88bb      	ldrh	r3, [r7, #4]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	2101      	movs	r1, #1
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	b25b      	sxtb	r3, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	4013      	ands	r3, r2
 80017ec:	b259      	sxtb	r1, r3
 80017ee:	88fa      	ldrh	r2, [r7, #6]
 80017f0:	4603      	mov	r3, r0
 80017f2:	01db      	lsls	r3, r3, #7
 80017f4:	4413      	add	r3, r2
 80017f6:	b2c9      	uxtb	r1, r1
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <SSD1306_DrawPixel+0xb8>)
 80017fa:	54d1      	strb	r1, [r2, r3]
 80017fc:	e000      	b.n	8001800 <SSD1306_DrawPixel+0xac>
		return;
 80017fe:	bf00      	nop
	}
}
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	20000618 	.word	0x20000618
 800180c:	20000218 	.word	0x20000218

08001810 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	460a      	mov	r2, r1
 800181a:	80fb      	strh	r3, [r7, #6]
 800181c:	4613      	mov	r3, r2
 800181e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001820:	4a05      	ldr	r2, [pc, #20]	; (8001838 <SSD1306_GotoXY+0x28>)
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001826:	4a04      	ldr	r2, [pc, #16]	; (8001838 <SSD1306_GotoXY+0x28>)
 8001828:	88bb      	ldrh	r3, [r7, #4]
 800182a:	8053      	strh	r3, [r2, #2]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000618 	.word	0x20000618

0800183c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
 8001848:	4613      	mov	r3, r2
 800184a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800184c:	4b3a      	ldr	r3, [pc, #232]	; (8001938 <SSD1306_Putc+0xfc>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	4413      	add	r3, r2
	if (
 8001858:	2b7f      	cmp	r3, #127	; 0x7f
 800185a:	dc07      	bgt.n	800186c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800185c:	4b36      	ldr	r3, [pc, #216]	; (8001938 <SSD1306_Putc+0xfc>)
 800185e:	885b      	ldrh	r3, [r3, #2]
 8001860:	461a      	mov	r2, r3
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	785b      	ldrb	r3, [r3, #1]
 8001866:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001868:	2b3f      	cmp	r3, #63	; 0x3f
 800186a:	dd01      	ble.n	8001870 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800186c:	2300      	movs	r3, #0
 800186e:	e05e      	b.n	800192e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	e04b      	b.n	800190e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	3b20      	subs	r3, #32
 800187e:	6839      	ldr	r1, [r7, #0]
 8001880:	7849      	ldrb	r1, [r1, #1]
 8001882:	fb01 f303 	mul.w	r3, r1, r3
 8001886:	4619      	mov	r1, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	440b      	add	r3, r1
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	e030      	b.n	80018fc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d010      	beq.n	80018cc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80018aa:	4b23      	ldr	r3, [pc, #140]	; (8001938 <SSD1306_Putc+0xfc>)
 80018ac:	881a      	ldrh	r2, [r3, #0]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	b298      	uxth	r0, r3
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <SSD1306_Putc+0xfc>)
 80018b8:	885a      	ldrh	r2, [r3, #2]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	79ba      	ldrb	r2, [r7, #6]
 80018c4:	4619      	mov	r1, r3
 80018c6:	f7ff ff45 	bl	8001754 <SSD1306_DrawPixel>
 80018ca:	e014      	b.n	80018f6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80018cc:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <SSD1306_Putc+0xfc>)
 80018ce:	881a      	ldrh	r2, [r3, #0]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	b298      	uxth	r0, r3
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <SSD1306_Putc+0xfc>)
 80018da:	885a      	ldrh	r2, [r3, #2]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	b299      	uxth	r1, r3
 80018e4:	79bb      	ldrb	r3, [r7, #6]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf0c      	ite	eq
 80018ea:	2301      	moveq	r3, #1
 80018ec:	2300      	movne	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	461a      	mov	r2, r3
 80018f2:	f7ff ff2f 	bl	8001754 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	3301      	adds	r3, #1
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4293      	cmp	r3, r2
 8001906:	d3c8      	bcc.n	800189a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	3301      	adds	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	785b      	ldrb	r3, [r3, #1]
 8001912:	461a      	mov	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	4293      	cmp	r3, r2
 8001918:	d3ad      	bcc.n	8001876 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800191a:	4b07      	ldr	r3, [pc, #28]	; (8001938 <SSD1306_Putc+0xfc>)
 800191c:	881a      	ldrh	r2, [r3, #0]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	b29b      	uxth	r3, r3
 8001924:	4413      	add	r3, r2
 8001926:	b29a      	uxth	r2, r3
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <SSD1306_Putc+0xfc>)
 800192a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800192c:	79fb      	ldrb	r3, [r7, #7]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000618 	.word	0x20000618

0800193c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	4613      	mov	r3, r2
 8001948:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800194a:	e012      	b.n	8001972 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	79fa      	ldrb	r2, [r7, #7]
 8001952:	68b9      	ldr	r1, [r7, #8]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff71 	bl	800183c <SSD1306_Putc>
 800195a:	4603      	mov	r3, r0
 800195c:	461a      	mov	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d002      	beq.n	800196c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	e008      	b.n	800197e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3301      	adds	r3, #1
 8001970:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1e8      	bne.n	800194c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	781b      	ldrb	r3, [r3, #0]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800198a:	2000      	movs	r0, #0
 800198c:	f7ff feca 	bl	8001724 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001990:	f7ff fe9a 	bl	80016c8 <SSD1306_UpdateScreen>
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}

08001998 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800199e:	4b07      	ldr	r3, [pc, #28]	; (80019bc <ssd1306_I2C_Init+0x24>)
 80019a0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80019a2:	e002      	b.n	80019aa <ssd1306_I2C_Init+0x12>
		p--;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f9      	bne.n	80019a4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	0003d090 	.word	0x0003d090

080019c0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b0c7      	sub	sp, #284	; 0x11c
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	4604      	mov	r4, r0
 80019c8:	4608      	mov	r0, r1
 80019ca:	4639      	mov	r1, r7
 80019cc:	600a      	str	r2, [r1, #0]
 80019ce:	4619      	mov	r1, r3
 80019d0:	1dfb      	adds	r3, r7, #7
 80019d2:	4622      	mov	r2, r4
 80019d4:	701a      	strb	r2, [r3, #0]
 80019d6:	1dbb      	adds	r3, r7, #6
 80019d8:	4602      	mov	r2, r0
 80019da:	701a      	strb	r2, [r3, #0]
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	460a      	mov	r2, r1
 80019e0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	1dba      	adds	r2, r7, #6
 80019e8:	7812      	ldrb	r2, [r2, #0]
 80019ea:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80019ec:	2300      	movs	r3, #0
 80019ee:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019f2:	e010      	b.n	8001a16 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80019f4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019f8:	463a      	mov	r2, r7
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	441a      	add	r2, r3
 80019fe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a02:	3301      	adds	r3, #1
 8001a04:	7811      	ldrb	r1, [r2, #0]
 8001a06:	f107 020c 	add.w	r2, r7, #12
 8001a0a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001a0c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a10:	3301      	adds	r3, #1
 8001a12:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a16:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	1d3a      	adds	r2, r7, #4
 8001a1e:	8812      	ldrh	r2, [r2, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d8e7      	bhi.n	80019f4 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001a24:	1dfb      	adds	r3, r7, #7
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b299      	uxth	r1, r3
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	f107 020c 	add.w	r2, r7, #12
 8001a36:	200a      	movs	r0, #10
 8001a38:	9000      	str	r0, [sp, #0]
 8001a3a:	4804      	ldr	r0, [pc, #16]	; (8001a4c <ssd1306_I2C_WriteMulti+0x8c>)
 8001a3c:	f001 fabc 	bl	8002fb8 <HAL_I2C_Master_Transmit>
}
 8001a40:	bf00      	nop
 8001a42:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd90      	pop	{r4, r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000064c 	.word	0x2000064c

08001a50 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	71bb      	strb	r3, [r7, #6]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001a62:	79bb      	ldrb	r3, [r7, #6]
 8001a64:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001a66:	797b      	ldrb	r3, [r7, #5]
 8001a68:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	b299      	uxth	r1, r3
 8001a6e:	f107 020c 	add.w	r2, r7, #12
 8001a72:	230a      	movs	r3, #10
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2302      	movs	r3, #2
 8001a78:	4803      	ldr	r0, [pc, #12]	; (8001a88 <ssd1306_I2C_Write+0x38>)
 8001a7a:	f001 fa9d 	bl	8002fb8 <HAL_I2C_Master_Transmit>
}
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000064c 	.word	0x2000064c

08001a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <HAL_MspInit+0x5c>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	4a14      	ldr	r2, [pc, #80]	; (8001ae8 <HAL_MspInit+0x5c>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6193      	str	r3, [r2, #24]
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_MspInit+0x5c>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <HAL_MspInit+0x5c>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <HAL_MspInit+0x5c>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	61d3      	str	r3, [r2, #28]
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <HAL_MspInit+0x5c>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <HAL_MspInit+0x60>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	4a04      	ldr	r2, [pc, #16]	; (8001aec <HAL_MspInit+0x60>)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40010000 	.word	0x40010000

08001af0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0310 	add.w	r3, r7, #16
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <HAL_ADC_MspInit+0x6c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d121      	bne.n	8001b54 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <HAL_ADC_MspInit+0x70>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4a12      	ldr	r2, [pc, #72]	; (8001b60 <HAL_ADC_MspInit+0x70>)
 8001b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b1a:	6193      	str	r3, [r2, #24]
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <HAL_ADC_MspInit+0x70>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <HAL_ADC_MspInit+0x70>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a0c      	ldr	r2, [pc, #48]	; (8001b60 <HAL_ADC_MspInit+0x70>)
 8001b2e:	f043 0304 	orr.w	r3, r3, #4
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_ADC_MspInit+0x70>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b40:	2303      	movs	r3, #3
 8001b42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b44:	2303      	movs	r3, #3
 8001b46:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <HAL_ADC_MspInit+0x74>)
 8001b50:	f000 ff6a 	bl	8002a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b54:	bf00      	nop
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40012400 	.word	0x40012400
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40010800 	.word	0x40010800

08001b68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0310 	add.w	r3, r7, #16
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a15      	ldr	r2, [pc, #84]	; (8001bd8 <HAL_I2C_MspInit+0x70>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d123      	bne.n	8001bd0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <HAL_I2C_MspInit+0x74>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4a13      	ldr	r2, [pc, #76]	; (8001bdc <HAL_I2C_MspInit+0x74>)
 8001b8e:	f043 0308 	orr.w	r3, r3, #8
 8001b92:	6193      	str	r3, [r2, #24]
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_I2C_MspInit+0x74>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ba0:	23c0      	movs	r3, #192	; 0xc0
 8001ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba4:	2312      	movs	r3, #18
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bac:	f107 0310 	add.w	r3, r7, #16
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	480b      	ldr	r0, [pc, #44]	; (8001be0 <HAL_I2C_MspInit+0x78>)
 8001bb4:	f000 ff38 	bl	8002a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <HAL_I2C_MspInit+0x74>)
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	4a07      	ldr	r2, [pc, #28]	; (8001bdc <HAL_I2C_MspInit+0x74>)
 8001bbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bc2:	61d3      	str	r3, [r2, #28]
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_I2C_MspInit+0x74>)
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bd0:	bf00      	nop
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40005400 	.word	0x40005400
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40010c00 	.word	0x40010c00

08001be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 0310 	add.w	r3, r7, #16
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a1c      	ldr	r2, [pc, #112]	; (8001c70 <HAL_UART_MspInit+0x8c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d131      	bne.n	8001c68 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c04:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <HAL_UART_MspInit+0x90>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a1a      	ldr	r2, [pc, #104]	; (8001c74 <HAL_UART_MspInit+0x90>)
 8001c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <HAL_UART_MspInit+0x90>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1c:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <HAL_UART_MspInit+0x90>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <HAL_UART_MspInit+0x90>)
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	6193      	str	r3, [r2, #24]
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_UART_MspInit+0x90>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c42:	f107 0310 	add.w	r3, r7, #16
 8001c46:	4619      	mov	r1, r3
 8001c48:	480b      	ldr	r0, [pc, #44]	; (8001c78 <HAL_UART_MspInit+0x94>)
 8001c4a:	f000 feed 	bl	8002a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	4619      	mov	r1, r3
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <HAL_UART_MspInit+0x94>)
 8001c64:	f000 fee0 	bl	8002a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c68:	bf00      	nop
 8001c6a:	3720      	adds	r7, #32
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40013800 	.word	0x40013800
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40010800 	.word	0x40010800

08001c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <NMI_Handler+0x4>

08001c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <HardFault_Handler+0x4>

08001c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <MemManage_Handler+0x4>

08001c8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c92:	e7fe      	b.n	8001c92 <BusFault_Handler+0x4>

08001c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <UsageFault_Handler+0x4>

08001c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr

08001ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr

08001cbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc2:	f000 f935 	bl	8001f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0
	return 1;
 8001cce:	2301      	movs	r3, #1
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <_kill>:

int _kill(int pid, int sig)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ce2:	f002 fd8d 	bl	8004800 <__errno>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2216      	movs	r2, #22
 8001cea:	601a      	str	r2, [r3, #0]
	return -1;
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <_exit>:

void _exit (int status)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ffe7 	bl	8001cd8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d0a:	e7fe      	b.n	8001d0a <_exit+0x12>

08001d0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	e00a      	b.n	8001d34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d1e:	f3af 8000 	nop.w
 8001d22:	4601      	mov	r1, r0
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	60ba      	str	r2, [r7, #8]
 8001d2a:	b2ca      	uxtb	r2, r1
 8001d2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	3301      	adds	r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	dbf0      	blt.n	8001d1e <_read+0x12>
	}

return len;
 8001d3c:	687b      	ldr	r3, [r7, #4]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	e009      	b.n	8001d6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	60ba      	str	r2, [r7, #8]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	dbf1      	blt.n	8001d58 <_write+0x12>
	}
	return len;
 8001d74:	687b      	ldr	r3, [r7, #4]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <_close>:

int _close(int file)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
	return -1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001da4:	605a      	str	r2, [r3, #4]
	return 0;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr

08001db2 <_isatty>:

int _isatty(int file)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
	return 1;
 8001dba:	2301      	movs	r3, #1
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr

08001dc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b085      	sub	sp, #20
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
	return 0;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
	...

08001de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de8:	4a14      	ldr	r2, [pc, #80]	; (8001e3c <_sbrk+0x5c>)
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <_sbrk+0x60>)
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <_sbrk+0x64>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <_sbrk+0x64>)
 8001dfe:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <_sbrk+0x68>)
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <_sbrk+0x64>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d207      	bcs.n	8001e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e10:	f002 fcf6 	bl	8004800 <__errno>
 8001e14:	4603      	mov	r3, r0
 8001e16:	220c      	movs	r2, #12
 8001e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1e:	e009      	b.n	8001e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <_sbrk+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e26:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <_sbrk+0x64>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <_sbrk+0x64>)
 8001e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e32:	68fb      	ldr	r3, [r7, #12]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20005000 	.word	0x20005000
 8001e40:	00000400 	.word	0x00000400
 8001e44:	20000620 	.word	0x20000620
 8001e48:	20000730 	.word	0x20000730

08001e4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e58:	f7ff fff8 	bl	8001e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e5c:	480b      	ldr	r0, [pc, #44]	; (8001e8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e5e:	490c      	ldr	r1, [pc, #48]	; (8001e90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e60:	4a0c      	ldr	r2, [pc, #48]	; (8001e94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e64:	e002      	b.n	8001e6c <LoopCopyDataInit>

08001e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e6a:	3304      	adds	r3, #4

08001e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e70:	d3f9      	bcc.n	8001e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e72:	4a09      	ldr	r2, [pc, #36]	; (8001e98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e74:	4c09      	ldr	r4, [pc, #36]	; (8001e9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e78:	e001      	b.n	8001e7e <LoopFillZerobss>

08001e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e7c:	3204      	adds	r2, #4

08001e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e80:	d3fb      	bcc.n	8001e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e82:	f002 fcc3 	bl	800480c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e86:	f7ff f8d3 	bl	8001030 <main>
  bx lr
 8001e8a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e90:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001e94:	08008ee4 	.word	0x08008ee4
  ldr r2, =_sbss
 8001e98:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001e9c:	2000072c 	.word	0x2000072c

08001ea0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ea0:	e7fe      	b.n	8001ea0 <ADC1_2_IRQHandler>
	...

08001ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <HAL_Init+0x28>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a07      	ldr	r2, [pc, #28]	; (8001ecc <HAL_Init+0x28>)
 8001eae:	f043 0310 	orr.w	r3, r3, #16
 8001eb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	f000 fd83 	bl	80029c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f000 f808 	bl	8001ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec0:	f7ff fde4 	bl	8001a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40022000 	.word	0x40022000

08001ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <HAL_InitTick+0x54>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_InitTick+0x58>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fd8d 	bl	8002a0e <HAL_SYSTICK_Config>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00e      	b.n	8001f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b0f      	cmp	r3, #15
 8001f02:	d80a      	bhi.n	8001f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f04:	2200      	movs	r2, #0
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	f000 fd63 	bl	80029d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f10:	4a06      	ldr	r2, [pc, #24]	; (8001f2c <HAL_InitTick+0x5c>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e000      	b.n	8001f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000010 	.word	0x20000010
 8001f28:	20000018 	.word	0x20000018
 8001f2c:	20000014 	.word	0x20000014

08001f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <HAL_IncTick+0x1c>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_IncTick+0x20>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	4a03      	ldr	r2, [pc, #12]	; (8001f50 <HAL_IncTick+0x20>)
 8001f42:	6013      	str	r3, [r2, #0]
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	20000018 	.word	0x20000018
 8001f50:	20000718 	.word	0x20000718

08001f54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return uwTick;
 8001f58:	4b02      	ldr	r3, [pc, #8]	; (8001f64 <HAL_GetTick+0x10>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	20000718 	.word	0x20000718

08001f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff fff0 	bl	8001f54 <HAL_GetTick>
 8001f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d005      	beq.n	8001f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <HAL_Delay+0x44>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f8e:	bf00      	nop
 8001f90:	f7ff ffe0 	bl	8001f54 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d8f7      	bhi.n	8001f90 <HAL_Delay+0x28>
  {
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000018 	.word	0x20000018

08001fb0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e0be      	b.n	8002150 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d109      	bne.n	8001ff4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff fd7e 	bl	8001af0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fbf1 	bl	80027dc <ADC_ConversionStop_Disable>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b00      	cmp	r3, #0
 8002008:	f040 8099 	bne.w	800213e <HAL_ADC_Init+0x18e>
 800200c:	7dfb      	ldrb	r3, [r7, #23]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f040 8095 	bne.w	800213e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800201c:	f023 0302 	bic.w	r3, r3, #2
 8002020:	f043 0202 	orr.w	r2, r3, #2
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002030:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	7b1b      	ldrb	r3, [r3, #12]
 8002036:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002038:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	4313      	orrs	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002048:	d003      	beq.n	8002052 <HAL_ADC_Init+0xa2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d102      	bne.n	8002058 <HAL_ADC_Init+0xa8>
 8002052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002056:	e000      	b.n	800205a <HAL_ADC_Init+0xaa>
 8002058:	2300      	movs	r3, #0
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	7d1b      	ldrb	r3, [r3, #20]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d119      	bne.n	800209c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	7b1b      	ldrb	r3, [r3, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d109      	bne.n	8002084 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	3b01      	subs	r3, #1
 8002076:	035a      	lsls	r2, r3, #13
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	e00b      	b.n	800209c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	f043 0220 	orr.w	r2, r3, #32
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	f043 0201 	orr.w	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	4b28      	ldr	r3, [pc, #160]	; (8002158 <HAL_ADC_Init+0x1a8>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	430b      	orrs	r3, r1
 80020c2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020cc:	d003      	beq.n	80020d6 <HAL_ADC_Init+0x126>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d104      	bne.n	80020e0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	3b01      	subs	r3, #1
 80020dc:	051b      	lsls	r3, r3, #20
 80020de:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <HAL_ADC_Init+0x1ac>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	429a      	cmp	r2, r3
 8002102:	d10b      	bne.n	800211c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	f023 0303 	bic.w	r3, r3, #3
 8002112:	f043 0201 	orr.w	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800211a:	e018      	b.n	800214e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	f023 0312 	bic.w	r3, r3, #18
 8002124:	f043 0210 	orr.w	r2, r3, #16
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	f043 0201 	orr.w	r2, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800213c:	e007      	b.n	800214e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002142:	f043 0210 	orr.w	r2, r3, #16
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800214e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	ffe1f7fd 	.word	0xffe1f7fd
 800215c:	ff1f0efe 	.word	0xff1f0efe

08002160 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_ADC_Start+0x1a>
 8002176:	2302      	movs	r3, #2
 8002178:	e098      	b.n	80022ac <HAL_ADC_Start+0x14c>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 fad0 	bl	8002728 <ADC_Enable>
 8002188:	4603      	mov	r3, r0
 800218a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	2b00      	cmp	r3, #0
 8002190:	f040 8087 	bne.w	80022a2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800219c:	f023 0301 	bic.w	r3, r3, #1
 80021a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a41      	ldr	r2, [pc, #260]	; (80022b4 <HAL_ADC_Start+0x154>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d105      	bne.n	80021be <HAL_ADC_Start+0x5e>
 80021b2:	4b41      	ldr	r3, [pc, #260]	; (80022b8 <HAL_ADC_Start+0x158>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d115      	bne.n	80021ea <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d026      	beq.n	8002226 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021e8:	e01d      	b.n	8002226 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a2f      	ldr	r2, [pc, #188]	; (80022b8 <HAL_ADC_Start+0x158>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d004      	beq.n	800220a <HAL_ADC_Start+0xaa>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a2b      	ldr	r2, [pc, #172]	; (80022b4 <HAL_ADC_Start+0x154>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d10d      	bne.n	8002226 <HAL_ADC_Start+0xc6>
 800220a:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <HAL_ADC_Start+0x158>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800221e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d006      	beq.n	8002240 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002236:	f023 0206 	bic.w	r2, r3, #6
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	62da      	str	r2, [r3, #44]	; 0x2c
 800223e:	e002      	b.n	8002246 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f06f 0202 	mvn.w	r2, #2
 8002256:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002262:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002266:	d113      	bne.n	8002290 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800226c:	4a11      	ldr	r2, [pc, #68]	; (80022b4 <HAL_ADC_Start+0x154>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d105      	bne.n	800227e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_ADC_Start+0x158>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800227a:	2b00      	cmp	r3, #0
 800227c:	d108      	bne.n	8002290 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	e00c      	b.n	80022aa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	e003      	b.n	80022aa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40012800 	.word	0x40012800
 80022b8:	40012400 	.word	0x40012400

080022bc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_Stop+0x1a>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e01a      	b.n	800230c <HAL_ADC_Stop+0x50>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fa7c 	bl	80027dc <ADC_ConversionStop_Disable>
 80022e4:	4603      	mov	r3, r0
 80022e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022f6:	f023 0301 	bic.w	r3, r3, #1
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800230a:	7bfb      	ldrb	r3, [r7, #15]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800232a:	f7ff fe13 	bl	8001f54 <HAL_GetTick>
 800232e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	f043 0220 	orr.w	r2, r3, #32
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0d3      	b.n	80024fe <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d131      	bne.n	80023c8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800236e:	2b00      	cmp	r3, #0
 8002370:	d12a      	bne.n	80023c8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002372:	e021      	b.n	80023b8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237a:	d01d      	beq.n	80023b8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d007      	beq.n	8002392 <HAL_ADC_PollForConversion+0x7e>
 8002382:	f7ff fde7 	bl	8001f54 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d212      	bcs.n	80023b8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10b      	bne.n	80023b8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	f043 0204 	orr.w	r2, r3, #4
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e0a2      	b.n	80024fe <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0d6      	beq.n	8002374 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80023c6:	e070      	b.n	80024aa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80023c8:	4b4f      	ldr	r3, [pc, #316]	; (8002508 <HAL_ADC_PollForConversion+0x1f4>)
 80023ca:	681c      	ldr	r4, [r3, #0]
 80023cc:	2002      	movs	r0, #2
 80023ce:	f001 ff3d 	bl	800424c <HAL_RCCEx_GetPeriphCLKFreq>
 80023d2:	4603      	mov	r3, r0
 80023d4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6919      	ldr	r1, [r3, #16]
 80023de:	4b4b      	ldr	r3, [pc, #300]	; (800250c <HAL_ADC_PollForConversion+0x1f8>)
 80023e0:	400b      	ands	r3, r1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d118      	bne.n	8002418 <HAL_ADC_PollForConversion+0x104>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68d9      	ldr	r1, [r3, #12]
 80023ec:	4b48      	ldr	r3, [pc, #288]	; (8002510 <HAL_ADC_PollForConversion+0x1fc>)
 80023ee:	400b      	ands	r3, r1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d111      	bne.n	8002418 <HAL_ADC_PollForConversion+0x104>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6919      	ldr	r1, [r3, #16]
 80023fa:	4b46      	ldr	r3, [pc, #280]	; (8002514 <HAL_ADC_PollForConversion+0x200>)
 80023fc:	400b      	ands	r3, r1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d108      	bne.n	8002414 <HAL_ADC_PollForConversion+0x100>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68d9      	ldr	r1, [r3, #12]
 8002408:	4b43      	ldr	r3, [pc, #268]	; (8002518 <HAL_ADC_PollForConversion+0x204>)
 800240a:	400b      	ands	r3, r1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_ADC_PollForConversion+0x100>
 8002410:	2314      	movs	r3, #20
 8002412:	e020      	b.n	8002456 <HAL_ADC_PollForConversion+0x142>
 8002414:	2329      	movs	r3, #41	; 0x29
 8002416:	e01e      	b.n	8002456 <HAL_ADC_PollForConversion+0x142>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6919      	ldr	r1, [r3, #16]
 800241e:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <HAL_ADC_PollForConversion+0x200>)
 8002420:	400b      	ands	r3, r1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d106      	bne.n	8002434 <HAL_ADC_PollForConversion+0x120>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68d9      	ldr	r1, [r3, #12]
 800242c:	4b3a      	ldr	r3, [pc, #232]	; (8002518 <HAL_ADC_PollForConversion+0x204>)
 800242e:	400b      	ands	r3, r1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00d      	beq.n	8002450 <HAL_ADC_PollForConversion+0x13c>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6919      	ldr	r1, [r3, #16]
 800243a:	4b38      	ldr	r3, [pc, #224]	; (800251c <HAL_ADC_PollForConversion+0x208>)
 800243c:	400b      	ands	r3, r1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d108      	bne.n	8002454 <HAL_ADC_PollForConversion+0x140>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68d9      	ldr	r1, [r3, #12]
 8002448:	4b34      	ldr	r3, [pc, #208]	; (800251c <HAL_ADC_PollForConversion+0x208>)
 800244a:	400b      	ands	r3, r1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_ADC_PollForConversion+0x140>
 8002450:	2354      	movs	r3, #84	; 0x54
 8002452:	e000      	b.n	8002456 <HAL_ADC_PollForConversion+0x142>
 8002454:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800245c:	e021      	b.n	80024a2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d01a      	beq.n	800249c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d007      	beq.n	800247c <HAL_ADC_PollForConversion+0x168>
 800246c:	f7ff fd72 	bl	8001f54 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d20f      	bcs.n	800249c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	429a      	cmp	r2, r3
 8002482:	d90b      	bls.n	800249c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	f043 0204 	orr.w	r2, r3, #4
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e030      	b.n	80024fe <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	3301      	adds	r3, #1
 80024a0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d8d9      	bhi.n	800245e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f06f 0212 	mvn.w	r2, #18
 80024b2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80024ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80024ce:	d115      	bne.n	80024fc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d111      	bne.n	80024fc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d105      	bne.n	80024fc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	f043 0201 	orr.w	r2, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	371c      	adds	r7, #28
 8002502:	46bd      	mov	sp, r7
 8002504:	bd90      	pop	{r4, r7, pc}
 8002506:	bf00      	nop
 8002508:	20000010 	.word	0x20000010
 800250c:	24924924 	.word	0x24924924
 8002510:	00924924 	.word	0x00924924
 8002514:	12492492 	.word	0x12492492
 8002518:	00492492 	.word	0x00492492
 800251c:	00249249 	.word	0x00249249

08002520 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x20>
 8002554:	2302      	movs	r3, #2
 8002556:	e0dc      	b.n	8002712 <HAL_ADC_ConfigChannel+0x1da>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b06      	cmp	r3, #6
 8002566:	d81c      	bhi.n	80025a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	3b05      	subs	r3, #5
 800257a:	221f      	movs	r2, #31
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	4019      	ands	r1, r3
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	3b05      	subs	r3, #5
 8002594:	fa00 f203 	lsl.w	r2, r0, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	635a      	str	r2, [r3, #52]	; 0x34
 80025a0:	e03c      	b.n	800261c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b0c      	cmp	r3, #12
 80025a8:	d81c      	bhi.n	80025e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	3b23      	subs	r3, #35	; 0x23
 80025bc:	221f      	movs	r2, #31
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	4019      	ands	r1, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	3b23      	subs	r3, #35	; 0x23
 80025d6:	fa00 f203 	lsl.w	r2, r0, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	631a      	str	r2, [r3, #48]	; 0x30
 80025e2:	e01b      	b.n	800261c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	3b41      	subs	r3, #65	; 0x41
 80025f6:	221f      	movs	r2, #31
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	4019      	ands	r1, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	3b41      	subs	r3, #65	; 0x41
 8002610:	fa00 f203 	lsl.w	r2, r0, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b09      	cmp	r3, #9
 8002622:	d91c      	bls.n	800265e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68d9      	ldr	r1, [r3, #12]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4613      	mov	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4413      	add	r3, r2
 8002634:	3b1e      	subs	r3, #30
 8002636:	2207      	movs	r2, #7
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	4019      	ands	r1, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	6898      	ldr	r0, [r3, #8]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	3b1e      	subs	r3, #30
 8002650:	fa00 f203 	lsl.w	r2, r0, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	60da      	str	r2, [r3, #12]
 800265c:	e019      	b.n	8002692 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6919      	ldr	r1, [r3, #16]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	2207      	movs	r2, #7
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	4019      	ands	r1, r3
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6898      	ldr	r0, [r3, #8]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4613      	mov	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4413      	add	r3, r2
 8002686:	fa00 f203 	lsl.w	r2, r0, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b10      	cmp	r3, #16
 8002698:	d003      	beq.n	80026a2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800269e:	2b11      	cmp	r3, #17
 80026a0:	d132      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1d      	ldr	r2, [pc, #116]	; (800271c <HAL_ADC_ConfigChannel+0x1e4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d125      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d126      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80026c8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b10      	cmp	r3, #16
 80026d0:	d11a      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026d2:	4b13      	ldr	r3, [pc, #76]	; (8002720 <HAL_ADC_ConfigChannel+0x1e8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a13      	ldr	r2, [pc, #76]	; (8002724 <HAL_ADC_ConfigChannel+0x1ec>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	0c9a      	lsrs	r2, r3, #18
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026e8:	e002      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f9      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x1b2>
 80026f6:	e007      	b.n	8002708 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fc:	f043 0220 	orr.w	r2, r3, #32
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002710:	7bfb      	ldrb	r3, [r7, #15]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr
 800271c:	40012400 	.word	0x40012400
 8002720:	20000010 	.word	0x20000010
 8002724:	431bde83 	.word	0x431bde83

08002728 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b01      	cmp	r3, #1
 8002744:	d040      	beq.n	80027c8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0201 	orr.w	r2, r2, #1
 8002754:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002756:	4b1f      	ldr	r3, [pc, #124]	; (80027d4 <ADC_Enable+0xac>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <ADC_Enable+0xb0>)
 800275c:	fba2 2303 	umull	r2, r3, r2, r3
 8002760:	0c9b      	lsrs	r3, r3, #18
 8002762:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002764:	e002      	b.n	800276c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	3b01      	subs	r3, #1
 800276a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f9      	bne.n	8002766 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002772:	f7ff fbef 	bl	8001f54 <HAL_GetTick>
 8002776:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002778:	e01f      	b.n	80027ba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800277a:	f7ff fbeb 	bl	8001f54 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d918      	bls.n	80027ba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b01      	cmp	r3, #1
 8002794:	d011      	beq.n	80027ba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279a:	f043 0210 	orr.w	r2, r3, #16
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	f043 0201 	orr.w	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e007      	b.n	80027ca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d1d8      	bne.n	800277a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000010 	.word	0x20000010
 80027d8:	431bde83 	.word	0x431bde83

080027dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d12e      	bne.n	8002854 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0201 	bic.w	r2, r2, #1
 8002804:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002806:	f7ff fba5 	bl	8001f54 <HAL_GetTick>
 800280a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800280c:	e01b      	b.n	8002846 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800280e:	f7ff fba1 	bl	8001f54 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d914      	bls.n	8002846 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b01      	cmp	r3, #1
 8002828:	d10d      	bne.n	8002846 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282e:	f043 0210 	orr.w	r2, r3, #16
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	f043 0201 	orr.w	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e007      	b.n	8002856 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d0dc      	beq.n	800280e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800287c:	4013      	ands	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800288c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002892:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	60d3      	str	r3, [r2, #12]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	f003 0307 	and.w	r3, r3, #7
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	6039      	str	r1, [r7, #0]
 80028ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	db0a      	blt.n	80028ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	490c      	ldr	r1, [pc, #48]	; (8002910 <__NVIC_SetPriority+0x4c>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	0112      	lsls	r2, r2, #4
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	440b      	add	r3, r1
 80028e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028ec:	e00a      	b.n	8002904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	4908      	ldr	r1, [pc, #32]	; (8002914 <__NVIC_SetPriority+0x50>)
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	3b04      	subs	r3, #4
 80028fc:	0112      	lsls	r2, r2, #4
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	440b      	add	r3, r1
 8002902:	761a      	strb	r2, [r3, #24]
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000e100 	.word	0xe000e100
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002918:	b480      	push	{r7}
 800291a:	b089      	sub	sp, #36	; 0x24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f1c3 0307 	rsb	r3, r3, #7
 8002932:	2b04      	cmp	r3, #4
 8002934:	bf28      	it	cs
 8002936:	2304      	movcs	r3, #4
 8002938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3304      	adds	r3, #4
 800293e:	2b06      	cmp	r3, #6
 8002940:	d902      	bls.n	8002948 <NVIC_EncodePriority+0x30>
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3b03      	subs	r3, #3
 8002946:	e000      	b.n	800294a <NVIC_EncodePriority+0x32>
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800294c:	f04f 32ff 	mov.w	r2, #4294967295
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43da      	mvns	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	401a      	ands	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002960:	f04f 31ff 	mov.w	r1, #4294967295
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	fa01 f303 	lsl.w	r3, r1, r3
 800296a:	43d9      	mvns	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002970:	4313      	orrs	r3, r2
         );
}
 8002972:	4618      	mov	r0, r3
 8002974:	3724      	adds	r7, #36	; 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800298c:	d301      	bcc.n	8002992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800298e:	2301      	movs	r3, #1
 8002990:	e00f      	b.n	80029b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002992:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <SysTick_Config+0x40>)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3b01      	subs	r3, #1
 8002998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800299a:	210f      	movs	r1, #15
 800299c:	f04f 30ff 	mov.w	r0, #4294967295
 80029a0:	f7ff ff90 	bl	80028c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a4:	4b05      	ldr	r3, [pc, #20]	; (80029bc <SysTick_Config+0x40>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029aa:	4b04      	ldr	r3, [pc, #16]	; (80029bc <SysTick_Config+0x40>)
 80029ac:	2207      	movs	r2, #7
 80029ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	e000e010 	.word	0xe000e010

080029c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff ff49 	bl	8002860 <__NVIC_SetPriorityGrouping>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b086      	sub	sp, #24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	4603      	mov	r3, r0
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e8:	f7ff ff5e 	bl	80028a8 <__NVIC_GetPriorityGrouping>
 80029ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	6978      	ldr	r0, [r7, #20]
 80029f4:	f7ff ff90 	bl	8002918 <NVIC_EncodePriority>
 80029f8:	4602      	mov	r2, r0
 80029fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff5f 	bl	80028c4 <__NVIC_SetPriority>
}
 8002a06:	bf00      	nop
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ffb0 	bl	800297c <SysTick_Config>
 8002a1c:	4603      	mov	r3, r0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b08b      	sub	sp, #44	; 0x2c
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a32:	2300      	movs	r3, #0
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a36:	2300      	movs	r3, #0
 8002a38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a3a:	e169      	b.n	8002d10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	f040 8158 	bne.w	8002d0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4a9a      	ldr	r2, [pc, #616]	; (8002cc8 <HAL_GPIO_Init+0x2a0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d05e      	beq.n	8002b22 <HAL_GPIO_Init+0xfa>
 8002a64:	4a98      	ldr	r2, [pc, #608]	; (8002cc8 <HAL_GPIO_Init+0x2a0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d875      	bhi.n	8002b56 <HAL_GPIO_Init+0x12e>
 8002a6a:	4a98      	ldr	r2, [pc, #608]	; (8002ccc <HAL_GPIO_Init+0x2a4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d058      	beq.n	8002b22 <HAL_GPIO_Init+0xfa>
 8002a70:	4a96      	ldr	r2, [pc, #600]	; (8002ccc <HAL_GPIO_Init+0x2a4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d86f      	bhi.n	8002b56 <HAL_GPIO_Init+0x12e>
 8002a76:	4a96      	ldr	r2, [pc, #600]	; (8002cd0 <HAL_GPIO_Init+0x2a8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d052      	beq.n	8002b22 <HAL_GPIO_Init+0xfa>
 8002a7c:	4a94      	ldr	r2, [pc, #592]	; (8002cd0 <HAL_GPIO_Init+0x2a8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d869      	bhi.n	8002b56 <HAL_GPIO_Init+0x12e>
 8002a82:	4a94      	ldr	r2, [pc, #592]	; (8002cd4 <HAL_GPIO_Init+0x2ac>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d04c      	beq.n	8002b22 <HAL_GPIO_Init+0xfa>
 8002a88:	4a92      	ldr	r2, [pc, #584]	; (8002cd4 <HAL_GPIO_Init+0x2ac>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d863      	bhi.n	8002b56 <HAL_GPIO_Init+0x12e>
 8002a8e:	4a92      	ldr	r2, [pc, #584]	; (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d046      	beq.n	8002b22 <HAL_GPIO_Init+0xfa>
 8002a94:	4a90      	ldr	r2, [pc, #576]	; (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d85d      	bhi.n	8002b56 <HAL_GPIO_Init+0x12e>
 8002a9a:	2b12      	cmp	r3, #18
 8002a9c:	d82a      	bhi.n	8002af4 <HAL_GPIO_Init+0xcc>
 8002a9e:	2b12      	cmp	r3, #18
 8002aa0:	d859      	bhi.n	8002b56 <HAL_GPIO_Init+0x12e>
 8002aa2:	a201      	add	r2, pc, #4	; (adr r2, 8002aa8 <HAL_GPIO_Init+0x80>)
 8002aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa8:	08002b23 	.word	0x08002b23
 8002aac:	08002afd 	.word	0x08002afd
 8002ab0:	08002b0f 	.word	0x08002b0f
 8002ab4:	08002b51 	.word	0x08002b51
 8002ab8:	08002b57 	.word	0x08002b57
 8002abc:	08002b57 	.word	0x08002b57
 8002ac0:	08002b57 	.word	0x08002b57
 8002ac4:	08002b57 	.word	0x08002b57
 8002ac8:	08002b57 	.word	0x08002b57
 8002acc:	08002b57 	.word	0x08002b57
 8002ad0:	08002b57 	.word	0x08002b57
 8002ad4:	08002b57 	.word	0x08002b57
 8002ad8:	08002b57 	.word	0x08002b57
 8002adc:	08002b57 	.word	0x08002b57
 8002ae0:	08002b57 	.word	0x08002b57
 8002ae4:	08002b57 	.word	0x08002b57
 8002ae8:	08002b57 	.word	0x08002b57
 8002aec:	08002b05 	.word	0x08002b05
 8002af0:	08002b19 	.word	0x08002b19
 8002af4:	4a79      	ldr	r2, [pc, #484]	; (8002cdc <HAL_GPIO_Init+0x2b4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002afa:	e02c      	b.n	8002b56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	623b      	str	r3, [r7, #32]
          break;
 8002b02:	e029      	b.n	8002b58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	623b      	str	r3, [r7, #32]
          break;
 8002b0c:	e024      	b.n	8002b58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	3308      	adds	r3, #8
 8002b14:	623b      	str	r3, [r7, #32]
          break;
 8002b16:	e01f      	b.n	8002b58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	623b      	str	r3, [r7, #32]
          break;
 8002b20:	e01a      	b.n	8002b58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d102      	bne.n	8002b30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	623b      	str	r3, [r7, #32]
          break;
 8002b2e:	e013      	b.n	8002b58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d105      	bne.n	8002b44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b38:	2308      	movs	r3, #8
 8002b3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	611a      	str	r2, [r3, #16]
          break;
 8002b42:	e009      	b.n	8002b58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b44:	2308      	movs	r3, #8
 8002b46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	615a      	str	r2, [r3, #20]
          break;
 8002b4e:	e003      	b.n	8002b58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b50:	2300      	movs	r3, #0
 8002b52:	623b      	str	r3, [r7, #32]
          break;
 8002b54:	e000      	b.n	8002b58 <HAL_GPIO_Init+0x130>
          break;
 8002b56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2bff      	cmp	r3, #255	; 0xff
 8002b5c:	d801      	bhi.n	8002b62 <HAL_GPIO_Init+0x13a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	e001      	b.n	8002b66 <HAL_GPIO_Init+0x13e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3304      	adds	r3, #4
 8002b66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	2bff      	cmp	r3, #255	; 0xff
 8002b6c:	d802      	bhi.n	8002b74 <HAL_GPIO_Init+0x14c>
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	e002      	b.n	8002b7a <HAL_GPIO_Init+0x152>
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	3b08      	subs	r3, #8
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	210f      	movs	r1, #15
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	6a39      	ldr	r1, [r7, #32]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	431a      	orrs	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80b1 	beq.w	8002d0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ba8:	4b4d      	ldr	r3, [pc, #308]	; (8002ce0 <HAL_GPIO_Init+0x2b8>)
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	4a4c      	ldr	r2, [pc, #304]	; (8002ce0 <HAL_GPIO_Init+0x2b8>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	6193      	str	r3, [r2, #24]
 8002bb4:	4b4a      	ldr	r3, [pc, #296]	; (8002ce0 <HAL_GPIO_Init+0x2b8>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bc0:	4a48      	ldr	r2, [pc, #288]	; (8002ce4 <HAL_GPIO_Init+0x2bc>)
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	3302      	adds	r3, #2
 8002bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	220f      	movs	r2, #15
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4013      	ands	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a40      	ldr	r2, [pc, #256]	; (8002ce8 <HAL_GPIO_Init+0x2c0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d013      	beq.n	8002c14 <HAL_GPIO_Init+0x1ec>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a3f      	ldr	r2, [pc, #252]	; (8002cec <HAL_GPIO_Init+0x2c4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d00d      	beq.n	8002c10 <HAL_GPIO_Init+0x1e8>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a3e      	ldr	r2, [pc, #248]	; (8002cf0 <HAL_GPIO_Init+0x2c8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d007      	beq.n	8002c0c <HAL_GPIO_Init+0x1e4>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a3d      	ldr	r2, [pc, #244]	; (8002cf4 <HAL_GPIO_Init+0x2cc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d101      	bne.n	8002c08 <HAL_GPIO_Init+0x1e0>
 8002c04:	2303      	movs	r3, #3
 8002c06:	e006      	b.n	8002c16 <HAL_GPIO_Init+0x1ee>
 8002c08:	2304      	movs	r3, #4
 8002c0a:	e004      	b.n	8002c16 <HAL_GPIO_Init+0x1ee>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e002      	b.n	8002c16 <HAL_GPIO_Init+0x1ee>
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <HAL_GPIO_Init+0x1ee>
 8002c14:	2300      	movs	r3, #0
 8002c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c18:	f002 0203 	and.w	r2, r2, #3
 8002c1c:	0092      	lsls	r2, r2, #2
 8002c1e:	4093      	lsls	r3, r2
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c26:	492f      	ldr	r1, [pc, #188]	; (8002ce4 <HAL_GPIO_Init+0x2bc>)
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d006      	beq.n	8002c4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c40:	4b2d      	ldr	r3, [pc, #180]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	492c      	ldr	r1, [pc, #176]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	608b      	str	r3, [r1, #8]
 8002c4c:	e006      	b.n	8002c5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c4e:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	4928      	ldr	r1, [pc, #160]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d006      	beq.n	8002c76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c68:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	4922      	ldr	r1, [pc, #136]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60cb      	str	r3, [r1, #12]
 8002c74:	e006      	b.n	8002c84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c76:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	491e      	ldr	r1, [pc, #120]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d006      	beq.n	8002c9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c90:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	4918      	ldr	r1, [pc, #96]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	604b      	str	r3, [r1, #4]
 8002c9c:	e006      	b.n	8002cac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c9e:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	4914      	ldr	r1, [pc, #80]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d021      	beq.n	8002cfc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cb8:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	490e      	ldr	r1, [pc, #56]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	600b      	str	r3, [r1, #0]
 8002cc4:	e021      	b.n	8002d0a <HAL_GPIO_Init+0x2e2>
 8002cc6:	bf00      	nop
 8002cc8:	10320000 	.word	0x10320000
 8002ccc:	10310000 	.word	0x10310000
 8002cd0:	10220000 	.word	0x10220000
 8002cd4:	10210000 	.word	0x10210000
 8002cd8:	10120000 	.word	0x10120000
 8002cdc:	10110000 	.word	0x10110000
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40010000 	.word	0x40010000
 8002ce8:	40010800 	.word	0x40010800
 8002cec:	40010c00 	.word	0x40010c00
 8002cf0:	40011000 	.word	0x40011000
 8002cf4:	40011400 	.word	0x40011400
 8002cf8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	4909      	ldr	r1, [pc, #36]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f47f ae8e 	bne.w	8002a3c <HAL_GPIO_Init+0x14>
  }
}
 8002d20:	bf00      	nop
 8002d22:	bf00      	nop
 8002d24:	372c      	adds	r7, #44	; 0x2c
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr
 8002d2c:	40010400 	.word	0x40010400

08002d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e12b      	b.n	8002f9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fe ff06 	bl	8001b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2224      	movs	r2, #36	; 0x24
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d94:	f001 f95e 	bl	8004054 <HAL_RCC_GetPCLK1Freq>
 8002d98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4a81      	ldr	r2, [pc, #516]	; (8002fa4 <HAL_I2C_Init+0x274>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d807      	bhi.n	8002db4 <HAL_I2C_Init+0x84>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4a80      	ldr	r2, [pc, #512]	; (8002fa8 <HAL_I2C_Init+0x278>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	bf94      	ite	ls
 8002dac:	2301      	movls	r3, #1
 8002dae:	2300      	movhi	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	e006      	b.n	8002dc2 <HAL_I2C_Init+0x92>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a7d      	ldr	r2, [pc, #500]	; (8002fac <HAL_I2C_Init+0x27c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	bf94      	ite	ls
 8002dbc:	2301      	movls	r3, #1
 8002dbe:	2300      	movhi	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e0e7      	b.n	8002f9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4a78      	ldr	r2, [pc, #480]	; (8002fb0 <HAL_I2C_Init+0x280>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	0c9b      	lsrs	r3, r3, #18
 8002dd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4a6a      	ldr	r2, [pc, #424]	; (8002fa4 <HAL_I2C_Init+0x274>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d802      	bhi.n	8002e04 <HAL_I2C_Init+0xd4>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	3301      	adds	r3, #1
 8002e02:	e009      	b.n	8002e18 <HAL_I2C_Init+0xe8>
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e0a:	fb02 f303 	mul.w	r3, r2, r3
 8002e0e:	4a69      	ldr	r2, [pc, #420]	; (8002fb4 <HAL_I2C_Init+0x284>)
 8002e10:	fba2 2303 	umull	r2, r3, r2, r3
 8002e14:	099b      	lsrs	r3, r3, #6
 8002e16:	3301      	adds	r3, #1
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	495c      	ldr	r1, [pc, #368]	; (8002fa4 <HAL_I2C_Init+0x274>)
 8002e34:	428b      	cmp	r3, r1
 8002e36:	d819      	bhi.n	8002e6c <HAL_I2C_Init+0x13c>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1e59      	subs	r1, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e46:	1c59      	adds	r1, r3, #1
 8002e48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e4c:	400b      	ands	r3, r1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_I2C_Init+0x138>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1e59      	subs	r1, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e60:	3301      	adds	r3, #1
 8002e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e66:	e051      	b.n	8002f0c <HAL_I2C_Init+0x1dc>
 8002e68:	2304      	movs	r3, #4
 8002e6a:	e04f      	b.n	8002f0c <HAL_I2C_Init+0x1dc>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d111      	bne.n	8002e98 <HAL_I2C_Init+0x168>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1e58      	subs	r0, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	440b      	add	r3, r1
 8002e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e86:	3301      	adds	r3, #1
 8002e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	bf0c      	ite	eq
 8002e90:	2301      	moveq	r3, #1
 8002e92:	2300      	movne	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	e012      	b.n	8002ebe <HAL_I2C_Init+0x18e>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1e58      	subs	r0, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6859      	ldr	r1, [r3, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	0099      	lsls	r1, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_Init+0x196>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e022      	b.n	8002f0c <HAL_I2C_Init+0x1dc>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10e      	bne.n	8002eec <HAL_I2C_Init+0x1bc>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1e58      	subs	r0, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6859      	ldr	r1, [r3, #4]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	440b      	add	r3, r1
 8002edc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eea:	e00f      	b.n	8002f0c <HAL_I2C_Init+0x1dc>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1e58      	subs	r0, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	0099      	lsls	r1, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f02:	3301      	adds	r3, #1
 8002f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	6809      	ldr	r1, [r1, #0]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6911      	ldr	r1, [r2, #16]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68d2      	ldr	r2, [r2, #12]
 8002f46:	4311      	orrs	r1, r2
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	000186a0 	.word	0x000186a0
 8002fa8:	001e847f 	.word	0x001e847f
 8002fac:	003d08ff 	.word	0x003d08ff
 8002fb0:	431bde83 	.word	0x431bde83
 8002fb4:	10624dd3 	.word	0x10624dd3

08002fb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	607a      	str	r2, [r7, #4]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	817b      	strh	r3, [r7, #10]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fcc:	f7fe ffc2 	bl	8001f54 <HAL_GetTick>
 8002fd0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	f040 80e0 	bne.w	80031a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	2319      	movs	r3, #25
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	4970      	ldr	r1, [pc, #448]	; (80031ac <HAL_I2C_Master_Transmit+0x1f4>)
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fa92 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e0d3      	b.n	80031a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_I2C_Master_Transmit+0x50>
 8003004:	2302      	movs	r3, #2
 8003006:	e0cc      	b.n	80031a2 <HAL_I2C_Master_Transmit+0x1ea>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b01      	cmp	r3, #1
 800301c:	d007      	beq.n	800302e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0201 	orr.w	r2, r2, #1
 800302c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800303c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2221      	movs	r2, #33	; 0x21
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2210      	movs	r2, #16
 800304a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	893a      	ldrh	r2, [r7, #8]
 800305e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4a50      	ldr	r2, [pc, #320]	; (80031b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800306e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003070:	8979      	ldrh	r1, [r7, #10]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	6a3a      	ldr	r2, [r7, #32]
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 f9ca 	bl	8003410 <I2C_MasterRequestWrite>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e08d      	b.n	80031a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800309c:	e066      	b.n	800316c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	6a39      	ldr	r1, [r7, #32]
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 fb50 	bl	8003748 <I2C_WaitOnTXEFlagUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00d      	beq.n	80030ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d107      	bne.n	80030c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e06b      	b.n	80031a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	781a      	ldrb	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b04      	cmp	r3, #4
 8003106:	d11b      	bne.n	8003140 <HAL_I2C_Master_Transmit+0x188>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310c:	2b00      	cmp	r3, #0
 800310e:	d017      	beq.n	8003140 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	781a      	ldrb	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	6a39      	ldr	r1, [r7, #32]
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 fb47 	bl	80037d8 <I2C_WaitOnBTFFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00d      	beq.n	800316c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	2b04      	cmp	r3, #4
 8003156:	d107      	bne.n	8003168 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003166:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e01a      	b.n	80031a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003170:	2b00      	cmp	r3, #0
 8003172:	d194      	bne.n	800309e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003182:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	e000      	b.n	80031a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031a0:	2302      	movs	r3, #2
  }
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	00100002 	.word	0x00100002
 80031b0:	ffff0000 	.word	0xffff0000

080031b4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08a      	sub	sp, #40	; 0x28
 80031b8:	af02      	add	r7, sp, #8
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	607a      	str	r2, [r7, #4]
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	460b      	mov	r3, r1
 80031c2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80031c4:	f7fe fec6 	bl	8001f54 <HAL_GetTick>
 80031c8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b20      	cmp	r3, #32
 80031d8:	f040 8111 	bne.w	80033fe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	2319      	movs	r3, #25
 80031e2:	2201      	movs	r2, #1
 80031e4:	4988      	ldr	r1, [pc, #544]	; (8003408 <HAL_I2C_IsDeviceReady+0x254>)
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f994 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
 80031f4:	e104      	b.n	8003400 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_I2C_IsDeviceReady+0x50>
 8003200:	2302      	movs	r3, #2
 8003202:	e0fd      	b.n	8003400 <HAL_I2C_IsDeviceReady+0x24c>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b01      	cmp	r3, #1
 8003218:	d007      	beq.n	800322a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 0201 	orr.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003238:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2224      	movs	r2, #36	; 0x24
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4a70      	ldr	r2, [pc, #448]	; (800340c <HAL_I2C_IsDeviceReady+0x258>)
 800324c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800325c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2200      	movs	r2, #0
 8003266:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f952 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00d      	beq.n	8003292 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003284:	d103      	bne.n	800328e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800328c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e0b6      	b.n	8003400 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003292:	897b      	ldrh	r3, [r7, #10]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032a0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80032a2:	f7fe fe57 	bl	8001f54 <HAL_GetTick>
 80032a6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	bf0c      	ite	eq
 80032b6:	2301      	moveq	r3, #1
 80032b8:	2300      	movne	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032cc:	bf0c      	ite	eq
 80032ce:	2301      	moveq	r3, #1
 80032d0:	2300      	movne	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032d6:	e025      	b.n	8003324 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032d8:	f7fe fe3c 	bl	8001f54 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d302      	bcc.n	80032ee <HAL_I2C_IsDeviceReady+0x13a>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d103      	bne.n	80032f6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	22a0      	movs	r2, #160	; 0xa0
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b02      	cmp	r3, #2
 8003302:	bf0c      	ite	eq
 8003304:	2301      	moveq	r3, #1
 8003306:	2300      	movne	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331a:	bf0c      	ite	eq
 800331c:	2301      	moveq	r3, #1
 800331e:	2300      	movne	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2ba0      	cmp	r3, #160	; 0xa0
 800332e:	d005      	beq.n	800333c <HAL_I2C_IsDeviceReady+0x188>
 8003330:	7dfb      	ldrb	r3, [r7, #23]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d102      	bne.n	800333c <HAL_I2C_IsDeviceReady+0x188>
 8003336:	7dbb      	ldrb	r3, [r7, #22]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0cd      	beq.n	80032d8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b02      	cmp	r3, #2
 8003350:	d129      	bne.n	80033a6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003360:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	2319      	movs	r3, #25
 800337e:	2201      	movs	r2, #1
 8003380:	4921      	ldr	r1, [pc, #132]	; (8003408 <HAL_I2C_IsDeviceReady+0x254>)
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f8c6 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e036      	b.n	8003400 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e02c      	b.n	8003400 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033be:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	2319      	movs	r3, #25
 80033c6:	2201      	movs	r2, #1
 80033c8:	490f      	ldr	r1, [pc, #60]	; (8003408 <HAL_I2C_IsDeviceReady+0x254>)
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f8a2 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e012      	b.n	8003400 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	3301      	adds	r3, #1
 80033de:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	f4ff af32 	bcc.w	800324e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80033fe:	2302      	movs	r3, #2
  }
}
 8003400:	4618      	mov	r0, r3
 8003402:	3720      	adds	r7, #32
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	00100002 	.word	0x00100002
 800340c:	ffff0000 	.word	0xffff0000

08003410 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af02      	add	r7, sp, #8
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	460b      	mov	r3, r1
 800341e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b08      	cmp	r3, #8
 800342a:	d006      	beq.n	800343a <I2C_MasterRequestWrite+0x2a>
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d003      	beq.n	800343a <I2C_MasterRequestWrite+0x2a>
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003438:	d108      	bne.n	800344c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	e00b      	b.n	8003464 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	2b12      	cmp	r3, #18
 8003452:	d107      	bne.n	8003464 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003462:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f84f 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00d      	beq.n	8003498 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800348a:	d103      	bne.n	8003494 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003492:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e035      	b.n	8003504 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034a0:	d108      	bne.n	80034b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034a2:	897b      	ldrh	r3, [r7, #10]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	461a      	mov	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034b0:	611a      	str	r2, [r3, #16]
 80034b2:	e01b      	b.n	80034ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034b4:	897b      	ldrh	r3, [r7, #10]
 80034b6:	11db      	asrs	r3, r3, #7
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f003 0306 	and.w	r3, r3, #6
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f063 030f 	orn	r3, r3, #15
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	490e      	ldr	r1, [pc, #56]	; (800350c <I2C_MasterRequestWrite+0xfc>)
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f898 	bl	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e010      	b.n	8003504 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034e2:	897b      	ldrh	r3, [r7, #10]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4907      	ldr	r1, [pc, #28]	; (8003510 <I2C_MasterRequestWrite+0x100>)
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f888 	bl	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	00010008 	.word	0x00010008
 8003510:	00010002 	.word	0x00010002

08003514 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003524:	e048      	b.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352c:	d044      	beq.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352e:	f7fe fd11 	bl	8001f54 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d302      	bcc.n	8003544 <I2C_WaitOnFlagUntilTimeout+0x30>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d139      	bne.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	0c1b      	lsrs	r3, r3, #16
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b01      	cmp	r3, #1
 800354c:	d10d      	bne.n	800356a <I2C_WaitOnFlagUntilTimeout+0x56>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	43da      	mvns	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	4013      	ands	r3, r2
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf0c      	ite	eq
 8003560:	2301      	moveq	r3, #1
 8003562:	2300      	movne	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	e00c      	b.n	8003584 <I2C_WaitOnFlagUntilTimeout+0x70>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	43da      	mvns	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	4013      	ands	r3, r2
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf0c      	ite	eq
 800357c:	2301      	moveq	r3, #1
 800357e:	2300      	movne	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	429a      	cmp	r2, r3
 8003588:	d116      	bne.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	f043 0220 	orr.w	r2, r3, #32
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e023      	b.n	8003600 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	0c1b      	lsrs	r3, r3, #16
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d10d      	bne.n	80035de <I2C_WaitOnFlagUntilTimeout+0xca>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	43da      	mvns	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4013      	ands	r3, r2
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	e00c      	b.n	80035f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	43da      	mvns	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4013      	ands	r3, r2
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d093      	beq.n	8003526 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003616:	e071      	b.n	80036fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003626:	d123      	bne.n	8003670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003636:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003640:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	f043 0204 	orr.w	r2, r3, #4
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e067      	b.n	8003740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	d041      	beq.n	80036fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003678:	f7fe fc6c 	bl	8001f54 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	429a      	cmp	r2, r3
 8003686:	d302      	bcc.n	800368e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d136      	bne.n	80036fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	0c1b      	lsrs	r3, r3, #16
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	d10c      	bne.n	80036b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	43da      	mvns	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4013      	ands	r3, r2
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bf14      	ite	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	2300      	moveq	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	e00b      	b.n	80036ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	43da      	mvns	r2, r3
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	4013      	ands	r3, r2
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf14      	ite	ne
 80036c4:	2301      	movne	r3, #1
 80036c6:	2300      	moveq	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d016      	beq.n	80036fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	f043 0220 	orr.w	r2, r3, #32
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e021      	b.n	8003740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	0c1b      	lsrs	r3, r3, #16
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d10c      	bne.n	8003720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	43da      	mvns	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4013      	ands	r3, r2
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf14      	ite	ne
 8003718:	2301      	movne	r3, #1
 800371a:	2300      	moveq	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	e00b      	b.n	8003738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	43da      	mvns	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4013      	ands	r3, r2
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	bf14      	ite	ne
 8003732:	2301      	movne	r3, #1
 8003734:	2300      	moveq	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	f47f af6d 	bne.w	8003618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003754:	e034      	b.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f886 	bl	8003868 <I2C_IsAcknowledgeFailed>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e034      	b.n	80037d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d028      	beq.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376e:	f7fe fbf1 	bl	8001f54 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	429a      	cmp	r2, r3
 800377c:	d302      	bcc.n	8003784 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d11d      	bne.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378e:	2b80      	cmp	r3, #128	; 0x80
 8003790:	d016      	beq.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e007      	b.n	80037d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ca:	2b80      	cmp	r3, #128	; 0x80
 80037cc:	d1c3      	bne.n	8003756 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037e4:	e034      	b.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f83e 	bl	8003868 <I2C_IsAcknowledgeFailed>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e034      	b.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fc:	d028      	beq.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fe:	f7fe fba9 	bl	8001f54 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	429a      	cmp	r2, r3
 800380c:	d302      	bcc.n	8003814 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d11d      	bne.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	2b04      	cmp	r3, #4
 8003820:	d016      	beq.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	f043 0220 	orr.w	r2, r3, #32
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e007      	b.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b04      	cmp	r3, #4
 800385c:	d1c3      	bne.n	80037e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387e:	d11b      	bne.n	80038b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003888:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	f043 0204 	orr.w	r2, r3, #4
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e26c      	b.n	8003db0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 8087 	beq.w	80039f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038e4:	4b92      	ldr	r3, [pc, #584]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 030c 	and.w	r3, r3, #12
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d00c      	beq.n	800390a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038f0:	4b8f      	ldr	r3, [pc, #572]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 030c 	and.w	r3, r3, #12
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d112      	bne.n	8003922 <HAL_RCC_OscConfig+0x5e>
 80038fc:	4b8c      	ldr	r3, [pc, #560]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003908:	d10b      	bne.n	8003922 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390a:	4b89      	ldr	r3, [pc, #548]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d06c      	beq.n	80039f0 <HAL_RCC_OscConfig+0x12c>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d168      	bne.n	80039f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e246      	b.n	8003db0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800392a:	d106      	bne.n	800393a <HAL_RCC_OscConfig+0x76>
 800392c:	4b80      	ldr	r3, [pc, #512]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a7f      	ldr	r2, [pc, #508]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	e02e      	b.n	8003998 <HAL_RCC_OscConfig+0xd4>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10c      	bne.n	800395c <HAL_RCC_OscConfig+0x98>
 8003942:	4b7b      	ldr	r3, [pc, #492]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a7a      	ldr	r2, [pc, #488]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	4b78      	ldr	r3, [pc, #480]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a77      	ldr	r2, [pc, #476]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003954:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e01d      	b.n	8003998 <HAL_RCC_OscConfig+0xd4>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003964:	d10c      	bne.n	8003980 <HAL_RCC_OscConfig+0xbc>
 8003966:	4b72      	ldr	r3, [pc, #456]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a71      	ldr	r2, [pc, #452]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 800396c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	4b6f      	ldr	r3, [pc, #444]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a6e      	ldr	r2, [pc, #440]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	e00b      	b.n	8003998 <HAL_RCC_OscConfig+0xd4>
 8003980:	4b6b      	ldr	r3, [pc, #428]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a6a      	ldr	r2, [pc, #424]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	4b68      	ldr	r3, [pc, #416]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a67      	ldr	r2, [pc, #412]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003996:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d013      	beq.n	80039c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a0:	f7fe fad8 	bl	8001f54 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a8:	f7fe fad4 	bl	8001f54 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	; 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e1fa      	b.n	8003db0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ba:	4b5d      	ldr	r3, [pc, #372]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0xe4>
 80039c6:	e014      	b.n	80039f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c8:	f7fe fac4 	bl	8001f54 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d0:	f7fe fac0 	bl	8001f54 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b64      	cmp	r3, #100	; 0x64
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e1e6      	b.n	8003db0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e2:	4b53      	ldr	r3, [pc, #332]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f0      	bne.n	80039d0 <HAL_RCC_OscConfig+0x10c>
 80039ee:	e000      	b.n	80039f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d063      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039fe:	4b4c      	ldr	r3, [pc, #304]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00b      	beq.n	8003a22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a0a:	4b49      	ldr	r3, [pc, #292]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d11c      	bne.n	8003a50 <HAL_RCC_OscConfig+0x18c>
 8003a16:	4b46      	ldr	r3, [pc, #280]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d116      	bne.n	8003a50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a22:	4b43      	ldr	r3, [pc, #268]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d005      	beq.n	8003a3a <HAL_RCC_OscConfig+0x176>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d001      	beq.n	8003a3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e1ba      	b.n	8003db0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3a:	4b3d      	ldr	r3, [pc, #244]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4939      	ldr	r1, [pc, #228]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a4e:	e03a      	b.n	8003ac6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d020      	beq.n	8003a9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a58:	4b36      	ldr	r3, [pc, #216]	; (8003b34 <HAL_RCC_OscConfig+0x270>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5e:	f7fe fa79 	bl	8001f54 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a66:	f7fe fa75 	bl	8001f54 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e19b      	b.n	8003db0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a78:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0f0      	beq.n	8003a66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a84:	4b2a      	ldr	r3, [pc, #168]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4927      	ldr	r1, [pc, #156]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	600b      	str	r3, [r1, #0]
 8003a98:	e015      	b.n	8003ac6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a9a:	4b26      	ldr	r3, [pc, #152]	; (8003b34 <HAL_RCC_OscConfig+0x270>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa0:	f7fe fa58 	bl	8001f54 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa8:	f7fe fa54 	bl	8001f54 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e17a      	b.n	8003db0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aba:	4b1d      	ldr	r3, [pc, #116]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d03a      	beq.n	8003b48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d019      	beq.n	8003b0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ada:	4b17      	ldr	r3, [pc, #92]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003adc:	2201      	movs	r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae0:	f7fe fa38 	bl	8001f54 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae8:	f7fe fa34 	bl	8001f54 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e15a      	b.n	8003db0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afa:	4b0d      	ldr	r3, [pc, #52]	; (8003b30 <HAL_RCC_OscConfig+0x26c>)
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b06:	2001      	movs	r0, #1
 8003b08:	f000 facc 	bl	80040a4 <RCC_Delay>
 8003b0c:	e01c      	b.n	8003b48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b0e:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b14:	f7fe fa1e 	bl	8001f54 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b1a:	e00f      	b.n	8003b3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b1c:	f7fe fa1a 	bl	8001f54 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d908      	bls.n	8003b3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e140      	b.n	8003db0 <HAL_RCC_OscConfig+0x4ec>
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000
 8003b34:	42420000 	.word	0x42420000
 8003b38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b3c:	4b9e      	ldr	r3, [pc, #632]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e9      	bne.n	8003b1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 80a6 	beq.w	8003ca2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b56:	2300      	movs	r3, #0
 8003b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5a:	4b97      	ldr	r3, [pc, #604]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10d      	bne.n	8003b82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b66:	4b94      	ldr	r3, [pc, #592]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	4a93      	ldr	r2, [pc, #588]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b70:	61d3      	str	r3, [r2, #28]
 8003b72:	4b91      	ldr	r3, [pc, #580]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b82:	4b8e      	ldr	r3, [pc, #568]	; (8003dbc <HAL_RCC_OscConfig+0x4f8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d118      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b8e:	4b8b      	ldr	r3, [pc, #556]	; (8003dbc <HAL_RCC_OscConfig+0x4f8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a8a      	ldr	r2, [pc, #552]	; (8003dbc <HAL_RCC_OscConfig+0x4f8>)
 8003b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9a:	f7fe f9db 	bl	8001f54 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba2:	f7fe f9d7 	bl	8001f54 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b64      	cmp	r3, #100	; 0x64
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e0fd      	b.n	8003db0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	4b81      	ldr	r3, [pc, #516]	; (8003dbc <HAL_RCC_OscConfig+0x4f8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d106      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x312>
 8003bc8:	4b7b      	ldr	r3, [pc, #492]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	4a7a      	ldr	r2, [pc, #488]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	6213      	str	r3, [r2, #32]
 8003bd4:	e02d      	b.n	8003c32 <HAL_RCC_OscConfig+0x36e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x334>
 8003bde:	4b76      	ldr	r3, [pc, #472]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	4a75      	ldr	r2, [pc, #468]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003be4:	f023 0301 	bic.w	r3, r3, #1
 8003be8:	6213      	str	r3, [r2, #32]
 8003bea:	4b73      	ldr	r3, [pc, #460]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	4a72      	ldr	r2, [pc, #456]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003bf0:	f023 0304 	bic.w	r3, r3, #4
 8003bf4:	6213      	str	r3, [r2, #32]
 8003bf6:	e01c      	b.n	8003c32 <HAL_RCC_OscConfig+0x36e>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	2b05      	cmp	r3, #5
 8003bfe:	d10c      	bne.n	8003c1a <HAL_RCC_OscConfig+0x356>
 8003c00:	4b6d      	ldr	r3, [pc, #436]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	4a6c      	ldr	r2, [pc, #432]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003c06:	f043 0304 	orr.w	r3, r3, #4
 8003c0a:	6213      	str	r3, [r2, #32]
 8003c0c:	4b6a      	ldr	r3, [pc, #424]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	4a69      	ldr	r2, [pc, #420]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	6213      	str	r3, [r2, #32]
 8003c18:	e00b      	b.n	8003c32 <HAL_RCC_OscConfig+0x36e>
 8003c1a:	4b67      	ldr	r3, [pc, #412]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	4a66      	ldr	r2, [pc, #408]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003c20:	f023 0301 	bic.w	r3, r3, #1
 8003c24:	6213      	str	r3, [r2, #32]
 8003c26:	4b64      	ldr	r3, [pc, #400]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	4a63      	ldr	r2, [pc, #396]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003c2c:	f023 0304 	bic.w	r3, r3, #4
 8003c30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d015      	beq.n	8003c66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c3a:	f7fe f98b 	bl	8001f54 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c40:	e00a      	b.n	8003c58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c42:	f7fe f987 	bl	8001f54 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e0ab      	b.n	8003db0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c58:	4b57      	ldr	r3, [pc, #348]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0ee      	beq.n	8003c42 <HAL_RCC_OscConfig+0x37e>
 8003c64:	e014      	b.n	8003c90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c66:	f7fe f975 	bl	8001f54 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c6c:	e00a      	b.n	8003c84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6e:	f7fe f971 	bl	8001f54 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e095      	b.n	8003db0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c84:	4b4c      	ldr	r3, [pc, #304]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1ee      	bne.n	8003c6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d105      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c96:	4b48      	ldr	r3, [pc, #288]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	4a47      	ldr	r2, [pc, #284]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 8081 	beq.w	8003dae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cac:	4b42      	ldr	r3, [pc, #264]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d061      	beq.n	8003d7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d146      	bne.n	8003d4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc0:	4b3f      	ldr	r3, [pc, #252]	; (8003dc0 <HAL_RCC_OscConfig+0x4fc>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc6:	f7fe f945 	bl	8001f54 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cce:	f7fe f941 	bl	8001f54 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e067      	b.n	8003db0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce0:	4b35      	ldr	r3, [pc, #212]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f0      	bne.n	8003cce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf4:	d108      	bne.n	8003d08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cf6:	4b30      	ldr	r3, [pc, #192]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	492d      	ldr	r1, [pc, #180]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d08:	4b2b      	ldr	r3, [pc, #172]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a19      	ldr	r1, [r3, #32]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	4927      	ldr	r1, [pc, #156]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d20:	4b27      	ldr	r3, [pc, #156]	; (8003dc0 <HAL_RCC_OscConfig+0x4fc>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d26:	f7fe f915 	bl	8001f54 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2e:	f7fe f911 	bl	8001f54 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e037      	b.n	8003db0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d40:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCC_OscConfig+0x46a>
 8003d4c:	e02f      	b.n	8003dae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4e:	4b1c      	ldr	r3, [pc, #112]	; (8003dc0 <HAL_RCC_OscConfig+0x4fc>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d54:	f7fe f8fe 	bl	8001f54 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d5c:	f7fe f8fa 	bl	8001f54 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e020      	b.n	8003db0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d6e:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x498>
 8003d7a:	e018      	b.n	8003dae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e013      	b.n	8003db0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d88:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_RCC_OscConfig+0x4f4>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d106      	bne.n	8003daa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d001      	beq.n	8003dae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	40007000 	.word	0x40007000
 8003dc0:	42420060 	.word	0x42420060

08003dc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0d0      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd8:	4b6a      	ldr	r3, [pc, #424]	; (8003f84 <HAL_RCC_ClockConfig+0x1c0>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d910      	bls.n	8003e08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de6:	4b67      	ldr	r3, [pc, #412]	; (8003f84 <HAL_RCC_ClockConfig+0x1c0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 0207 	bic.w	r2, r3, #7
 8003dee:	4965      	ldr	r1, [pc, #404]	; (8003f84 <HAL_RCC_ClockConfig+0x1c0>)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df6:	4b63      	ldr	r3, [pc, #396]	; (8003f84 <HAL_RCC_ClockConfig+0x1c0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d001      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0b8      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d020      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e20:	4b59      	ldr	r3, [pc, #356]	; (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4a58      	ldr	r2, [pc, #352]	; (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e38:	4b53      	ldr	r3, [pc, #332]	; (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	4a52      	ldr	r2, [pc, #328]	; (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e44:	4b50      	ldr	r3, [pc, #320]	; (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	494d      	ldr	r1, [pc, #308]	; (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d040      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d107      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6a:	4b47      	ldr	r3, [pc, #284]	; (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d115      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e07f      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d107      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e82:	4b41      	ldr	r3, [pc, #260]	; (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d109      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e073      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e92:	4b3d      	ldr	r3, [pc, #244]	; (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e06b      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ea2:	4b39      	ldr	r3, [pc, #228]	; (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f023 0203 	bic.w	r2, r3, #3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	4936      	ldr	r1, [pc, #216]	; (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eb4:	f7fe f84e 	bl	8001f54 <HAL_GetTick>
 8003eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eba:	e00a      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ebc:	f7fe f84a 	bl	8001f54 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e053      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed2:	4b2d      	ldr	r3, [pc, #180]	; (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 020c 	and.w	r2, r3, #12
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d1eb      	bne.n	8003ebc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ee4:	4b27      	ldr	r3, [pc, #156]	; (8003f84 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d210      	bcs.n	8003f14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef2:	4b24      	ldr	r3, [pc, #144]	; (8003f84 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f023 0207 	bic.w	r2, r3, #7
 8003efa:	4922      	ldr	r1, [pc, #136]	; (8003f84 <HAL_RCC_ClockConfig+0x1c0>)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f02:	4b20      	ldr	r3, [pc, #128]	; (8003f84 <HAL_RCC_ClockConfig+0x1c0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e032      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f20:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4916      	ldr	r1, [pc, #88]	; (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d009      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f3e:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	490e      	ldr	r1, [pc, #56]	; (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f52:	f000 f821 	bl	8003f98 <HAL_RCC_GetSysClockFreq>
 8003f56:	4602      	mov	r2, r0
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	490a      	ldr	r1, [pc, #40]	; (8003f8c <HAL_RCC_ClockConfig+0x1c8>)
 8003f64:	5ccb      	ldrb	r3, [r1, r3]
 8003f66:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6a:	4a09      	ldr	r2, [pc, #36]	; (8003f90 <HAL_RCC_ClockConfig+0x1cc>)
 8003f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f6e:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <HAL_RCC_ClockConfig+0x1d0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fd ffac 	bl	8001ed0 <HAL_InitTick>

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40022000 	.word	0x40022000
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	08008ab8 	.word	0x08008ab8
 8003f90:	20000010 	.word	0x20000010
 8003f94:	20000014 	.word	0x20000014

08003f98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	2300      	movs	r3, #0
 8003fac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fb2:	4b1e      	ldr	r3, [pc, #120]	; (800402c <HAL_RCC_GetSysClockFreq+0x94>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d002      	beq.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x30>
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d003      	beq.n	8003fce <HAL_RCC_GetSysClockFreq+0x36>
 8003fc6:	e027      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fc8:	4b19      	ldr	r3, [pc, #100]	; (8004030 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fca:	613b      	str	r3, [r7, #16]
      break;
 8003fcc:	e027      	b.n	800401e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	0c9b      	lsrs	r3, r3, #18
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	4a17      	ldr	r2, [pc, #92]	; (8004034 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fd8:	5cd3      	ldrb	r3, [r2, r3]
 8003fda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d010      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fe6:	4b11      	ldr	r3, [pc, #68]	; (800402c <HAL_RCC_GetSysClockFreq+0x94>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	0c5b      	lsrs	r3, r3, #17
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	4a11      	ldr	r2, [pc, #68]	; (8004038 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ff2:	5cd3      	ldrb	r3, [r2, r3]
 8003ff4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a0d      	ldr	r2, [pc, #52]	; (8004030 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ffa:	fb02 f203 	mul.w	r2, r2, r3
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	e004      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a0c      	ldr	r2, [pc, #48]	; (800403c <HAL_RCC_GetSysClockFreq+0xa4>)
 800400c:	fb02 f303 	mul.w	r3, r2, r3
 8004010:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	613b      	str	r3, [r7, #16]
      break;
 8004016:	e002      	b.n	800401e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004018:	4b05      	ldr	r3, [pc, #20]	; (8004030 <HAL_RCC_GetSysClockFreq+0x98>)
 800401a:	613b      	str	r3, [r7, #16]
      break;
 800401c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800401e:	693b      	ldr	r3, [r7, #16]
}
 8004020:	4618      	mov	r0, r3
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40021000 	.word	0x40021000
 8004030:	007a1200 	.word	0x007a1200
 8004034:	08008ad0 	.word	0x08008ad0
 8004038:	08008ae0 	.word	0x08008ae0
 800403c:	003d0900 	.word	0x003d0900

08004040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004044:	4b02      	ldr	r3, [pc, #8]	; (8004050 <HAL_RCC_GetHCLKFreq+0x10>)
 8004046:	681b      	ldr	r3, [r3, #0]
}
 8004048:	4618      	mov	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr
 8004050:	20000010 	.word	0x20000010

08004054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004058:	f7ff fff2 	bl	8004040 <HAL_RCC_GetHCLKFreq>
 800405c:	4602      	mov	r2, r0
 800405e:	4b05      	ldr	r3, [pc, #20]	; (8004074 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	0a1b      	lsrs	r3, r3, #8
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	4903      	ldr	r1, [pc, #12]	; (8004078 <HAL_RCC_GetPCLK1Freq+0x24>)
 800406a:	5ccb      	ldrb	r3, [r1, r3]
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004070:	4618      	mov	r0, r3
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40021000 	.word	0x40021000
 8004078:	08008ac8 	.word	0x08008ac8

0800407c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004080:	f7ff ffde 	bl	8004040 <HAL_RCC_GetHCLKFreq>
 8004084:	4602      	mov	r2, r0
 8004086:	4b05      	ldr	r3, [pc, #20]	; (800409c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	0adb      	lsrs	r3, r3, #11
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	4903      	ldr	r1, [pc, #12]	; (80040a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004092:	5ccb      	ldrb	r3, [r1, r3]
 8004094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004098:	4618      	mov	r0, r3
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40021000 	.word	0x40021000
 80040a0:	08008ac8 	.word	0x08008ac8

080040a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040ac:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <RCC_Delay+0x34>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <RCC_Delay+0x38>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	0a5b      	lsrs	r3, r3, #9
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	fb02 f303 	mul.w	r3, r2, r3
 80040be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040c0:	bf00      	nop
  }
  while (Delay --);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1e5a      	subs	r2, r3, #1
 80040c6:	60fa      	str	r2, [r7, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1f9      	bne.n	80040c0 <RCC_Delay+0x1c>
}
 80040cc:	bf00      	nop
 80040ce:	bf00      	nop
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr
 80040d8:	20000010 	.word	0x20000010
 80040dc:	10624dd3 	.word	0x10624dd3

080040e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	613b      	str	r3, [r7, #16]
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d07d      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80040fc:	2300      	movs	r3, #0
 80040fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004100:	4b4f      	ldr	r3, [pc, #316]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10d      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800410c:	4b4c      	ldr	r3, [pc, #304]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	4a4b      	ldr	r2, [pc, #300]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004116:	61d3      	str	r3, [r2, #28]
 8004118:	4b49      	ldr	r3, [pc, #292]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004120:	60bb      	str	r3, [r7, #8]
 8004122:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004124:	2301      	movs	r3, #1
 8004126:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004128:	4b46      	ldr	r3, [pc, #280]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004130:	2b00      	cmp	r3, #0
 8004132:	d118      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004134:	4b43      	ldr	r3, [pc, #268]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a42      	ldr	r2, [pc, #264]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800413a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004140:	f7fd ff08 	bl	8001f54 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004146:	e008      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004148:	f7fd ff04 	bl	8001f54 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b64      	cmp	r3, #100	; 0x64
 8004154:	d901      	bls.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e06d      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415a:	4b3a      	ldr	r3, [pc, #232]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0f0      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004166:	4b36      	ldr	r3, [pc, #216]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d02e      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	429a      	cmp	r2, r3
 8004182:	d027      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004184:	4b2e      	ldr	r3, [pc, #184]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800418e:	4b2e      	ldr	r3, [pc, #184]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004190:	2201      	movs	r2, #1
 8004192:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004194:	4b2c      	ldr	r3, [pc, #176]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800419a:	4a29      	ldr	r2, [pc, #164]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d014      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041aa:	f7fd fed3 	bl	8001f54 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b0:	e00a      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b2:	f7fd fecf 	bl	8001f54 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e036      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c8:	4b1d      	ldr	r3, [pc, #116]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0ee      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041d4:	4b1a      	ldr	r3, [pc, #104]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	4917      	ldr	r1, [pc, #92]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041e6:	7dfb      	ldrb	r3, [r7, #23]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d105      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ec:	4b14      	ldr	r3, [pc, #80]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	4a13      	ldr	r2, [pc, #76]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004204:	4b0e      	ldr	r3, [pc, #56]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	490b      	ldr	r1, [pc, #44]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004212:	4313      	orrs	r3, r2
 8004214:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004222:	4b07      	ldr	r3, [pc, #28]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	4904      	ldr	r1, [pc, #16]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004230:	4313      	orrs	r3, r2
 8004232:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40021000 	.word	0x40021000
 8004244:	40007000 	.word	0x40007000
 8004248:	42420440 	.word	0x42420440

0800424c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	2300      	movs	r3, #0
 800425a:	61fb      	str	r3, [r7, #28]
 800425c:	2300      	movs	r3, #0
 800425e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	2300      	movs	r3, #0
 8004266:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b10      	cmp	r3, #16
 800426c:	d00a      	beq.n	8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b10      	cmp	r3, #16
 8004272:	f200 808a 	bhi.w	800438a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d045      	beq.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d075      	beq.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004282:	e082      	b.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004284:	4b46      	ldr	r3, [pc, #280]	; (80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800428a:	4b45      	ldr	r3, [pc, #276]	; (80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d07b      	beq.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	0c9b      	lsrs	r3, r3, #18
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	4a41      	ldr	r2, [pc, #260]	; (80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80042a0:	5cd3      	ldrb	r3, [r2, r3]
 80042a2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d015      	beq.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042ae:	4b3c      	ldr	r3, [pc, #240]	; (80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	0c5b      	lsrs	r3, r3, #17
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	4a3b      	ldr	r2, [pc, #236]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80042ba:	5cd3      	ldrb	r3, [r2, r3]
 80042bc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00d      	beq.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80042c8:	4a38      	ldr	r2, [pc, #224]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	fb02 f303 	mul.w	r3, r2, r3
 80042d6:	61fb      	str	r3, [r7, #28]
 80042d8:	e004      	b.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	4a34      	ldr	r2, [pc, #208]	; (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80042de:	fb02 f303 	mul.w	r3, r2, r3
 80042e2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80042e4:	4b2e      	ldr	r3, [pc, #184]	; (80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042f0:	d102      	bne.n	80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	61bb      	str	r3, [r7, #24]
      break;
 80042f6:	e04a      	b.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	4a2d      	ldr	r2, [pc, #180]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	085b      	lsrs	r3, r3, #1
 8004304:	61bb      	str	r3, [r7, #24]
      break;
 8004306:	e042      	b.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004308:	4b25      	ldr	r3, [pc, #148]	; (80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004318:	d108      	bne.n	800432c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004328:	61bb      	str	r3, [r7, #24]
 800432a:	e01f      	b.n	800436c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004336:	d109      	bne.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004338:	4b19      	ldr	r3, [pc, #100]	; (80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004344:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	e00f      	b.n	800436c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004356:	d11c      	bne.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004358:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d016      	beq.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004364:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004368:	61bb      	str	r3, [r7, #24]
      break;
 800436a:	e012      	b.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800436c:	e011      	b.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800436e:	f7ff fe85 	bl	800407c <HAL_RCC_GetPCLK2Freq>
 8004372:	4602      	mov	r2, r0
 8004374:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	0b9b      	lsrs	r3, r3, #14
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	3301      	adds	r3, #1
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	61bb      	str	r3, [r7, #24]
      break;
 8004388:	e004      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800438a:	bf00      	nop
 800438c:	e002      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800438e:	bf00      	nop
 8004390:	e000      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004392:	bf00      	nop
    }
  }
  return (frequency);
 8004394:	69bb      	ldr	r3, [r7, #24]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3720      	adds	r7, #32
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000
 80043a4:	08008ae4 	.word	0x08008ae4
 80043a8:	08008af4 	.word	0x08008af4
 80043ac:	007a1200 	.word	0x007a1200
 80043b0:	003d0900 	.word	0x003d0900
 80043b4:	aaaaaaab 	.word	0xaaaaaaab

080043b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e042      	b.n	8004450 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fd fc00 	bl	8001be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2224      	movs	r2, #36	; 0x24
 80043e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f971 	bl	80046e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004410:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695a      	ldr	r2, [r3, #20]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004420:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004430:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08a      	sub	sp, #40	; 0x28
 800445c:	af02      	add	r7, sp, #8
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	4613      	mov	r3, r2
 8004466:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b20      	cmp	r3, #32
 8004476:	d175      	bne.n	8004564 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_UART_Transmit+0x2c>
 800447e:	88fb      	ldrh	r3, [r7, #6]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e06e      	b.n	8004566 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2221      	movs	r2, #33	; 0x21
 8004492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004496:	f7fd fd5d 	bl	8001f54 <HAL_GetTick>
 800449a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	88fa      	ldrh	r2, [r7, #6]
 80044a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	88fa      	ldrh	r2, [r7, #6]
 80044a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b0:	d108      	bne.n	80044c4 <HAL_UART_Transmit+0x6c>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d104      	bne.n	80044c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	61bb      	str	r3, [r7, #24]
 80044c2:	e003      	b.n	80044cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044cc:	e02e      	b.n	800452c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2200      	movs	r2, #0
 80044d6:	2180      	movs	r1, #128	; 0x80
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 f848 	bl	800456e <UART_WaitOnFlagUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d005      	beq.n	80044f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e03a      	b.n	8004566 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10b      	bne.n	800450e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004504:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	3302      	adds	r3, #2
 800450a:	61bb      	str	r3, [r7, #24]
 800450c:	e007      	b.n	800451e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	781a      	ldrb	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	3301      	adds	r3, #1
 800451c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004522:	b29b      	uxth	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1cb      	bne.n	80044ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2200      	movs	r2, #0
 800453e:	2140      	movs	r1, #64	; 0x40
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f814 	bl	800456e <UART_WaitOnFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e006      	b.n	8004566 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	e000      	b.n	8004566 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004564:	2302      	movs	r3, #2
  }
}
 8004566:	4618      	mov	r0, r3
 8004568:	3720      	adds	r7, #32
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b086      	sub	sp, #24
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	603b      	str	r3, [r7, #0]
 800457a:	4613      	mov	r3, r2
 800457c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800457e:	e03b      	b.n	80045f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004586:	d037      	beq.n	80045f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004588:	f7fd fce4 	bl	8001f54 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	6a3a      	ldr	r2, [r7, #32]
 8004594:	429a      	cmp	r2, r3
 8004596:	d302      	bcc.n	800459e <UART_WaitOnFlagUntilTimeout+0x30>
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e03a      	b.n	8004618 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d023      	beq.n	80045f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b80      	cmp	r3, #128	; 0x80
 80045b4:	d020      	beq.n	80045f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b40      	cmp	r3, #64	; 0x40
 80045ba:	d01d      	beq.n	80045f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b08      	cmp	r3, #8
 80045c8:	d116      	bne.n	80045f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 f81d 	bl	8004620 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2208      	movs	r2, #8
 80045ea:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e00f      	b.n	8004618 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4013      	ands	r3, r2
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	429a      	cmp	r2, r3
 8004606:	bf0c      	ite	eq
 8004608:	2301      	moveq	r3, #1
 800460a:	2300      	movne	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	461a      	mov	r2, r3
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	429a      	cmp	r2, r3
 8004614:	d0b4      	beq.n	8004580 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004620:	b480      	push	{r7}
 8004622:	b095      	sub	sp, #84	; 0x54
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	330c      	adds	r3, #12
 800462e:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004632:	e853 3f00 	ldrex	r3, [r3]
 8004636:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800463e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	330c      	adds	r3, #12
 8004646:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004648:	643a      	str	r2, [r7, #64]	; 0x40
 800464a:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800464e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e5      	bne.n	8004628 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3314      	adds	r3, #20
 8004662:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	e853 3f00 	ldrex	r3, [r3]
 800466a:	61fb      	str	r3, [r7, #28]
   return(result);
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	f023 0301 	bic.w	r3, r3, #1
 8004672:	64bb      	str	r3, [r7, #72]	; 0x48
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3314      	adds	r3, #20
 800467a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800467c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800467e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004680:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004684:	e841 2300 	strex	r3, r2, [r1]
 8004688:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1e5      	bne.n	800465c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	2b01      	cmp	r3, #1
 8004696:	d119      	bne.n	80046cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	330c      	adds	r3, #12
 800469e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	e853 3f00 	ldrex	r3, [r3]
 80046a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f023 0310 	bic.w	r3, r3, #16
 80046ae:	647b      	str	r3, [r7, #68]	; 0x44
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	330c      	adds	r3, #12
 80046b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046b8:	61ba      	str	r2, [r7, #24]
 80046ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046bc:	6979      	ldr	r1, [r7, #20]
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	e841 2300 	strex	r3, r2, [r1]
 80046c4:	613b      	str	r3, [r7, #16]
   return(result);
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1e5      	bne.n	8004698 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80046da:	bf00      	nop
 80046dc:	3754      	adds	r7, #84	; 0x54
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr

080046e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800471e:	f023 030c 	bic.w	r3, r3, #12
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	68b9      	ldr	r1, [r7, #8]
 8004728:	430b      	orrs	r3, r1
 800472a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a2c      	ldr	r2, [pc, #176]	; (80047f8 <UART_SetConfig+0x114>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d103      	bne.n	8004754 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800474c:	f7ff fc96 	bl	800407c <HAL_RCC_GetPCLK2Freq>
 8004750:	60f8      	str	r0, [r7, #12]
 8004752:	e002      	b.n	800475a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004754:	f7ff fc7e 	bl	8004054 <HAL_RCC_GetPCLK1Freq>
 8004758:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	009a      	lsls	r2, r3, #2
 8004764:	441a      	add	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004770:	4a22      	ldr	r2, [pc, #136]	; (80047fc <UART_SetConfig+0x118>)
 8004772:	fba2 2303 	umull	r2, r3, r2, r3
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	0119      	lsls	r1, r3, #4
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	009a      	lsls	r2, r3, #2
 8004784:	441a      	add	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004790:	4b1a      	ldr	r3, [pc, #104]	; (80047fc <UART_SetConfig+0x118>)
 8004792:	fba3 0302 	umull	r0, r3, r3, r2
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	2064      	movs	r0, #100	; 0x64
 800479a:	fb00 f303 	mul.w	r3, r0, r3
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	3332      	adds	r3, #50	; 0x32
 80047a4:	4a15      	ldr	r2, [pc, #84]	; (80047fc <UART_SetConfig+0x118>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047b0:	4419      	add	r1, r3
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	009a      	lsls	r2, r3, #2
 80047bc:	441a      	add	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047c8:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <UART_SetConfig+0x118>)
 80047ca:	fba3 0302 	umull	r0, r3, r3, r2
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	2064      	movs	r0, #100	; 0x64
 80047d2:	fb00 f303 	mul.w	r3, r0, r3
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	3332      	adds	r3, #50	; 0x32
 80047dc:	4a07      	ldr	r2, [pc, #28]	; (80047fc <UART_SetConfig+0x118>)
 80047de:	fba2 2303 	umull	r2, r3, r2, r3
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	f003 020f 	and.w	r2, r3, #15
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	440a      	add	r2, r1
 80047ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80047f0:	bf00      	nop
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40013800 	.word	0x40013800
 80047fc:	51eb851f 	.word	0x51eb851f

08004800 <__errno>:
 8004800:	4b01      	ldr	r3, [pc, #4]	; (8004808 <__errno+0x8>)
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	2000001c 	.word	0x2000001c

0800480c <__libc_init_array>:
 800480c:	b570      	push	{r4, r5, r6, lr}
 800480e:	2600      	movs	r6, #0
 8004810:	4d0c      	ldr	r5, [pc, #48]	; (8004844 <__libc_init_array+0x38>)
 8004812:	4c0d      	ldr	r4, [pc, #52]	; (8004848 <__libc_init_array+0x3c>)
 8004814:	1b64      	subs	r4, r4, r5
 8004816:	10a4      	asrs	r4, r4, #2
 8004818:	42a6      	cmp	r6, r4
 800481a:	d109      	bne.n	8004830 <__libc_init_array+0x24>
 800481c:	f002 feba 	bl	8007594 <_init>
 8004820:	2600      	movs	r6, #0
 8004822:	4d0a      	ldr	r5, [pc, #40]	; (800484c <__libc_init_array+0x40>)
 8004824:	4c0a      	ldr	r4, [pc, #40]	; (8004850 <__libc_init_array+0x44>)
 8004826:	1b64      	subs	r4, r4, r5
 8004828:	10a4      	asrs	r4, r4, #2
 800482a:	42a6      	cmp	r6, r4
 800482c:	d105      	bne.n	800483a <__libc_init_array+0x2e>
 800482e:	bd70      	pop	{r4, r5, r6, pc}
 8004830:	f855 3b04 	ldr.w	r3, [r5], #4
 8004834:	4798      	blx	r3
 8004836:	3601      	adds	r6, #1
 8004838:	e7ee      	b.n	8004818 <__libc_init_array+0xc>
 800483a:	f855 3b04 	ldr.w	r3, [r5], #4
 800483e:	4798      	blx	r3
 8004840:	3601      	adds	r6, #1
 8004842:	e7f2      	b.n	800482a <__libc_init_array+0x1e>
 8004844:	08008edc 	.word	0x08008edc
 8004848:	08008edc 	.word	0x08008edc
 800484c:	08008edc 	.word	0x08008edc
 8004850:	08008ee0 	.word	0x08008ee0

08004854 <memset>:
 8004854:	4603      	mov	r3, r0
 8004856:	4402      	add	r2, r0
 8004858:	4293      	cmp	r3, r2
 800485a:	d100      	bne.n	800485e <memset+0xa>
 800485c:	4770      	bx	lr
 800485e:	f803 1b01 	strb.w	r1, [r3], #1
 8004862:	e7f9      	b.n	8004858 <memset+0x4>

08004864 <__cvt>:
 8004864:	2b00      	cmp	r3, #0
 8004866:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800486a:	461f      	mov	r7, r3
 800486c:	bfbb      	ittet	lt
 800486e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004872:	461f      	movlt	r7, r3
 8004874:	2300      	movge	r3, #0
 8004876:	232d      	movlt	r3, #45	; 0x2d
 8004878:	b088      	sub	sp, #32
 800487a:	4614      	mov	r4, r2
 800487c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800487e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004880:	7013      	strb	r3, [r2, #0]
 8004882:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004884:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004888:	f023 0820 	bic.w	r8, r3, #32
 800488c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004890:	d005      	beq.n	800489e <__cvt+0x3a>
 8004892:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004896:	d100      	bne.n	800489a <__cvt+0x36>
 8004898:	3501      	adds	r5, #1
 800489a:	2302      	movs	r3, #2
 800489c:	e000      	b.n	80048a0 <__cvt+0x3c>
 800489e:	2303      	movs	r3, #3
 80048a0:	aa07      	add	r2, sp, #28
 80048a2:	9204      	str	r2, [sp, #16]
 80048a4:	aa06      	add	r2, sp, #24
 80048a6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80048aa:	e9cd 3500 	strd	r3, r5, [sp]
 80048ae:	4622      	mov	r2, r4
 80048b0:	463b      	mov	r3, r7
 80048b2:	f000 fce5 	bl	8005280 <_dtoa_r>
 80048b6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80048ba:	4606      	mov	r6, r0
 80048bc:	d102      	bne.n	80048c4 <__cvt+0x60>
 80048be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80048c0:	07db      	lsls	r3, r3, #31
 80048c2:	d522      	bpl.n	800490a <__cvt+0xa6>
 80048c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048c8:	eb06 0905 	add.w	r9, r6, r5
 80048cc:	d110      	bne.n	80048f0 <__cvt+0x8c>
 80048ce:	7833      	ldrb	r3, [r6, #0]
 80048d0:	2b30      	cmp	r3, #48	; 0x30
 80048d2:	d10a      	bne.n	80048ea <__cvt+0x86>
 80048d4:	2200      	movs	r2, #0
 80048d6:	2300      	movs	r3, #0
 80048d8:	4620      	mov	r0, r4
 80048da:	4639      	mov	r1, r7
 80048dc:	f7fc f864 	bl	80009a8 <__aeabi_dcmpeq>
 80048e0:	b918      	cbnz	r0, 80048ea <__cvt+0x86>
 80048e2:	f1c5 0501 	rsb	r5, r5, #1
 80048e6:	f8ca 5000 	str.w	r5, [sl]
 80048ea:	f8da 3000 	ldr.w	r3, [sl]
 80048ee:	4499      	add	r9, r3
 80048f0:	2200      	movs	r2, #0
 80048f2:	2300      	movs	r3, #0
 80048f4:	4620      	mov	r0, r4
 80048f6:	4639      	mov	r1, r7
 80048f8:	f7fc f856 	bl	80009a8 <__aeabi_dcmpeq>
 80048fc:	b108      	cbz	r0, 8004902 <__cvt+0x9e>
 80048fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8004902:	2230      	movs	r2, #48	; 0x30
 8004904:	9b07      	ldr	r3, [sp, #28]
 8004906:	454b      	cmp	r3, r9
 8004908:	d307      	bcc.n	800491a <__cvt+0xb6>
 800490a:	4630      	mov	r0, r6
 800490c:	9b07      	ldr	r3, [sp, #28]
 800490e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004910:	1b9b      	subs	r3, r3, r6
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	b008      	add	sp, #32
 8004916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800491a:	1c59      	adds	r1, r3, #1
 800491c:	9107      	str	r1, [sp, #28]
 800491e:	701a      	strb	r2, [r3, #0]
 8004920:	e7f0      	b.n	8004904 <__cvt+0xa0>

08004922 <__exponent>:
 8004922:	4603      	mov	r3, r0
 8004924:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004926:	2900      	cmp	r1, #0
 8004928:	f803 2b02 	strb.w	r2, [r3], #2
 800492c:	bfb6      	itet	lt
 800492e:	222d      	movlt	r2, #45	; 0x2d
 8004930:	222b      	movge	r2, #43	; 0x2b
 8004932:	4249      	neglt	r1, r1
 8004934:	2909      	cmp	r1, #9
 8004936:	7042      	strb	r2, [r0, #1]
 8004938:	dd2b      	ble.n	8004992 <__exponent+0x70>
 800493a:	f10d 0407 	add.w	r4, sp, #7
 800493e:	46a4      	mov	ip, r4
 8004940:	270a      	movs	r7, #10
 8004942:	fb91 f6f7 	sdiv	r6, r1, r7
 8004946:	460a      	mov	r2, r1
 8004948:	46a6      	mov	lr, r4
 800494a:	fb07 1516 	mls	r5, r7, r6, r1
 800494e:	2a63      	cmp	r2, #99	; 0x63
 8004950:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004954:	4631      	mov	r1, r6
 8004956:	f104 34ff 	add.w	r4, r4, #4294967295
 800495a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800495e:	dcf0      	bgt.n	8004942 <__exponent+0x20>
 8004960:	3130      	adds	r1, #48	; 0x30
 8004962:	f1ae 0502 	sub.w	r5, lr, #2
 8004966:	f804 1c01 	strb.w	r1, [r4, #-1]
 800496a:	4629      	mov	r1, r5
 800496c:	1c44      	adds	r4, r0, #1
 800496e:	4561      	cmp	r1, ip
 8004970:	d30a      	bcc.n	8004988 <__exponent+0x66>
 8004972:	f10d 0209 	add.w	r2, sp, #9
 8004976:	eba2 020e 	sub.w	r2, r2, lr
 800497a:	4565      	cmp	r5, ip
 800497c:	bf88      	it	hi
 800497e:	2200      	movhi	r2, #0
 8004980:	4413      	add	r3, r2
 8004982:	1a18      	subs	r0, r3, r0
 8004984:	b003      	add	sp, #12
 8004986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004988:	f811 2b01 	ldrb.w	r2, [r1], #1
 800498c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004990:	e7ed      	b.n	800496e <__exponent+0x4c>
 8004992:	2330      	movs	r3, #48	; 0x30
 8004994:	3130      	adds	r1, #48	; 0x30
 8004996:	7083      	strb	r3, [r0, #2]
 8004998:	70c1      	strb	r1, [r0, #3]
 800499a:	1d03      	adds	r3, r0, #4
 800499c:	e7f1      	b.n	8004982 <__exponent+0x60>
	...

080049a0 <_printf_float>:
 80049a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a4:	b091      	sub	sp, #68	; 0x44
 80049a6:	460c      	mov	r4, r1
 80049a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80049ac:	4616      	mov	r6, r2
 80049ae:	461f      	mov	r7, r3
 80049b0:	4605      	mov	r5, r0
 80049b2:	f001 fa53 	bl	8005e5c <_localeconv_r>
 80049b6:	6803      	ldr	r3, [r0, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	9309      	str	r3, [sp, #36]	; 0x24
 80049bc:	f7fb fbc8 	bl	8000150 <strlen>
 80049c0:	2300      	movs	r3, #0
 80049c2:	930e      	str	r3, [sp, #56]	; 0x38
 80049c4:	f8d8 3000 	ldr.w	r3, [r8]
 80049c8:	900a      	str	r0, [sp, #40]	; 0x28
 80049ca:	3307      	adds	r3, #7
 80049cc:	f023 0307 	bic.w	r3, r3, #7
 80049d0:	f103 0208 	add.w	r2, r3, #8
 80049d4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80049d8:	f8d4 b000 	ldr.w	fp, [r4]
 80049dc:	f8c8 2000 	str.w	r2, [r8]
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80049e8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80049ec:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80049f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80049f2:	f04f 32ff 	mov.w	r2, #4294967295
 80049f6:	4640      	mov	r0, r8
 80049f8:	4b9c      	ldr	r3, [pc, #624]	; (8004c6c <_printf_float+0x2cc>)
 80049fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049fc:	f7fc f806 	bl	8000a0c <__aeabi_dcmpun>
 8004a00:	bb70      	cbnz	r0, 8004a60 <_printf_float+0xc0>
 8004a02:	f04f 32ff 	mov.w	r2, #4294967295
 8004a06:	4640      	mov	r0, r8
 8004a08:	4b98      	ldr	r3, [pc, #608]	; (8004c6c <_printf_float+0x2cc>)
 8004a0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a0c:	f7fb ffe0 	bl	80009d0 <__aeabi_dcmple>
 8004a10:	bb30      	cbnz	r0, 8004a60 <_printf_float+0xc0>
 8004a12:	2200      	movs	r2, #0
 8004a14:	2300      	movs	r3, #0
 8004a16:	4640      	mov	r0, r8
 8004a18:	4651      	mov	r1, sl
 8004a1a:	f7fb ffcf 	bl	80009bc <__aeabi_dcmplt>
 8004a1e:	b110      	cbz	r0, 8004a26 <_printf_float+0x86>
 8004a20:	232d      	movs	r3, #45	; 0x2d
 8004a22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a26:	4b92      	ldr	r3, [pc, #584]	; (8004c70 <_printf_float+0x2d0>)
 8004a28:	4892      	ldr	r0, [pc, #584]	; (8004c74 <_printf_float+0x2d4>)
 8004a2a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004a2e:	bf94      	ite	ls
 8004a30:	4698      	movls	r8, r3
 8004a32:	4680      	movhi	r8, r0
 8004a34:	2303      	movs	r3, #3
 8004a36:	f04f 0a00 	mov.w	sl, #0
 8004a3a:	6123      	str	r3, [r4, #16]
 8004a3c:	f02b 0304 	bic.w	r3, fp, #4
 8004a40:	6023      	str	r3, [r4, #0]
 8004a42:	4633      	mov	r3, r6
 8004a44:	4621      	mov	r1, r4
 8004a46:	4628      	mov	r0, r5
 8004a48:	9700      	str	r7, [sp, #0]
 8004a4a:	aa0f      	add	r2, sp, #60	; 0x3c
 8004a4c:	f000 f9d4 	bl	8004df8 <_printf_common>
 8004a50:	3001      	adds	r0, #1
 8004a52:	f040 8090 	bne.w	8004b76 <_printf_float+0x1d6>
 8004a56:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5a:	b011      	add	sp, #68	; 0x44
 8004a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a60:	4642      	mov	r2, r8
 8004a62:	4653      	mov	r3, sl
 8004a64:	4640      	mov	r0, r8
 8004a66:	4651      	mov	r1, sl
 8004a68:	f7fb ffd0 	bl	8000a0c <__aeabi_dcmpun>
 8004a6c:	b148      	cbz	r0, 8004a82 <_printf_float+0xe2>
 8004a6e:	f1ba 0f00 	cmp.w	sl, #0
 8004a72:	bfb8      	it	lt
 8004a74:	232d      	movlt	r3, #45	; 0x2d
 8004a76:	4880      	ldr	r0, [pc, #512]	; (8004c78 <_printf_float+0x2d8>)
 8004a78:	bfb8      	it	lt
 8004a7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a7e:	4b7f      	ldr	r3, [pc, #508]	; (8004c7c <_printf_float+0x2dc>)
 8004a80:	e7d3      	b.n	8004a2a <_printf_float+0x8a>
 8004a82:	6863      	ldr	r3, [r4, #4]
 8004a84:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	d142      	bne.n	8004b12 <_printf_float+0x172>
 8004a8c:	2306      	movs	r3, #6
 8004a8e:	6063      	str	r3, [r4, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	9206      	str	r2, [sp, #24]
 8004a94:	aa0e      	add	r2, sp, #56	; 0x38
 8004a96:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004a9a:	aa0d      	add	r2, sp, #52	; 0x34
 8004a9c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004aa0:	9203      	str	r2, [sp, #12]
 8004aa2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004aa6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004aaa:	6023      	str	r3, [r4, #0]
 8004aac:	6863      	ldr	r3, [r4, #4]
 8004aae:	4642      	mov	r2, r8
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	4653      	mov	r3, sl
 8004ab6:	910b      	str	r1, [sp, #44]	; 0x2c
 8004ab8:	f7ff fed4 	bl	8004864 <__cvt>
 8004abc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004abe:	4680      	mov	r8, r0
 8004ac0:	2947      	cmp	r1, #71	; 0x47
 8004ac2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ac4:	d108      	bne.n	8004ad8 <_printf_float+0x138>
 8004ac6:	1cc8      	adds	r0, r1, #3
 8004ac8:	db02      	blt.n	8004ad0 <_printf_float+0x130>
 8004aca:	6863      	ldr	r3, [r4, #4]
 8004acc:	4299      	cmp	r1, r3
 8004ace:	dd40      	ble.n	8004b52 <_printf_float+0x1b2>
 8004ad0:	f1a9 0902 	sub.w	r9, r9, #2
 8004ad4:	fa5f f989 	uxtb.w	r9, r9
 8004ad8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004adc:	d81f      	bhi.n	8004b1e <_printf_float+0x17e>
 8004ade:	464a      	mov	r2, r9
 8004ae0:	3901      	subs	r1, #1
 8004ae2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ae6:	910d      	str	r1, [sp, #52]	; 0x34
 8004ae8:	f7ff ff1b 	bl	8004922 <__exponent>
 8004aec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004aee:	4682      	mov	sl, r0
 8004af0:	1813      	adds	r3, r2, r0
 8004af2:	2a01      	cmp	r2, #1
 8004af4:	6123      	str	r3, [r4, #16]
 8004af6:	dc02      	bgt.n	8004afe <_printf_float+0x15e>
 8004af8:	6822      	ldr	r2, [r4, #0]
 8004afa:	07d2      	lsls	r2, r2, #31
 8004afc:	d501      	bpl.n	8004b02 <_printf_float+0x162>
 8004afe:	3301      	adds	r3, #1
 8004b00:	6123      	str	r3, [r4, #16]
 8004b02:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d09b      	beq.n	8004a42 <_printf_float+0xa2>
 8004b0a:	232d      	movs	r3, #45	; 0x2d
 8004b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b10:	e797      	b.n	8004a42 <_printf_float+0xa2>
 8004b12:	2947      	cmp	r1, #71	; 0x47
 8004b14:	d1bc      	bne.n	8004a90 <_printf_float+0xf0>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1ba      	bne.n	8004a90 <_printf_float+0xf0>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e7b7      	b.n	8004a8e <_printf_float+0xee>
 8004b1e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004b22:	d118      	bne.n	8004b56 <_printf_float+0x1b6>
 8004b24:	2900      	cmp	r1, #0
 8004b26:	6863      	ldr	r3, [r4, #4]
 8004b28:	dd0b      	ble.n	8004b42 <_printf_float+0x1a2>
 8004b2a:	6121      	str	r1, [r4, #16]
 8004b2c:	b913      	cbnz	r3, 8004b34 <_printf_float+0x194>
 8004b2e:	6822      	ldr	r2, [r4, #0]
 8004b30:	07d0      	lsls	r0, r2, #31
 8004b32:	d502      	bpl.n	8004b3a <_printf_float+0x19a>
 8004b34:	3301      	adds	r3, #1
 8004b36:	440b      	add	r3, r1
 8004b38:	6123      	str	r3, [r4, #16]
 8004b3a:	f04f 0a00 	mov.w	sl, #0
 8004b3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b40:	e7df      	b.n	8004b02 <_printf_float+0x162>
 8004b42:	b913      	cbnz	r3, 8004b4a <_printf_float+0x1aa>
 8004b44:	6822      	ldr	r2, [r4, #0]
 8004b46:	07d2      	lsls	r2, r2, #31
 8004b48:	d501      	bpl.n	8004b4e <_printf_float+0x1ae>
 8004b4a:	3302      	adds	r3, #2
 8004b4c:	e7f4      	b.n	8004b38 <_printf_float+0x198>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e7f2      	b.n	8004b38 <_printf_float+0x198>
 8004b52:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004b56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b58:	4299      	cmp	r1, r3
 8004b5a:	db05      	blt.n	8004b68 <_printf_float+0x1c8>
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	6121      	str	r1, [r4, #16]
 8004b60:	07d8      	lsls	r0, r3, #31
 8004b62:	d5ea      	bpl.n	8004b3a <_printf_float+0x19a>
 8004b64:	1c4b      	adds	r3, r1, #1
 8004b66:	e7e7      	b.n	8004b38 <_printf_float+0x198>
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	bfcc      	ite	gt
 8004b6c:	2201      	movgt	r2, #1
 8004b6e:	f1c1 0202 	rsble	r2, r1, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	e7e0      	b.n	8004b38 <_printf_float+0x198>
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	055a      	lsls	r2, r3, #21
 8004b7a:	d407      	bmi.n	8004b8c <_printf_float+0x1ec>
 8004b7c:	6923      	ldr	r3, [r4, #16]
 8004b7e:	4642      	mov	r2, r8
 8004b80:	4631      	mov	r1, r6
 8004b82:	4628      	mov	r0, r5
 8004b84:	47b8      	blx	r7
 8004b86:	3001      	adds	r0, #1
 8004b88:	d12b      	bne.n	8004be2 <_printf_float+0x242>
 8004b8a:	e764      	b.n	8004a56 <_printf_float+0xb6>
 8004b8c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b90:	f240 80dd 	bls.w	8004d4e <_printf_float+0x3ae>
 8004b94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f7fb ff04 	bl	80009a8 <__aeabi_dcmpeq>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d033      	beq.n	8004c0c <_printf_float+0x26c>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	4631      	mov	r1, r6
 8004ba8:	4628      	mov	r0, r5
 8004baa:	4a35      	ldr	r2, [pc, #212]	; (8004c80 <_printf_float+0x2e0>)
 8004bac:	47b8      	blx	r7
 8004bae:	3001      	adds	r0, #1
 8004bb0:	f43f af51 	beq.w	8004a56 <_printf_float+0xb6>
 8004bb4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	db02      	blt.n	8004bc2 <_printf_float+0x222>
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	07d8      	lsls	r0, r3, #31
 8004bc0:	d50f      	bpl.n	8004be2 <_printf_float+0x242>
 8004bc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bc6:	4631      	mov	r1, r6
 8004bc8:	4628      	mov	r0, r5
 8004bca:	47b8      	blx	r7
 8004bcc:	3001      	adds	r0, #1
 8004bce:	f43f af42 	beq.w	8004a56 <_printf_float+0xb6>
 8004bd2:	f04f 0800 	mov.w	r8, #0
 8004bd6:	f104 091a 	add.w	r9, r4, #26
 8004bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	4543      	cmp	r3, r8
 8004be0:	dc09      	bgt.n	8004bf6 <_printf_float+0x256>
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	079b      	lsls	r3, r3, #30
 8004be6:	f100 8102 	bmi.w	8004dee <_printf_float+0x44e>
 8004bea:	68e0      	ldr	r0, [r4, #12]
 8004bec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bee:	4298      	cmp	r0, r3
 8004bf0:	bfb8      	it	lt
 8004bf2:	4618      	movlt	r0, r3
 8004bf4:	e731      	b.n	8004a5a <_printf_float+0xba>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	464a      	mov	r2, r9
 8004bfa:	4631      	mov	r1, r6
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	47b8      	blx	r7
 8004c00:	3001      	adds	r0, #1
 8004c02:	f43f af28 	beq.w	8004a56 <_printf_float+0xb6>
 8004c06:	f108 0801 	add.w	r8, r8, #1
 8004c0a:	e7e6      	b.n	8004bda <_printf_float+0x23a>
 8004c0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	dc38      	bgt.n	8004c84 <_printf_float+0x2e4>
 8004c12:	2301      	movs	r3, #1
 8004c14:	4631      	mov	r1, r6
 8004c16:	4628      	mov	r0, r5
 8004c18:	4a19      	ldr	r2, [pc, #100]	; (8004c80 <_printf_float+0x2e0>)
 8004c1a:	47b8      	blx	r7
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	f43f af1a 	beq.w	8004a56 <_printf_float+0xb6>
 8004c22:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c26:	4313      	orrs	r3, r2
 8004c28:	d102      	bne.n	8004c30 <_printf_float+0x290>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	07d9      	lsls	r1, r3, #31
 8004c2e:	d5d8      	bpl.n	8004be2 <_printf_float+0x242>
 8004c30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c34:	4631      	mov	r1, r6
 8004c36:	4628      	mov	r0, r5
 8004c38:	47b8      	blx	r7
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	f43f af0b 	beq.w	8004a56 <_printf_float+0xb6>
 8004c40:	f04f 0900 	mov.w	r9, #0
 8004c44:	f104 0a1a 	add.w	sl, r4, #26
 8004c48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c4a:	425b      	negs	r3, r3
 8004c4c:	454b      	cmp	r3, r9
 8004c4e:	dc01      	bgt.n	8004c54 <_printf_float+0x2b4>
 8004c50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c52:	e794      	b.n	8004b7e <_printf_float+0x1de>
 8004c54:	2301      	movs	r3, #1
 8004c56:	4652      	mov	r2, sl
 8004c58:	4631      	mov	r1, r6
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	47b8      	blx	r7
 8004c5e:	3001      	adds	r0, #1
 8004c60:	f43f aef9 	beq.w	8004a56 <_printf_float+0xb6>
 8004c64:	f109 0901 	add.w	r9, r9, #1
 8004c68:	e7ee      	b.n	8004c48 <_printf_float+0x2a8>
 8004c6a:	bf00      	nop
 8004c6c:	7fefffff 	.word	0x7fefffff
 8004c70:	08008afc 	.word	0x08008afc
 8004c74:	08008b00 	.word	0x08008b00
 8004c78:	08008b08 	.word	0x08008b08
 8004c7c:	08008b04 	.word	0x08008b04
 8004c80:	08008b0c 	.word	0x08008b0c
 8004c84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	bfa8      	it	ge
 8004c8c:	461a      	movge	r2, r3
 8004c8e:	2a00      	cmp	r2, #0
 8004c90:	4691      	mov	r9, r2
 8004c92:	dc37      	bgt.n	8004d04 <_printf_float+0x364>
 8004c94:	f04f 0b00 	mov.w	fp, #0
 8004c98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c9c:	f104 021a 	add.w	r2, r4, #26
 8004ca0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004ca4:	ebaa 0309 	sub.w	r3, sl, r9
 8004ca8:	455b      	cmp	r3, fp
 8004caa:	dc33      	bgt.n	8004d14 <_printf_float+0x374>
 8004cac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	db3b      	blt.n	8004d2c <_printf_float+0x38c>
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	07da      	lsls	r2, r3, #31
 8004cb8:	d438      	bmi.n	8004d2c <_printf_float+0x38c>
 8004cba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cbc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004cbe:	eba2 030a 	sub.w	r3, r2, sl
 8004cc2:	eba2 0901 	sub.w	r9, r2, r1
 8004cc6:	4599      	cmp	r9, r3
 8004cc8:	bfa8      	it	ge
 8004cca:	4699      	movge	r9, r3
 8004ccc:	f1b9 0f00 	cmp.w	r9, #0
 8004cd0:	dc34      	bgt.n	8004d3c <_printf_float+0x39c>
 8004cd2:	f04f 0800 	mov.w	r8, #0
 8004cd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cda:	f104 0a1a 	add.w	sl, r4, #26
 8004cde:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ce2:	1a9b      	subs	r3, r3, r2
 8004ce4:	eba3 0309 	sub.w	r3, r3, r9
 8004ce8:	4543      	cmp	r3, r8
 8004cea:	f77f af7a 	ble.w	8004be2 <_printf_float+0x242>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	4652      	mov	r2, sl
 8004cf2:	4631      	mov	r1, r6
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	47b8      	blx	r7
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	f43f aeac 	beq.w	8004a56 <_printf_float+0xb6>
 8004cfe:	f108 0801 	add.w	r8, r8, #1
 8004d02:	e7ec      	b.n	8004cde <_printf_float+0x33e>
 8004d04:	4613      	mov	r3, r2
 8004d06:	4631      	mov	r1, r6
 8004d08:	4642      	mov	r2, r8
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	47b8      	blx	r7
 8004d0e:	3001      	adds	r0, #1
 8004d10:	d1c0      	bne.n	8004c94 <_printf_float+0x2f4>
 8004d12:	e6a0      	b.n	8004a56 <_printf_float+0xb6>
 8004d14:	2301      	movs	r3, #1
 8004d16:	4631      	mov	r1, r6
 8004d18:	4628      	mov	r0, r5
 8004d1a:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d1c:	47b8      	blx	r7
 8004d1e:	3001      	adds	r0, #1
 8004d20:	f43f ae99 	beq.w	8004a56 <_printf_float+0xb6>
 8004d24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d26:	f10b 0b01 	add.w	fp, fp, #1
 8004d2a:	e7b9      	b.n	8004ca0 <_printf_float+0x300>
 8004d2c:	4631      	mov	r1, r6
 8004d2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d32:	4628      	mov	r0, r5
 8004d34:	47b8      	blx	r7
 8004d36:	3001      	adds	r0, #1
 8004d38:	d1bf      	bne.n	8004cba <_printf_float+0x31a>
 8004d3a:	e68c      	b.n	8004a56 <_printf_float+0xb6>
 8004d3c:	464b      	mov	r3, r9
 8004d3e:	4631      	mov	r1, r6
 8004d40:	4628      	mov	r0, r5
 8004d42:	eb08 020a 	add.w	r2, r8, sl
 8004d46:	47b8      	blx	r7
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d1c2      	bne.n	8004cd2 <_printf_float+0x332>
 8004d4c:	e683      	b.n	8004a56 <_printf_float+0xb6>
 8004d4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d50:	2a01      	cmp	r2, #1
 8004d52:	dc01      	bgt.n	8004d58 <_printf_float+0x3b8>
 8004d54:	07db      	lsls	r3, r3, #31
 8004d56:	d537      	bpl.n	8004dc8 <_printf_float+0x428>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	4642      	mov	r2, r8
 8004d5c:	4631      	mov	r1, r6
 8004d5e:	4628      	mov	r0, r5
 8004d60:	47b8      	blx	r7
 8004d62:	3001      	adds	r0, #1
 8004d64:	f43f ae77 	beq.w	8004a56 <_printf_float+0xb6>
 8004d68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d6c:	4631      	mov	r1, r6
 8004d6e:	4628      	mov	r0, r5
 8004d70:	47b8      	blx	r7
 8004d72:	3001      	adds	r0, #1
 8004d74:	f43f ae6f 	beq.w	8004a56 <_printf_float+0xb6>
 8004d78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f7fb fe12 	bl	80009a8 <__aeabi_dcmpeq>
 8004d84:	b9d8      	cbnz	r0, 8004dbe <_printf_float+0x41e>
 8004d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d88:	f108 0201 	add.w	r2, r8, #1
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	4631      	mov	r1, r6
 8004d90:	4628      	mov	r0, r5
 8004d92:	47b8      	blx	r7
 8004d94:	3001      	adds	r0, #1
 8004d96:	d10e      	bne.n	8004db6 <_printf_float+0x416>
 8004d98:	e65d      	b.n	8004a56 <_printf_float+0xb6>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	464a      	mov	r2, r9
 8004d9e:	4631      	mov	r1, r6
 8004da0:	4628      	mov	r0, r5
 8004da2:	47b8      	blx	r7
 8004da4:	3001      	adds	r0, #1
 8004da6:	f43f ae56 	beq.w	8004a56 <_printf_float+0xb6>
 8004daa:	f108 0801 	add.w	r8, r8, #1
 8004dae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004db0:	3b01      	subs	r3, #1
 8004db2:	4543      	cmp	r3, r8
 8004db4:	dcf1      	bgt.n	8004d9a <_printf_float+0x3fa>
 8004db6:	4653      	mov	r3, sl
 8004db8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004dbc:	e6e0      	b.n	8004b80 <_printf_float+0x1e0>
 8004dbe:	f04f 0800 	mov.w	r8, #0
 8004dc2:	f104 091a 	add.w	r9, r4, #26
 8004dc6:	e7f2      	b.n	8004dae <_printf_float+0x40e>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	4642      	mov	r2, r8
 8004dcc:	e7df      	b.n	8004d8e <_printf_float+0x3ee>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	464a      	mov	r2, r9
 8004dd2:	4631      	mov	r1, r6
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	47b8      	blx	r7
 8004dd8:	3001      	adds	r0, #1
 8004dda:	f43f ae3c 	beq.w	8004a56 <_printf_float+0xb6>
 8004dde:	f108 0801 	add.w	r8, r8, #1
 8004de2:	68e3      	ldr	r3, [r4, #12]
 8004de4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004de6:	1a5b      	subs	r3, r3, r1
 8004de8:	4543      	cmp	r3, r8
 8004dea:	dcf0      	bgt.n	8004dce <_printf_float+0x42e>
 8004dec:	e6fd      	b.n	8004bea <_printf_float+0x24a>
 8004dee:	f04f 0800 	mov.w	r8, #0
 8004df2:	f104 0919 	add.w	r9, r4, #25
 8004df6:	e7f4      	b.n	8004de2 <_printf_float+0x442>

08004df8 <_printf_common>:
 8004df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dfc:	4616      	mov	r6, r2
 8004dfe:	4699      	mov	r9, r3
 8004e00:	688a      	ldr	r2, [r1, #8]
 8004e02:	690b      	ldr	r3, [r1, #16]
 8004e04:	4607      	mov	r7, r0
 8004e06:	4293      	cmp	r3, r2
 8004e08:	bfb8      	it	lt
 8004e0a:	4613      	movlt	r3, r2
 8004e0c:	6033      	str	r3, [r6, #0]
 8004e0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e12:	460c      	mov	r4, r1
 8004e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e18:	b10a      	cbz	r2, 8004e1e <_printf_common+0x26>
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	6033      	str	r3, [r6, #0]
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	0699      	lsls	r1, r3, #26
 8004e22:	bf42      	ittt	mi
 8004e24:	6833      	ldrmi	r3, [r6, #0]
 8004e26:	3302      	addmi	r3, #2
 8004e28:	6033      	strmi	r3, [r6, #0]
 8004e2a:	6825      	ldr	r5, [r4, #0]
 8004e2c:	f015 0506 	ands.w	r5, r5, #6
 8004e30:	d106      	bne.n	8004e40 <_printf_common+0x48>
 8004e32:	f104 0a19 	add.w	sl, r4, #25
 8004e36:	68e3      	ldr	r3, [r4, #12]
 8004e38:	6832      	ldr	r2, [r6, #0]
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	42ab      	cmp	r3, r5
 8004e3e:	dc28      	bgt.n	8004e92 <_printf_common+0x9a>
 8004e40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e44:	1e13      	subs	r3, r2, #0
 8004e46:	6822      	ldr	r2, [r4, #0]
 8004e48:	bf18      	it	ne
 8004e4a:	2301      	movne	r3, #1
 8004e4c:	0692      	lsls	r2, r2, #26
 8004e4e:	d42d      	bmi.n	8004eac <_printf_common+0xb4>
 8004e50:	4649      	mov	r1, r9
 8004e52:	4638      	mov	r0, r7
 8004e54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e58:	47c0      	blx	r8
 8004e5a:	3001      	adds	r0, #1
 8004e5c:	d020      	beq.n	8004ea0 <_printf_common+0xa8>
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	68e5      	ldr	r5, [r4, #12]
 8004e62:	f003 0306 	and.w	r3, r3, #6
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	bf18      	it	ne
 8004e6a:	2500      	movne	r5, #0
 8004e6c:	6832      	ldr	r2, [r6, #0]
 8004e6e:	f04f 0600 	mov.w	r6, #0
 8004e72:	68a3      	ldr	r3, [r4, #8]
 8004e74:	bf08      	it	eq
 8004e76:	1aad      	subeq	r5, r5, r2
 8004e78:	6922      	ldr	r2, [r4, #16]
 8004e7a:	bf08      	it	eq
 8004e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e80:	4293      	cmp	r3, r2
 8004e82:	bfc4      	itt	gt
 8004e84:	1a9b      	subgt	r3, r3, r2
 8004e86:	18ed      	addgt	r5, r5, r3
 8004e88:	341a      	adds	r4, #26
 8004e8a:	42b5      	cmp	r5, r6
 8004e8c:	d11a      	bne.n	8004ec4 <_printf_common+0xcc>
 8004e8e:	2000      	movs	r0, #0
 8004e90:	e008      	b.n	8004ea4 <_printf_common+0xac>
 8004e92:	2301      	movs	r3, #1
 8004e94:	4652      	mov	r2, sl
 8004e96:	4649      	mov	r1, r9
 8004e98:	4638      	mov	r0, r7
 8004e9a:	47c0      	blx	r8
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	d103      	bne.n	8004ea8 <_printf_common+0xb0>
 8004ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea8:	3501      	adds	r5, #1
 8004eaa:	e7c4      	b.n	8004e36 <_printf_common+0x3e>
 8004eac:	2030      	movs	r0, #48	; 0x30
 8004eae:	18e1      	adds	r1, r4, r3
 8004eb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004eba:	4422      	add	r2, r4
 8004ebc:	3302      	adds	r3, #2
 8004ebe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ec2:	e7c5      	b.n	8004e50 <_printf_common+0x58>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	4622      	mov	r2, r4
 8004ec8:	4649      	mov	r1, r9
 8004eca:	4638      	mov	r0, r7
 8004ecc:	47c0      	blx	r8
 8004ece:	3001      	adds	r0, #1
 8004ed0:	d0e6      	beq.n	8004ea0 <_printf_common+0xa8>
 8004ed2:	3601      	adds	r6, #1
 8004ed4:	e7d9      	b.n	8004e8a <_printf_common+0x92>
	...

08004ed8 <_printf_i>:
 8004ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004edc:	460c      	mov	r4, r1
 8004ede:	7e27      	ldrb	r7, [r4, #24]
 8004ee0:	4691      	mov	r9, r2
 8004ee2:	2f78      	cmp	r7, #120	; 0x78
 8004ee4:	4680      	mov	r8, r0
 8004ee6:	469a      	mov	sl, r3
 8004ee8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004eea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004eee:	d807      	bhi.n	8004f00 <_printf_i+0x28>
 8004ef0:	2f62      	cmp	r7, #98	; 0x62
 8004ef2:	d80a      	bhi.n	8004f0a <_printf_i+0x32>
 8004ef4:	2f00      	cmp	r7, #0
 8004ef6:	f000 80d9 	beq.w	80050ac <_printf_i+0x1d4>
 8004efa:	2f58      	cmp	r7, #88	; 0x58
 8004efc:	f000 80a4 	beq.w	8005048 <_printf_i+0x170>
 8004f00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f08:	e03a      	b.n	8004f80 <_printf_i+0xa8>
 8004f0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f0e:	2b15      	cmp	r3, #21
 8004f10:	d8f6      	bhi.n	8004f00 <_printf_i+0x28>
 8004f12:	a001      	add	r0, pc, #4	; (adr r0, 8004f18 <_printf_i+0x40>)
 8004f14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f18:	08004f71 	.word	0x08004f71
 8004f1c:	08004f85 	.word	0x08004f85
 8004f20:	08004f01 	.word	0x08004f01
 8004f24:	08004f01 	.word	0x08004f01
 8004f28:	08004f01 	.word	0x08004f01
 8004f2c:	08004f01 	.word	0x08004f01
 8004f30:	08004f85 	.word	0x08004f85
 8004f34:	08004f01 	.word	0x08004f01
 8004f38:	08004f01 	.word	0x08004f01
 8004f3c:	08004f01 	.word	0x08004f01
 8004f40:	08004f01 	.word	0x08004f01
 8004f44:	08005093 	.word	0x08005093
 8004f48:	08004fb5 	.word	0x08004fb5
 8004f4c:	08005075 	.word	0x08005075
 8004f50:	08004f01 	.word	0x08004f01
 8004f54:	08004f01 	.word	0x08004f01
 8004f58:	080050b5 	.word	0x080050b5
 8004f5c:	08004f01 	.word	0x08004f01
 8004f60:	08004fb5 	.word	0x08004fb5
 8004f64:	08004f01 	.word	0x08004f01
 8004f68:	08004f01 	.word	0x08004f01
 8004f6c:	0800507d 	.word	0x0800507d
 8004f70:	680b      	ldr	r3, [r1, #0]
 8004f72:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f76:	1d1a      	adds	r2, r3, #4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	600a      	str	r2, [r1, #0]
 8004f7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f80:	2301      	movs	r3, #1
 8004f82:	e0a4      	b.n	80050ce <_printf_i+0x1f6>
 8004f84:	6825      	ldr	r5, [r4, #0]
 8004f86:	6808      	ldr	r0, [r1, #0]
 8004f88:	062e      	lsls	r6, r5, #24
 8004f8a:	f100 0304 	add.w	r3, r0, #4
 8004f8e:	d50a      	bpl.n	8004fa6 <_printf_i+0xce>
 8004f90:	6805      	ldr	r5, [r0, #0]
 8004f92:	600b      	str	r3, [r1, #0]
 8004f94:	2d00      	cmp	r5, #0
 8004f96:	da03      	bge.n	8004fa0 <_printf_i+0xc8>
 8004f98:	232d      	movs	r3, #45	; 0x2d
 8004f9a:	426d      	negs	r5, r5
 8004f9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fa0:	230a      	movs	r3, #10
 8004fa2:	485e      	ldr	r0, [pc, #376]	; (800511c <_printf_i+0x244>)
 8004fa4:	e019      	b.n	8004fda <_printf_i+0x102>
 8004fa6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004faa:	6805      	ldr	r5, [r0, #0]
 8004fac:	600b      	str	r3, [r1, #0]
 8004fae:	bf18      	it	ne
 8004fb0:	b22d      	sxthne	r5, r5
 8004fb2:	e7ef      	b.n	8004f94 <_printf_i+0xbc>
 8004fb4:	680b      	ldr	r3, [r1, #0]
 8004fb6:	6825      	ldr	r5, [r4, #0]
 8004fb8:	1d18      	adds	r0, r3, #4
 8004fba:	6008      	str	r0, [r1, #0]
 8004fbc:	0628      	lsls	r0, r5, #24
 8004fbe:	d501      	bpl.n	8004fc4 <_printf_i+0xec>
 8004fc0:	681d      	ldr	r5, [r3, #0]
 8004fc2:	e002      	b.n	8004fca <_printf_i+0xf2>
 8004fc4:	0669      	lsls	r1, r5, #25
 8004fc6:	d5fb      	bpl.n	8004fc0 <_printf_i+0xe8>
 8004fc8:	881d      	ldrh	r5, [r3, #0]
 8004fca:	2f6f      	cmp	r7, #111	; 0x6f
 8004fcc:	bf0c      	ite	eq
 8004fce:	2308      	moveq	r3, #8
 8004fd0:	230a      	movne	r3, #10
 8004fd2:	4852      	ldr	r0, [pc, #328]	; (800511c <_printf_i+0x244>)
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fda:	6866      	ldr	r6, [r4, #4]
 8004fdc:	2e00      	cmp	r6, #0
 8004fde:	bfa8      	it	ge
 8004fe0:	6821      	ldrge	r1, [r4, #0]
 8004fe2:	60a6      	str	r6, [r4, #8]
 8004fe4:	bfa4      	itt	ge
 8004fe6:	f021 0104 	bicge.w	r1, r1, #4
 8004fea:	6021      	strge	r1, [r4, #0]
 8004fec:	b90d      	cbnz	r5, 8004ff2 <_printf_i+0x11a>
 8004fee:	2e00      	cmp	r6, #0
 8004ff0:	d04d      	beq.n	800508e <_printf_i+0x1b6>
 8004ff2:	4616      	mov	r6, r2
 8004ff4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ff8:	fb03 5711 	mls	r7, r3, r1, r5
 8004ffc:	5dc7      	ldrb	r7, [r0, r7]
 8004ffe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005002:	462f      	mov	r7, r5
 8005004:	42bb      	cmp	r3, r7
 8005006:	460d      	mov	r5, r1
 8005008:	d9f4      	bls.n	8004ff4 <_printf_i+0x11c>
 800500a:	2b08      	cmp	r3, #8
 800500c:	d10b      	bne.n	8005026 <_printf_i+0x14e>
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	07df      	lsls	r7, r3, #31
 8005012:	d508      	bpl.n	8005026 <_printf_i+0x14e>
 8005014:	6923      	ldr	r3, [r4, #16]
 8005016:	6861      	ldr	r1, [r4, #4]
 8005018:	4299      	cmp	r1, r3
 800501a:	bfde      	ittt	le
 800501c:	2330      	movle	r3, #48	; 0x30
 800501e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005022:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005026:	1b92      	subs	r2, r2, r6
 8005028:	6122      	str	r2, [r4, #16]
 800502a:	464b      	mov	r3, r9
 800502c:	4621      	mov	r1, r4
 800502e:	4640      	mov	r0, r8
 8005030:	f8cd a000 	str.w	sl, [sp]
 8005034:	aa03      	add	r2, sp, #12
 8005036:	f7ff fedf 	bl	8004df8 <_printf_common>
 800503a:	3001      	adds	r0, #1
 800503c:	d14c      	bne.n	80050d8 <_printf_i+0x200>
 800503e:	f04f 30ff 	mov.w	r0, #4294967295
 8005042:	b004      	add	sp, #16
 8005044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005048:	4834      	ldr	r0, [pc, #208]	; (800511c <_printf_i+0x244>)
 800504a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800504e:	680e      	ldr	r6, [r1, #0]
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	f856 5b04 	ldr.w	r5, [r6], #4
 8005056:	061f      	lsls	r7, r3, #24
 8005058:	600e      	str	r6, [r1, #0]
 800505a:	d514      	bpl.n	8005086 <_printf_i+0x1ae>
 800505c:	07d9      	lsls	r1, r3, #31
 800505e:	bf44      	itt	mi
 8005060:	f043 0320 	orrmi.w	r3, r3, #32
 8005064:	6023      	strmi	r3, [r4, #0]
 8005066:	b91d      	cbnz	r5, 8005070 <_printf_i+0x198>
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	f023 0320 	bic.w	r3, r3, #32
 800506e:	6023      	str	r3, [r4, #0]
 8005070:	2310      	movs	r3, #16
 8005072:	e7af      	b.n	8004fd4 <_printf_i+0xfc>
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	f043 0320 	orr.w	r3, r3, #32
 800507a:	6023      	str	r3, [r4, #0]
 800507c:	2378      	movs	r3, #120	; 0x78
 800507e:	4828      	ldr	r0, [pc, #160]	; (8005120 <_printf_i+0x248>)
 8005080:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005084:	e7e3      	b.n	800504e <_printf_i+0x176>
 8005086:	065e      	lsls	r6, r3, #25
 8005088:	bf48      	it	mi
 800508a:	b2ad      	uxthmi	r5, r5
 800508c:	e7e6      	b.n	800505c <_printf_i+0x184>
 800508e:	4616      	mov	r6, r2
 8005090:	e7bb      	b.n	800500a <_printf_i+0x132>
 8005092:	680b      	ldr	r3, [r1, #0]
 8005094:	6826      	ldr	r6, [r4, #0]
 8005096:	1d1d      	adds	r5, r3, #4
 8005098:	6960      	ldr	r0, [r4, #20]
 800509a:	600d      	str	r5, [r1, #0]
 800509c:	0635      	lsls	r5, r6, #24
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	d501      	bpl.n	80050a6 <_printf_i+0x1ce>
 80050a2:	6018      	str	r0, [r3, #0]
 80050a4:	e002      	b.n	80050ac <_printf_i+0x1d4>
 80050a6:	0671      	lsls	r1, r6, #25
 80050a8:	d5fb      	bpl.n	80050a2 <_printf_i+0x1ca>
 80050aa:	8018      	strh	r0, [r3, #0]
 80050ac:	2300      	movs	r3, #0
 80050ae:	4616      	mov	r6, r2
 80050b0:	6123      	str	r3, [r4, #16]
 80050b2:	e7ba      	b.n	800502a <_printf_i+0x152>
 80050b4:	680b      	ldr	r3, [r1, #0]
 80050b6:	1d1a      	adds	r2, r3, #4
 80050b8:	600a      	str	r2, [r1, #0]
 80050ba:	681e      	ldr	r6, [r3, #0]
 80050bc:	2100      	movs	r1, #0
 80050be:	4630      	mov	r0, r6
 80050c0:	6862      	ldr	r2, [r4, #4]
 80050c2:	f000 fed7 	bl	8005e74 <memchr>
 80050c6:	b108      	cbz	r0, 80050cc <_printf_i+0x1f4>
 80050c8:	1b80      	subs	r0, r0, r6
 80050ca:	6060      	str	r0, [r4, #4]
 80050cc:	6863      	ldr	r3, [r4, #4]
 80050ce:	6123      	str	r3, [r4, #16]
 80050d0:	2300      	movs	r3, #0
 80050d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050d6:	e7a8      	b.n	800502a <_printf_i+0x152>
 80050d8:	4632      	mov	r2, r6
 80050da:	4649      	mov	r1, r9
 80050dc:	4640      	mov	r0, r8
 80050de:	6923      	ldr	r3, [r4, #16]
 80050e0:	47d0      	blx	sl
 80050e2:	3001      	adds	r0, #1
 80050e4:	d0ab      	beq.n	800503e <_printf_i+0x166>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	079b      	lsls	r3, r3, #30
 80050ea:	d413      	bmi.n	8005114 <_printf_i+0x23c>
 80050ec:	68e0      	ldr	r0, [r4, #12]
 80050ee:	9b03      	ldr	r3, [sp, #12]
 80050f0:	4298      	cmp	r0, r3
 80050f2:	bfb8      	it	lt
 80050f4:	4618      	movlt	r0, r3
 80050f6:	e7a4      	b.n	8005042 <_printf_i+0x16a>
 80050f8:	2301      	movs	r3, #1
 80050fa:	4632      	mov	r2, r6
 80050fc:	4649      	mov	r1, r9
 80050fe:	4640      	mov	r0, r8
 8005100:	47d0      	blx	sl
 8005102:	3001      	adds	r0, #1
 8005104:	d09b      	beq.n	800503e <_printf_i+0x166>
 8005106:	3501      	adds	r5, #1
 8005108:	68e3      	ldr	r3, [r4, #12]
 800510a:	9903      	ldr	r1, [sp, #12]
 800510c:	1a5b      	subs	r3, r3, r1
 800510e:	42ab      	cmp	r3, r5
 8005110:	dcf2      	bgt.n	80050f8 <_printf_i+0x220>
 8005112:	e7eb      	b.n	80050ec <_printf_i+0x214>
 8005114:	2500      	movs	r5, #0
 8005116:	f104 0619 	add.w	r6, r4, #25
 800511a:	e7f5      	b.n	8005108 <_printf_i+0x230>
 800511c:	08008b0e 	.word	0x08008b0e
 8005120:	08008b1f 	.word	0x08008b1f

08005124 <siprintf>:
 8005124:	b40e      	push	{r1, r2, r3}
 8005126:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800512a:	b500      	push	{lr}
 800512c:	b09c      	sub	sp, #112	; 0x70
 800512e:	ab1d      	add	r3, sp, #116	; 0x74
 8005130:	9002      	str	r0, [sp, #8]
 8005132:	9006      	str	r0, [sp, #24]
 8005134:	9107      	str	r1, [sp, #28]
 8005136:	9104      	str	r1, [sp, #16]
 8005138:	4808      	ldr	r0, [pc, #32]	; (800515c <siprintf+0x38>)
 800513a:	4909      	ldr	r1, [pc, #36]	; (8005160 <siprintf+0x3c>)
 800513c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005140:	9105      	str	r1, [sp, #20]
 8005142:	6800      	ldr	r0, [r0, #0]
 8005144:	a902      	add	r1, sp, #8
 8005146:	9301      	str	r3, [sp, #4]
 8005148:	f001 fb42 	bl	80067d0 <_svfiprintf_r>
 800514c:	2200      	movs	r2, #0
 800514e:	9b02      	ldr	r3, [sp, #8]
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	b01c      	add	sp, #112	; 0x70
 8005154:	f85d eb04 	ldr.w	lr, [sp], #4
 8005158:	b003      	add	sp, #12
 800515a:	4770      	bx	lr
 800515c:	2000001c 	.word	0x2000001c
 8005160:	ffff0208 	.word	0xffff0208

08005164 <quorem>:
 8005164:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005168:	6903      	ldr	r3, [r0, #16]
 800516a:	690c      	ldr	r4, [r1, #16]
 800516c:	4607      	mov	r7, r0
 800516e:	42a3      	cmp	r3, r4
 8005170:	f2c0 8083 	blt.w	800527a <quorem+0x116>
 8005174:	3c01      	subs	r4, #1
 8005176:	f100 0514 	add.w	r5, r0, #20
 800517a:	f101 0814 	add.w	r8, r1, #20
 800517e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005182:	9301      	str	r3, [sp, #4]
 8005184:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005188:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800518c:	3301      	adds	r3, #1
 800518e:	429a      	cmp	r2, r3
 8005190:	fbb2 f6f3 	udiv	r6, r2, r3
 8005194:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005198:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800519c:	d332      	bcc.n	8005204 <quorem+0xa0>
 800519e:	f04f 0e00 	mov.w	lr, #0
 80051a2:	4640      	mov	r0, r8
 80051a4:	46ac      	mov	ip, r5
 80051a6:	46f2      	mov	sl, lr
 80051a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80051ac:	b293      	uxth	r3, r2
 80051ae:	fb06 e303 	mla	r3, r6, r3, lr
 80051b2:	0c12      	lsrs	r2, r2, #16
 80051b4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80051b8:	fb06 e202 	mla	r2, r6, r2, lr
 80051bc:	b29b      	uxth	r3, r3
 80051be:	ebaa 0303 	sub.w	r3, sl, r3
 80051c2:	f8dc a000 	ldr.w	sl, [ip]
 80051c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80051ca:	fa1f fa8a 	uxth.w	sl, sl
 80051ce:	4453      	add	r3, sl
 80051d0:	fa1f fa82 	uxth.w	sl, r2
 80051d4:	f8dc 2000 	ldr.w	r2, [ip]
 80051d8:	4581      	cmp	r9, r0
 80051da:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80051de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051e8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80051ec:	f84c 3b04 	str.w	r3, [ip], #4
 80051f0:	d2da      	bcs.n	80051a8 <quorem+0x44>
 80051f2:	f855 300b 	ldr.w	r3, [r5, fp]
 80051f6:	b92b      	cbnz	r3, 8005204 <quorem+0xa0>
 80051f8:	9b01      	ldr	r3, [sp, #4]
 80051fa:	3b04      	subs	r3, #4
 80051fc:	429d      	cmp	r5, r3
 80051fe:	461a      	mov	r2, r3
 8005200:	d32f      	bcc.n	8005262 <quorem+0xfe>
 8005202:	613c      	str	r4, [r7, #16]
 8005204:	4638      	mov	r0, r7
 8005206:	f001 f8cb 	bl	80063a0 <__mcmp>
 800520a:	2800      	cmp	r0, #0
 800520c:	db25      	blt.n	800525a <quorem+0xf6>
 800520e:	4628      	mov	r0, r5
 8005210:	f04f 0c00 	mov.w	ip, #0
 8005214:	3601      	adds	r6, #1
 8005216:	f858 1b04 	ldr.w	r1, [r8], #4
 800521a:	f8d0 e000 	ldr.w	lr, [r0]
 800521e:	b28b      	uxth	r3, r1
 8005220:	ebac 0303 	sub.w	r3, ip, r3
 8005224:	fa1f f28e 	uxth.w	r2, lr
 8005228:	4413      	add	r3, r2
 800522a:	0c0a      	lsrs	r2, r1, #16
 800522c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005230:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005234:	b29b      	uxth	r3, r3
 8005236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800523a:	45c1      	cmp	r9, r8
 800523c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005240:	f840 3b04 	str.w	r3, [r0], #4
 8005244:	d2e7      	bcs.n	8005216 <quorem+0xb2>
 8005246:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800524a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800524e:	b922      	cbnz	r2, 800525a <quorem+0xf6>
 8005250:	3b04      	subs	r3, #4
 8005252:	429d      	cmp	r5, r3
 8005254:	461a      	mov	r2, r3
 8005256:	d30a      	bcc.n	800526e <quorem+0x10a>
 8005258:	613c      	str	r4, [r7, #16]
 800525a:	4630      	mov	r0, r6
 800525c:	b003      	add	sp, #12
 800525e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005262:	6812      	ldr	r2, [r2, #0]
 8005264:	3b04      	subs	r3, #4
 8005266:	2a00      	cmp	r2, #0
 8005268:	d1cb      	bne.n	8005202 <quorem+0x9e>
 800526a:	3c01      	subs	r4, #1
 800526c:	e7c6      	b.n	80051fc <quorem+0x98>
 800526e:	6812      	ldr	r2, [r2, #0]
 8005270:	3b04      	subs	r3, #4
 8005272:	2a00      	cmp	r2, #0
 8005274:	d1f0      	bne.n	8005258 <quorem+0xf4>
 8005276:	3c01      	subs	r4, #1
 8005278:	e7eb      	b.n	8005252 <quorem+0xee>
 800527a:	2000      	movs	r0, #0
 800527c:	e7ee      	b.n	800525c <quorem+0xf8>
	...

08005280 <_dtoa_r>:
 8005280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005284:	4616      	mov	r6, r2
 8005286:	461f      	mov	r7, r3
 8005288:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800528a:	b099      	sub	sp, #100	; 0x64
 800528c:	4605      	mov	r5, r0
 800528e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005292:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005296:	b974      	cbnz	r4, 80052b6 <_dtoa_r+0x36>
 8005298:	2010      	movs	r0, #16
 800529a:	f000 fde3 	bl	8005e64 <malloc>
 800529e:	4602      	mov	r2, r0
 80052a0:	6268      	str	r0, [r5, #36]	; 0x24
 80052a2:	b920      	cbnz	r0, 80052ae <_dtoa_r+0x2e>
 80052a4:	21ea      	movs	r1, #234	; 0xea
 80052a6:	4bae      	ldr	r3, [pc, #696]	; (8005560 <_dtoa_r+0x2e0>)
 80052a8:	48ae      	ldr	r0, [pc, #696]	; (8005564 <_dtoa_r+0x2e4>)
 80052aa:	f001 fba1 	bl	80069f0 <__assert_func>
 80052ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80052b2:	6004      	str	r4, [r0, #0]
 80052b4:	60c4      	str	r4, [r0, #12]
 80052b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80052b8:	6819      	ldr	r1, [r3, #0]
 80052ba:	b151      	cbz	r1, 80052d2 <_dtoa_r+0x52>
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	2301      	movs	r3, #1
 80052c0:	4093      	lsls	r3, r2
 80052c2:	604a      	str	r2, [r1, #4]
 80052c4:	608b      	str	r3, [r1, #8]
 80052c6:	4628      	mov	r0, r5
 80052c8:	f000 fe30 	bl	8005f2c <_Bfree>
 80052cc:	2200      	movs	r2, #0
 80052ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	1e3b      	subs	r3, r7, #0
 80052d4:	bfaf      	iteee	ge
 80052d6:	2300      	movge	r3, #0
 80052d8:	2201      	movlt	r2, #1
 80052da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80052de:	9305      	strlt	r3, [sp, #20]
 80052e0:	bfa8      	it	ge
 80052e2:	f8c8 3000 	strge.w	r3, [r8]
 80052e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80052ea:	4b9f      	ldr	r3, [pc, #636]	; (8005568 <_dtoa_r+0x2e8>)
 80052ec:	bfb8      	it	lt
 80052ee:	f8c8 2000 	strlt.w	r2, [r8]
 80052f2:	ea33 0309 	bics.w	r3, r3, r9
 80052f6:	d119      	bne.n	800532c <_dtoa_r+0xac>
 80052f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80052fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005304:	4333      	orrs	r3, r6
 8005306:	f000 8580 	beq.w	8005e0a <_dtoa_r+0xb8a>
 800530a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800530c:	b953      	cbnz	r3, 8005324 <_dtoa_r+0xa4>
 800530e:	4b97      	ldr	r3, [pc, #604]	; (800556c <_dtoa_r+0x2ec>)
 8005310:	e022      	b.n	8005358 <_dtoa_r+0xd8>
 8005312:	4b97      	ldr	r3, [pc, #604]	; (8005570 <_dtoa_r+0x2f0>)
 8005314:	9308      	str	r3, [sp, #32]
 8005316:	3308      	adds	r3, #8
 8005318:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	9808      	ldr	r0, [sp, #32]
 800531e:	b019      	add	sp, #100	; 0x64
 8005320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005324:	4b91      	ldr	r3, [pc, #580]	; (800556c <_dtoa_r+0x2ec>)
 8005326:	9308      	str	r3, [sp, #32]
 8005328:	3303      	adds	r3, #3
 800532a:	e7f5      	b.n	8005318 <_dtoa_r+0x98>
 800532c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005330:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005334:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005338:	2200      	movs	r2, #0
 800533a:	2300      	movs	r3, #0
 800533c:	f7fb fb34 	bl	80009a8 <__aeabi_dcmpeq>
 8005340:	4680      	mov	r8, r0
 8005342:	b158      	cbz	r0, 800535c <_dtoa_r+0xdc>
 8005344:	2301      	movs	r3, #1
 8005346:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 8559 	beq.w	8005e04 <_dtoa_r+0xb84>
 8005352:	4888      	ldr	r0, [pc, #544]	; (8005574 <_dtoa_r+0x2f4>)
 8005354:	6018      	str	r0, [r3, #0]
 8005356:	1e43      	subs	r3, r0, #1
 8005358:	9308      	str	r3, [sp, #32]
 800535a:	e7df      	b.n	800531c <_dtoa_r+0x9c>
 800535c:	ab16      	add	r3, sp, #88	; 0x58
 800535e:	9301      	str	r3, [sp, #4]
 8005360:	ab17      	add	r3, sp, #92	; 0x5c
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	4628      	mov	r0, r5
 8005366:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800536a:	f001 f8c5 	bl	80064f8 <__d2b>
 800536e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005372:	4682      	mov	sl, r0
 8005374:	2c00      	cmp	r4, #0
 8005376:	d07e      	beq.n	8005476 <_dtoa_r+0x1f6>
 8005378:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800537c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800537e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005382:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005386:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800538a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800538e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005392:	2200      	movs	r2, #0
 8005394:	4b78      	ldr	r3, [pc, #480]	; (8005578 <_dtoa_r+0x2f8>)
 8005396:	f7fa fee7 	bl	8000168 <__aeabi_dsub>
 800539a:	a36b      	add	r3, pc, #428	; (adr r3, 8005548 <_dtoa_r+0x2c8>)
 800539c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a0:	f7fb f89a 	bl	80004d8 <__aeabi_dmul>
 80053a4:	a36a      	add	r3, pc, #424	; (adr r3, 8005550 <_dtoa_r+0x2d0>)
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	f7fa fedf 	bl	800016c <__adddf3>
 80053ae:	4606      	mov	r6, r0
 80053b0:	4620      	mov	r0, r4
 80053b2:	460f      	mov	r7, r1
 80053b4:	f7fb f826 	bl	8000404 <__aeabi_i2d>
 80053b8:	a367      	add	r3, pc, #412	; (adr r3, 8005558 <_dtoa_r+0x2d8>)
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	f7fb f88b 	bl	80004d8 <__aeabi_dmul>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4630      	mov	r0, r6
 80053c8:	4639      	mov	r1, r7
 80053ca:	f7fa fecf 	bl	800016c <__adddf3>
 80053ce:	4606      	mov	r6, r0
 80053d0:	460f      	mov	r7, r1
 80053d2:	f7fb fb31 	bl	8000a38 <__aeabi_d2iz>
 80053d6:	2200      	movs	r2, #0
 80053d8:	4681      	mov	r9, r0
 80053da:	2300      	movs	r3, #0
 80053dc:	4630      	mov	r0, r6
 80053de:	4639      	mov	r1, r7
 80053e0:	f7fb faec 	bl	80009bc <__aeabi_dcmplt>
 80053e4:	b148      	cbz	r0, 80053fa <_dtoa_r+0x17a>
 80053e6:	4648      	mov	r0, r9
 80053e8:	f7fb f80c 	bl	8000404 <__aeabi_i2d>
 80053ec:	4632      	mov	r2, r6
 80053ee:	463b      	mov	r3, r7
 80053f0:	f7fb fada 	bl	80009a8 <__aeabi_dcmpeq>
 80053f4:	b908      	cbnz	r0, 80053fa <_dtoa_r+0x17a>
 80053f6:	f109 39ff 	add.w	r9, r9, #4294967295
 80053fa:	f1b9 0f16 	cmp.w	r9, #22
 80053fe:	d857      	bhi.n	80054b0 <_dtoa_r+0x230>
 8005400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005404:	4b5d      	ldr	r3, [pc, #372]	; (800557c <_dtoa_r+0x2fc>)
 8005406:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540e:	f7fb fad5 	bl	80009bc <__aeabi_dcmplt>
 8005412:	2800      	cmp	r0, #0
 8005414:	d04e      	beq.n	80054b4 <_dtoa_r+0x234>
 8005416:	2300      	movs	r3, #0
 8005418:	f109 39ff 	add.w	r9, r9, #4294967295
 800541c:	930f      	str	r3, [sp, #60]	; 0x3c
 800541e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005420:	1b1c      	subs	r4, r3, r4
 8005422:	1e63      	subs	r3, r4, #1
 8005424:	9309      	str	r3, [sp, #36]	; 0x24
 8005426:	bf49      	itett	mi
 8005428:	f1c4 0301 	rsbmi	r3, r4, #1
 800542c:	2300      	movpl	r3, #0
 800542e:	9306      	strmi	r3, [sp, #24]
 8005430:	2300      	movmi	r3, #0
 8005432:	bf54      	ite	pl
 8005434:	9306      	strpl	r3, [sp, #24]
 8005436:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005438:	f1b9 0f00 	cmp.w	r9, #0
 800543c:	db3c      	blt.n	80054b8 <_dtoa_r+0x238>
 800543e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005440:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005444:	444b      	add	r3, r9
 8005446:	9309      	str	r3, [sp, #36]	; 0x24
 8005448:	2300      	movs	r3, #0
 800544a:	930a      	str	r3, [sp, #40]	; 0x28
 800544c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800544e:	2b09      	cmp	r3, #9
 8005450:	d86c      	bhi.n	800552c <_dtoa_r+0x2ac>
 8005452:	2b05      	cmp	r3, #5
 8005454:	bfc4      	itt	gt
 8005456:	3b04      	subgt	r3, #4
 8005458:	9322      	strgt	r3, [sp, #136]	; 0x88
 800545a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800545c:	bfc8      	it	gt
 800545e:	2400      	movgt	r4, #0
 8005460:	f1a3 0302 	sub.w	r3, r3, #2
 8005464:	bfd8      	it	le
 8005466:	2401      	movle	r4, #1
 8005468:	2b03      	cmp	r3, #3
 800546a:	f200 808b 	bhi.w	8005584 <_dtoa_r+0x304>
 800546e:	e8df f003 	tbb	[pc, r3]
 8005472:	4f2d      	.short	0x4f2d
 8005474:	5b4d      	.short	0x5b4d
 8005476:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800547a:	441c      	add	r4, r3
 800547c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005480:	2b20      	cmp	r3, #32
 8005482:	bfc3      	ittte	gt
 8005484:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005488:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800548c:	fa09 f303 	lslgt.w	r3, r9, r3
 8005490:	f1c3 0320 	rsble	r3, r3, #32
 8005494:	bfc6      	itte	gt
 8005496:	fa26 f000 	lsrgt.w	r0, r6, r0
 800549a:	4318      	orrgt	r0, r3
 800549c:	fa06 f003 	lslle.w	r0, r6, r3
 80054a0:	f7fa ffa0 	bl	80003e4 <__aeabi_ui2d>
 80054a4:	2301      	movs	r3, #1
 80054a6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80054aa:	3c01      	subs	r4, #1
 80054ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80054ae:	e770      	b.n	8005392 <_dtoa_r+0x112>
 80054b0:	2301      	movs	r3, #1
 80054b2:	e7b3      	b.n	800541c <_dtoa_r+0x19c>
 80054b4:	900f      	str	r0, [sp, #60]	; 0x3c
 80054b6:	e7b2      	b.n	800541e <_dtoa_r+0x19e>
 80054b8:	9b06      	ldr	r3, [sp, #24]
 80054ba:	eba3 0309 	sub.w	r3, r3, r9
 80054be:	9306      	str	r3, [sp, #24]
 80054c0:	f1c9 0300 	rsb	r3, r9, #0
 80054c4:	930a      	str	r3, [sp, #40]	; 0x28
 80054c6:	2300      	movs	r3, #0
 80054c8:	930e      	str	r3, [sp, #56]	; 0x38
 80054ca:	e7bf      	b.n	800544c <_dtoa_r+0x1cc>
 80054cc:	2300      	movs	r3, #0
 80054ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80054d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	dc59      	bgt.n	800558a <_dtoa_r+0x30a>
 80054d6:	f04f 0b01 	mov.w	fp, #1
 80054da:	465b      	mov	r3, fp
 80054dc:	f8cd b008 	str.w	fp, [sp, #8]
 80054e0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80054e4:	2200      	movs	r2, #0
 80054e6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80054e8:	6042      	str	r2, [r0, #4]
 80054ea:	2204      	movs	r2, #4
 80054ec:	f102 0614 	add.w	r6, r2, #20
 80054f0:	429e      	cmp	r6, r3
 80054f2:	6841      	ldr	r1, [r0, #4]
 80054f4:	d94f      	bls.n	8005596 <_dtoa_r+0x316>
 80054f6:	4628      	mov	r0, r5
 80054f8:	f000 fcd8 	bl	8005eac <_Balloc>
 80054fc:	9008      	str	r0, [sp, #32]
 80054fe:	2800      	cmp	r0, #0
 8005500:	d14d      	bne.n	800559e <_dtoa_r+0x31e>
 8005502:	4602      	mov	r2, r0
 8005504:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005508:	4b1d      	ldr	r3, [pc, #116]	; (8005580 <_dtoa_r+0x300>)
 800550a:	e6cd      	b.n	80052a8 <_dtoa_r+0x28>
 800550c:	2301      	movs	r3, #1
 800550e:	e7de      	b.n	80054ce <_dtoa_r+0x24e>
 8005510:	2300      	movs	r3, #0
 8005512:	930b      	str	r3, [sp, #44]	; 0x2c
 8005514:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005516:	eb09 0b03 	add.w	fp, r9, r3
 800551a:	f10b 0301 	add.w	r3, fp, #1
 800551e:	2b01      	cmp	r3, #1
 8005520:	9302      	str	r3, [sp, #8]
 8005522:	bfb8      	it	lt
 8005524:	2301      	movlt	r3, #1
 8005526:	e7dd      	b.n	80054e4 <_dtoa_r+0x264>
 8005528:	2301      	movs	r3, #1
 800552a:	e7f2      	b.n	8005512 <_dtoa_r+0x292>
 800552c:	2401      	movs	r4, #1
 800552e:	2300      	movs	r3, #0
 8005530:	940b      	str	r4, [sp, #44]	; 0x2c
 8005532:	9322      	str	r3, [sp, #136]	; 0x88
 8005534:	f04f 3bff 	mov.w	fp, #4294967295
 8005538:	2200      	movs	r2, #0
 800553a:	2312      	movs	r3, #18
 800553c:	f8cd b008 	str.w	fp, [sp, #8]
 8005540:	9223      	str	r2, [sp, #140]	; 0x8c
 8005542:	e7cf      	b.n	80054e4 <_dtoa_r+0x264>
 8005544:	f3af 8000 	nop.w
 8005548:	636f4361 	.word	0x636f4361
 800554c:	3fd287a7 	.word	0x3fd287a7
 8005550:	8b60c8b3 	.word	0x8b60c8b3
 8005554:	3fc68a28 	.word	0x3fc68a28
 8005558:	509f79fb 	.word	0x509f79fb
 800555c:	3fd34413 	.word	0x3fd34413
 8005560:	08008b3d 	.word	0x08008b3d
 8005564:	08008b54 	.word	0x08008b54
 8005568:	7ff00000 	.word	0x7ff00000
 800556c:	08008b39 	.word	0x08008b39
 8005570:	08008b30 	.word	0x08008b30
 8005574:	08008b0d 	.word	0x08008b0d
 8005578:	3ff80000 	.word	0x3ff80000
 800557c:	08008c50 	.word	0x08008c50
 8005580:	08008bb3 	.word	0x08008bb3
 8005584:	2301      	movs	r3, #1
 8005586:	930b      	str	r3, [sp, #44]	; 0x2c
 8005588:	e7d4      	b.n	8005534 <_dtoa_r+0x2b4>
 800558a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800558e:	465b      	mov	r3, fp
 8005590:	f8cd b008 	str.w	fp, [sp, #8]
 8005594:	e7a6      	b.n	80054e4 <_dtoa_r+0x264>
 8005596:	3101      	adds	r1, #1
 8005598:	6041      	str	r1, [r0, #4]
 800559a:	0052      	lsls	r2, r2, #1
 800559c:	e7a6      	b.n	80054ec <_dtoa_r+0x26c>
 800559e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80055a0:	9a08      	ldr	r2, [sp, #32]
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	9b02      	ldr	r3, [sp, #8]
 80055a6:	2b0e      	cmp	r3, #14
 80055a8:	f200 80a8 	bhi.w	80056fc <_dtoa_r+0x47c>
 80055ac:	2c00      	cmp	r4, #0
 80055ae:	f000 80a5 	beq.w	80056fc <_dtoa_r+0x47c>
 80055b2:	f1b9 0f00 	cmp.w	r9, #0
 80055b6:	dd34      	ble.n	8005622 <_dtoa_r+0x3a2>
 80055b8:	4a9a      	ldr	r2, [pc, #616]	; (8005824 <_dtoa_r+0x5a4>)
 80055ba:	f009 030f 	and.w	r3, r9, #15
 80055be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055c2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80055c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80055ce:	ea4f 1429 	mov.w	r4, r9, asr #4
 80055d2:	d016      	beq.n	8005602 <_dtoa_r+0x382>
 80055d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055d8:	4b93      	ldr	r3, [pc, #588]	; (8005828 <_dtoa_r+0x5a8>)
 80055da:	2703      	movs	r7, #3
 80055dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055e0:	f7fb f8a4 	bl	800072c <__aeabi_ddiv>
 80055e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055e8:	f004 040f 	and.w	r4, r4, #15
 80055ec:	4e8e      	ldr	r6, [pc, #568]	; (8005828 <_dtoa_r+0x5a8>)
 80055ee:	b954      	cbnz	r4, 8005606 <_dtoa_r+0x386>
 80055f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055f8:	f7fb f898 	bl	800072c <__aeabi_ddiv>
 80055fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005600:	e029      	b.n	8005656 <_dtoa_r+0x3d6>
 8005602:	2702      	movs	r7, #2
 8005604:	e7f2      	b.n	80055ec <_dtoa_r+0x36c>
 8005606:	07e1      	lsls	r1, r4, #31
 8005608:	d508      	bpl.n	800561c <_dtoa_r+0x39c>
 800560a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800560e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005612:	f7fa ff61 	bl	80004d8 <__aeabi_dmul>
 8005616:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800561a:	3701      	adds	r7, #1
 800561c:	1064      	asrs	r4, r4, #1
 800561e:	3608      	adds	r6, #8
 8005620:	e7e5      	b.n	80055ee <_dtoa_r+0x36e>
 8005622:	f000 80a5 	beq.w	8005770 <_dtoa_r+0x4f0>
 8005626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800562a:	f1c9 0400 	rsb	r4, r9, #0
 800562e:	4b7d      	ldr	r3, [pc, #500]	; (8005824 <_dtoa_r+0x5a4>)
 8005630:	f004 020f 	and.w	r2, r4, #15
 8005634:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f7fa ff4c 	bl	80004d8 <__aeabi_dmul>
 8005640:	2702      	movs	r7, #2
 8005642:	2300      	movs	r3, #0
 8005644:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005648:	4e77      	ldr	r6, [pc, #476]	; (8005828 <_dtoa_r+0x5a8>)
 800564a:	1124      	asrs	r4, r4, #4
 800564c:	2c00      	cmp	r4, #0
 800564e:	f040 8084 	bne.w	800575a <_dtoa_r+0x4da>
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1d2      	bne.n	80055fc <_dtoa_r+0x37c>
 8005656:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 808b 	beq.w	8005774 <_dtoa_r+0x4f4>
 800565e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005662:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005666:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800566a:	2200      	movs	r2, #0
 800566c:	4b6f      	ldr	r3, [pc, #444]	; (800582c <_dtoa_r+0x5ac>)
 800566e:	f7fb f9a5 	bl	80009bc <__aeabi_dcmplt>
 8005672:	2800      	cmp	r0, #0
 8005674:	d07e      	beq.n	8005774 <_dtoa_r+0x4f4>
 8005676:	9b02      	ldr	r3, [sp, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d07b      	beq.n	8005774 <_dtoa_r+0x4f4>
 800567c:	f1bb 0f00 	cmp.w	fp, #0
 8005680:	dd38      	ble.n	80056f4 <_dtoa_r+0x474>
 8005682:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005686:	2200      	movs	r2, #0
 8005688:	4b69      	ldr	r3, [pc, #420]	; (8005830 <_dtoa_r+0x5b0>)
 800568a:	f7fa ff25 	bl	80004d8 <__aeabi_dmul>
 800568e:	465c      	mov	r4, fp
 8005690:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005694:	f109 38ff 	add.w	r8, r9, #4294967295
 8005698:	3701      	adds	r7, #1
 800569a:	4638      	mov	r0, r7
 800569c:	f7fa feb2 	bl	8000404 <__aeabi_i2d>
 80056a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056a4:	f7fa ff18 	bl	80004d8 <__aeabi_dmul>
 80056a8:	2200      	movs	r2, #0
 80056aa:	4b62      	ldr	r3, [pc, #392]	; (8005834 <_dtoa_r+0x5b4>)
 80056ac:	f7fa fd5e 	bl	800016c <__adddf3>
 80056b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80056b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056b8:	9611      	str	r6, [sp, #68]	; 0x44
 80056ba:	2c00      	cmp	r4, #0
 80056bc:	d15d      	bne.n	800577a <_dtoa_r+0x4fa>
 80056be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056c2:	2200      	movs	r2, #0
 80056c4:	4b5c      	ldr	r3, [pc, #368]	; (8005838 <_dtoa_r+0x5b8>)
 80056c6:	f7fa fd4f 	bl	8000168 <__aeabi_dsub>
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80056d2:	4633      	mov	r3, r6
 80056d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80056d6:	f7fb f98f 	bl	80009f8 <__aeabi_dcmpgt>
 80056da:	2800      	cmp	r0, #0
 80056dc:	f040 829e 	bne.w	8005c1c <_dtoa_r+0x99c>
 80056e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80056e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80056ea:	f7fb f967 	bl	80009bc <__aeabi_dcmplt>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	f040 8292 	bne.w	8005c18 <_dtoa_r+0x998>
 80056f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80056f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80056fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f2c0 8153 	blt.w	80059aa <_dtoa_r+0x72a>
 8005704:	f1b9 0f0e 	cmp.w	r9, #14
 8005708:	f300 814f 	bgt.w	80059aa <_dtoa_r+0x72a>
 800570c:	4b45      	ldr	r3, [pc, #276]	; (8005824 <_dtoa_r+0x5a4>)
 800570e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005712:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005716:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800571a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800571c:	2b00      	cmp	r3, #0
 800571e:	f280 80db 	bge.w	80058d8 <_dtoa_r+0x658>
 8005722:	9b02      	ldr	r3, [sp, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	f300 80d7 	bgt.w	80058d8 <_dtoa_r+0x658>
 800572a:	f040 8274 	bne.w	8005c16 <_dtoa_r+0x996>
 800572e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005732:	2200      	movs	r2, #0
 8005734:	4b40      	ldr	r3, [pc, #256]	; (8005838 <_dtoa_r+0x5b8>)
 8005736:	f7fa fecf 	bl	80004d8 <__aeabi_dmul>
 800573a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800573e:	f7fb f951 	bl	80009e4 <__aeabi_dcmpge>
 8005742:	9c02      	ldr	r4, [sp, #8]
 8005744:	4626      	mov	r6, r4
 8005746:	2800      	cmp	r0, #0
 8005748:	f040 824a 	bne.w	8005be0 <_dtoa_r+0x960>
 800574c:	2331      	movs	r3, #49	; 0x31
 800574e:	9f08      	ldr	r7, [sp, #32]
 8005750:	f109 0901 	add.w	r9, r9, #1
 8005754:	f807 3b01 	strb.w	r3, [r7], #1
 8005758:	e246      	b.n	8005be8 <_dtoa_r+0x968>
 800575a:	07e2      	lsls	r2, r4, #31
 800575c:	d505      	bpl.n	800576a <_dtoa_r+0x4ea>
 800575e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005762:	f7fa feb9 	bl	80004d8 <__aeabi_dmul>
 8005766:	2301      	movs	r3, #1
 8005768:	3701      	adds	r7, #1
 800576a:	1064      	asrs	r4, r4, #1
 800576c:	3608      	adds	r6, #8
 800576e:	e76d      	b.n	800564c <_dtoa_r+0x3cc>
 8005770:	2702      	movs	r7, #2
 8005772:	e770      	b.n	8005656 <_dtoa_r+0x3d6>
 8005774:	46c8      	mov	r8, r9
 8005776:	9c02      	ldr	r4, [sp, #8]
 8005778:	e78f      	b.n	800569a <_dtoa_r+0x41a>
 800577a:	9908      	ldr	r1, [sp, #32]
 800577c:	4b29      	ldr	r3, [pc, #164]	; (8005824 <_dtoa_r+0x5a4>)
 800577e:	4421      	add	r1, r4
 8005780:	9112      	str	r1, [sp, #72]	; 0x48
 8005782:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005784:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005788:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800578c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005790:	2900      	cmp	r1, #0
 8005792:	d055      	beq.n	8005840 <_dtoa_r+0x5c0>
 8005794:	2000      	movs	r0, #0
 8005796:	4929      	ldr	r1, [pc, #164]	; (800583c <_dtoa_r+0x5bc>)
 8005798:	f7fa ffc8 	bl	800072c <__aeabi_ddiv>
 800579c:	463b      	mov	r3, r7
 800579e:	4632      	mov	r2, r6
 80057a0:	f7fa fce2 	bl	8000168 <__aeabi_dsub>
 80057a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057a8:	9f08      	ldr	r7, [sp, #32]
 80057aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057ae:	f7fb f943 	bl	8000a38 <__aeabi_d2iz>
 80057b2:	4604      	mov	r4, r0
 80057b4:	f7fa fe26 	bl	8000404 <__aeabi_i2d>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057c0:	f7fa fcd2 	bl	8000168 <__aeabi_dsub>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	3430      	adds	r4, #48	; 0x30
 80057ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057d2:	f807 4b01 	strb.w	r4, [r7], #1
 80057d6:	f7fb f8f1 	bl	80009bc <__aeabi_dcmplt>
 80057da:	2800      	cmp	r0, #0
 80057dc:	d174      	bne.n	80058c8 <_dtoa_r+0x648>
 80057de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057e2:	2000      	movs	r0, #0
 80057e4:	4911      	ldr	r1, [pc, #68]	; (800582c <_dtoa_r+0x5ac>)
 80057e6:	f7fa fcbf 	bl	8000168 <__aeabi_dsub>
 80057ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057ee:	f7fb f8e5 	bl	80009bc <__aeabi_dcmplt>
 80057f2:	2800      	cmp	r0, #0
 80057f4:	f040 80b6 	bne.w	8005964 <_dtoa_r+0x6e4>
 80057f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057fa:	429f      	cmp	r7, r3
 80057fc:	f43f af7a 	beq.w	80056f4 <_dtoa_r+0x474>
 8005800:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005804:	2200      	movs	r2, #0
 8005806:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <_dtoa_r+0x5b0>)
 8005808:	f7fa fe66 	bl	80004d8 <__aeabi_dmul>
 800580c:	2200      	movs	r2, #0
 800580e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005812:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005816:	4b06      	ldr	r3, [pc, #24]	; (8005830 <_dtoa_r+0x5b0>)
 8005818:	f7fa fe5e 	bl	80004d8 <__aeabi_dmul>
 800581c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005820:	e7c3      	b.n	80057aa <_dtoa_r+0x52a>
 8005822:	bf00      	nop
 8005824:	08008c50 	.word	0x08008c50
 8005828:	08008c28 	.word	0x08008c28
 800582c:	3ff00000 	.word	0x3ff00000
 8005830:	40240000 	.word	0x40240000
 8005834:	401c0000 	.word	0x401c0000
 8005838:	40140000 	.word	0x40140000
 800583c:	3fe00000 	.word	0x3fe00000
 8005840:	4630      	mov	r0, r6
 8005842:	4639      	mov	r1, r7
 8005844:	f7fa fe48 	bl	80004d8 <__aeabi_dmul>
 8005848:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800584a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800584e:	9c08      	ldr	r4, [sp, #32]
 8005850:	9314      	str	r3, [sp, #80]	; 0x50
 8005852:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005856:	f7fb f8ef 	bl	8000a38 <__aeabi_d2iz>
 800585a:	9015      	str	r0, [sp, #84]	; 0x54
 800585c:	f7fa fdd2 	bl	8000404 <__aeabi_i2d>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005868:	f7fa fc7e 	bl	8000168 <__aeabi_dsub>
 800586c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800586e:	4606      	mov	r6, r0
 8005870:	3330      	adds	r3, #48	; 0x30
 8005872:	f804 3b01 	strb.w	r3, [r4], #1
 8005876:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005878:	460f      	mov	r7, r1
 800587a:	429c      	cmp	r4, r3
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	d124      	bne.n	80058cc <_dtoa_r+0x64c>
 8005882:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005886:	4bb3      	ldr	r3, [pc, #716]	; (8005b54 <_dtoa_r+0x8d4>)
 8005888:	f7fa fc70 	bl	800016c <__adddf3>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4630      	mov	r0, r6
 8005892:	4639      	mov	r1, r7
 8005894:	f7fb f8b0 	bl	80009f8 <__aeabi_dcmpgt>
 8005898:	2800      	cmp	r0, #0
 800589a:	d162      	bne.n	8005962 <_dtoa_r+0x6e2>
 800589c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058a0:	2000      	movs	r0, #0
 80058a2:	49ac      	ldr	r1, [pc, #688]	; (8005b54 <_dtoa_r+0x8d4>)
 80058a4:	f7fa fc60 	bl	8000168 <__aeabi_dsub>
 80058a8:	4602      	mov	r2, r0
 80058aa:	460b      	mov	r3, r1
 80058ac:	4630      	mov	r0, r6
 80058ae:	4639      	mov	r1, r7
 80058b0:	f7fb f884 	bl	80009bc <__aeabi_dcmplt>
 80058b4:	2800      	cmp	r0, #0
 80058b6:	f43f af1d 	beq.w	80056f4 <_dtoa_r+0x474>
 80058ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80058bc:	1e7b      	subs	r3, r7, #1
 80058be:	9314      	str	r3, [sp, #80]	; 0x50
 80058c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80058c4:	2b30      	cmp	r3, #48	; 0x30
 80058c6:	d0f8      	beq.n	80058ba <_dtoa_r+0x63a>
 80058c8:	46c1      	mov	r9, r8
 80058ca:	e03a      	b.n	8005942 <_dtoa_r+0x6c2>
 80058cc:	4ba2      	ldr	r3, [pc, #648]	; (8005b58 <_dtoa_r+0x8d8>)
 80058ce:	f7fa fe03 	bl	80004d8 <__aeabi_dmul>
 80058d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058d6:	e7bc      	b.n	8005852 <_dtoa_r+0x5d2>
 80058d8:	9f08      	ldr	r7, [sp, #32]
 80058da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058e2:	f7fa ff23 	bl	800072c <__aeabi_ddiv>
 80058e6:	f7fb f8a7 	bl	8000a38 <__aeabi_d2iz>
 80058ea:	4604      	mov	r4, r0
 80058ec:	f7fa fd8a 	bl	8000404 <__aeabi_i2d>
 80058f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058f4:	f7fa fdf0 	bl	80004d8 <__aeabi_dmul>
 80058f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80058fc:	460b      	mov	r3, r1
 80058fe:	4602      	mov	r2, r0
 8005900:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005904:	f7fa fc30 	bl	8000168 <__aeabi_dsub>
 8005908:	f807 6b01 	strb.w	r6, [r7], #1
 800590c:	9e08      	ldr	r6, [sp, #32]
 800590e:	9b02      	ldr	r3, [sp, #8]
 8005910:	1bbe      	subs	r6, r7, r6
 8005912:	42b3      	cmp	r3, r6
 8005914:	d13a      	bne.n	800598c <_dtoa_r+0x70c>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	f7fa fc27 	bl	800016c <__adddf3>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005926:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800592a:	f7fb f865 	bl	80009f8 <__aeabi_dcmpgt>
 800592e:	bb58      	cbnz	r0, 8005988 <_dtoa_r+0x708>
 8005930:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005934:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005938:	f7fb f836 	bl	80009a8 <__aeabi_dcmpeq>
 800593c:	b108      	cbz	r0, 8005942 <_dtoa_r+0x6c2>
 800593e:	07e1      	lsls	r1, r4, #31
 8005940:	d422      	bmi.n	8005988 <_dtoa_r+0x708>
 8005942:	4628      	mov	r0, r5
 8005944:	4651      	mov	r1, sl
 8005946:	f000 faf1 	bl	8005f2c <_Bfree>
 800594a:	2300      	movs	r3, #0
 800594c:	703b      	strb	r3, [r7, #0]
 800594e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005950:	f109 0001 	add.w	r0, r9, #1
 8005954:	6018      	str	r0, [r3, #0]
 8005956:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005958:	2b00      	cmp	r3, #0
 800595a:	f43f acdf 	beq.w	800531c <_dtoa_r+0x9c>
 800595e:	601f      	str	r7, [r3, #0]
 8005960:	e4dc      	b.n	800531c <_dtoa_r+0x9c>
 8005962:	4627      	mov	r7, r4
 8005964:	463b      	mov	r3, r7
 8005966:	461f      	mov	r7, r3
 8005968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800596c:	2a39      	cmp	r2, #57	; 0x39
 800596e:	d107      	bne.n	8005980 <_dtoa_r+0x700>
 8005970:	9a08      	ldr	r2, [sp, #32]
 8005972:	429a      	cmp	r2, r3
 8005974:	d1f7      	bne.n	8005966 <_dtoa_r+0x6e6>
 8005976:	2230      	movs	r2, #48	; 0x30
 8005978:	9908      	ldr	r1, [sp, #32]
 800597a:	f108 0801 	add.w	r8, r8, #1
 800597e:	700a      	strb	r2, [r1, #0]
 8005980:	781a      	ldrb	r2, [r3, #0]
 8005982:	3201      	adds	r2, #1
 8005984:	701a      	strb	r2, [r3, #0]
 8005986:	e79f      	b.n	80058c8 <_dtoa_r+0x648>
 8005988:	46c8      	mov	r8, r9
 800598a:	e7eb      	b.n	8005964 <_dtoa_r+0x6e4>
 800598c:	2200      	movs	r2, #0
 800598e:	4b72      	ldr	r3, [pc, #456]	; (8005b58 <_dtoa_r+0x8d8>)
 8005990:	f7fa fda2 	bl	80004d8 <__aeabi_dmul>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800599c:	2200      	movs	r2, #0
 800599e:	2300      	movs	r3, #0
 80059a0:	f7fb f802 	bl	80009a8 <__aeabi_dcmpeq>
 80059a4:	2800      	cmp	r0, #0
 80059a6:	d098      	beq.n	80058da <_dtoa_r+0x65a>
 80059a8:	e7cb      	b.n	8005942 <_dtoa_r+0x6c2>
 80059aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059ac:	2a00      	cmp	r2, #0
 80059ae:	f000 80cd 	beq.w	8005b4c <_dtoa_r+0x8cc>
 80059b2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80059b4:	2a01      	cmp	r2, #1
 80059b6:	f300 80af 	bgt.w	8005b18 <_dtoa_r+0x898>
 80059ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80059bc:	2a00      	cmp	r2, #0
 80059be:	f000 80a7 	beq.w	8005b10 <_dtoa_r+0x890>
 80059c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80059c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80059c8:	9f06      	ldr	r7, [sp, #24]
 80059ca:	9a06      	ldr	r2, [sp, #24]
 80059cc:	2101      	movs	r1, #1
 80059ce:	441a      	add	r2, r3
 80059d0:	9206      	str	r2, [sp, #24]
 80059d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059d4:	4628      	mov	r0, r5
 80059d6:	441a      	add	r2, r3
 80059d8:	9209      	str	r2, [sp, #36]	; 0x24
 80059da:	f000 fb61 	bl	80060a0 <__i2b>
 80059de:	4606      	mov	r6, r0
 80059e0:	2f00      	cmp	r7, #0
 80059e2:	dd0c      	ble.n	80059fe <_dtoa_r+0x77e>
 80059e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	dd09      	ble.n	80059fe <_dtoa_r+0x77e>
 80059ea:	42bb      	cmp	r3, r7
 80059ec:	bfa8      	it	ge
 80059ee:	463b      	movge	r3, r7
 80059f0:	9a06      	ldr	r2, [sp, #24]
 80059f2:	1aff      	subs	r7, r7, r3
 80059f4:	1ad2      	subs	r2, r2, r3
 80059f6:	9206      	str	r2, [sp, #24]
 80059f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	9309      	str	r3, [sp, #36]	; 0x24
 80059fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a00:	b1f3      	cbz	r3, 8005a40 <_dtoa_r+0x7c0>
 8005a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 80a9 	beq.w	8005b5c <_dtoa_r+0x8dc>
 8005a0a:	2c00      	cmp	r4, #0
 8005a0c:	dd10      	ble.n	8005a30 <_dtoa_r+0x7b0>
 8005a0e:	4631      	mov	r1, r6
 8005a10:	4622      	mov	r2, r4
 8005a12:	4628      	mov	r0, r5
 8005a14:	f000 fbfe 	bl	8006214 <__pow5mult>
 8005a18:	4652      	mov	r2, sl
 8005a1a:	4601      	mov	r1, r0
 8005a1c:	4606      	mov	r6, r0
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f000 fb54 	bl	80060cc <__multiply>
 8005a24:	4680      	mov	r8, r0
 8005a26:	4651      	mov	r1, sl
 8005a28:	4628      	mov	r0, r5
 8005a2a:	f000 fa7f 	bl	8005f2c <_Bfree>
 8005a2e:	46c2      	mov	sl, r8
 8005a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a32:	1b1a      	subs	r2, r3, r4
 8005a34:	d004      	beq.n	8005a40 <_dtoa_r+0x7c0>
 8005a36:	4651      	mov	r1, sl
 8005a38:	4628      	mov	r0, r5
 8005a3a:	f000 fbeb 	bl	8006214 <__pow5mult>
 8005a3e:	4682      	mov	sl, r0
 8005a40:	2101      	movs	r1, #1
 8005a42:	4628      	mov	r0, r5
 8005a44:	f000 fb2c 	bl	80060a0 <__i2b>
 8005a48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f340 8087 	ble.w	8005b60 <_dtoa_r+0x8e0>
 8005a52:	461a      	mov	r2, r3
 8005a54:	4601      	mov	r1, r0
 8005a56:	4628      	mov	r0, r5
 8005a58:	f000 fbdc 	bl	8006214 <__pow5mult>
 8005a5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a5e:	4604      	mov	r4, r0
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	f340 8080 	ble.w	8005b66 <_dtoa_r+0x8e6>
 8005a66:	f04f 0800 	mov.w	r8, #0
 8005a6a:	6923      	ldr	r3, [r4, #16]
 8005a6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005a70:	6918      	ldr	r0, [r3, #16]
 8005a72:	f000 fac7 	bl	8006004 <__hi0bits>
 8005a76:	f1c0 0020 	rsb	r0, r0, #32
 8005a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a7c:	4418      	add	r0, r3
 8005a7e:	f010 001f 	ands.w	r0, r0, #31
 8005a82:	f000 8092 	beq.w	8005baa <_dtoa_r+0x92a>
 8005a86:	f1c0 0320 	rsb	r3, r0, #32
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	f340 808a 	ble.w	8005ba4 <_dtoa_r+0x924>
 8005a90:	f1c0 001c 	rsb	r0, r0, #28
 8005a94:	9b06      	ldr	r3, [sp, #24]
 8005a96:	4407      	add	r7, r0
 8005a98:	4403      	add	r3, r0
 8005a9a:	9306      	str	r3, [sp, #24]
 8005a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a9e:	4403      	add	r3, r0
 8005aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa2:	9b06      	ldr	r3, [sp, #24]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	dd05      	ble.n	8005ab4 <_dtoa_r+0x834>
 8005aa8:	4651      	mov	r1, sl
 8005aaa:	461a      	mov	r2, r3
 8005aac:	4628      	mov	r0, r5
 8005aae:	f000 fc0b 	bl	80062c8 <__lshift>
 8005ab2:	4682      	mov	sl, r0
 8005ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	dd05      	ble.n	8005ac6 <_dtoa_r+0x846>
 8005aba:	4621      	mov	r1, r4
 8005abc:	461a      	mov	r2, r3
 8005abe:	4628      	mov	r0, r5
 8005ac0:	f000 fc02 	bl	80062c8 <__lshift>
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d070      	beq.n	8005bae <_dtoa_r+0x92e>
 8005acc:	4621      	mov	r1, r4
 8005ace:	4650      	mov	r0, sl
 8005ad0:	f000 fc66 	bl	80063a0 <__mcmp>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	da6a      	bge.n	8005bae <_dtoa_r+0x92e>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	4651      	mov	r1, sl
 8005adc:	220a      	movs	r2, #10
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f000 fa46 	bl	8005f70 <__multadd>
 8005ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ae6:	4682      	mov	sl, r0
 8005ae8:	f109 39ff 	add.w	r9, r9, #4294967295
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 8193 	beq.w	8005e18 <_dtoa_r+0xb98>
 8005af2:	4631      	mov	r1, r6
 8005af4:	2300      	movs	r3, #0
 8005af6:	220a      	movs	r2, #10
 8005af8:	4628      	mov	r0, r5
 8005afa:	f000 fa39 	bl	8005f70 <__multadd>
 8005afe:	f1bb 0f00 	cmp.w	fp, #0
 8005b02:	4606      	mov	r6, r0
 8005b04:	f300 8093 	bgt.w	8005c2e <_dtoa_r+0x9ae>
 8005b08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	dc57      	bgt.n	8005bbe <_dtoa_r+0x93e>
 8005b0e:	e08e      	b.n	8005c2e <_dtoa_r+0x9ae>
 8005b10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b12:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b16:	e756      	b.n	80059c6 <_dtoa_r+0x746>
 8005b18:	9b02      	ldr	r3, [sp, #8]
 8005b1a:	1e5c      	subs	r4, r3, #1
 8005b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b1e:	42a3      	cmp	r3, r4
 8005b20:	bfb7      	itett	lt
 8005b22:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005b24:	1b1c      	subge	r4, r3, r4
 8005b26:	1ae2      	sublt	r2, r4, r3
 8005b28:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005b2a:	bfbe      	ittt	lt
 8005b2c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005b2e:	189b      	addlt	r3, r3, r2
 8005b30:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005b32:	9b02      	ldr	r3, [sp, #8]
 8005b34:	bfb8      	it	lt
 8005b36:	2400      	movlt	r4, #0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	bfbb      	ittet	lt
 8005b3c:	9b06      	ldrlt	r3, [sp, #24]
 8005b3e:	9a02      	ldrlt	r2, [sp, #8]
 8005b40:	9f06      	ldrge	r7, [sp, #24]
 8005b42:	1a9f      	sublt	r7, r3, r2
 8005b44:	bfac      	ite	ge
 8005b46:	9b02      	ldrge	r3, [sp, #8]
 8005b48:	2300      	movlt	r3, #0
 8005b4a:	e73e      	b.n	80059ca <_dtoa_r+0x74a>
 8005b4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005b4e:	9f06      	ldr	r7, [sp, #24]
 8005b50:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005b52:	e745      	b.n	80059e0 <_dtoa_r+0x760>
 8005b54:	3fe00000 	.word	0x3fe00000
 8005b58:	40240000 	.word	0x40240000
 8005b5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b5e:	e76a      	b.n	8005a36 <_dtoa_r+0x7b6>
 8005b60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	dc19      	bgt.n	8005b9a <_dtoa_r+0x91a>
 8005b66:	9b04      	ldr	r3, [sp, #16]
 8005b68:	b9bb      	cbnz	r3, 8005b9a <_dtoa_r+0x91a>
 8005b6a:	9b05      	ldr	r3, [sp, #20]
 8005b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b70:	b99b      	cbnz	r3, 8005b9a <_dtoa_r+0x91a>
 8005b72:	9b05      	ldr	r3, [sp, #20]
 8005b74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b78:	0d1b      	lsrs	r3, r3, #20
 8005b7a:	051b      	lsls	r3, r3, #20
 8005b7c:	b183      	cbz	r3, 8005ba0 <_dtoa_r+0x920>
 8005b7e:	f04f 0801 	mov.w	r8, #1
 8005b82:	9b06      	ldr	r3, [sp, #24]
 8005b84:	3301      	adds	r3, #1
 8005b86:	9306      	str	r3, [sp, #24]
 8005b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f47f af6a 	bne.w	8005a6a <_dtoa_r+0x7ea>
 8005b96:	2001      	movs	r0, #1
 8005b98:	e76f      	b.n	8005a7a <_dtoa_r+0x7fa>
 8005b9a:	f04f 0800 	mov.w	r8, #0
 8005b9e:	e7f6      	b.n	8005b8e <_dtoa_r+0x90e>
 8005ba0:	4698      	mov	r8, r3
 8005ba2:	e7f4      	b.n	8005b8e <_dtoa_r+0x90e>
 8005ba4:	f43f af7d 	beq.w	8005aa2 <_dtoa_r+0x822>
 8005ba8:	4618      	mov	r0, r3
 8005baa:	301c      	adds	r0, #28
 8005bac:	e772      	b.n	8005a94 <_dtoa_r+0x814>
 8005bae:	9b02      	ldr	r3, [sp, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	dc36      	bgt.n	8005c22 <_dtoa_r+0x9a2>
 8005bb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	dd33      	ble.n	8005c22 <_dtoa_r+0x9a2>
 8005bba:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005bbe:	f1bb 0f00 	cmp.w	fp, #0
 8005bc2:	d10d      	bne.n	8005be0 <_dtoa_r+0x960>
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	465b      	mov	r3, fp
 8005bc8:	2205      	movs	r2, #5
 8005bca:	4628      	mov	r0, r5
 8005bcc:	f000 f9d0 	bl	8005f70 <__multadd>
 8005bd0:	4601      	mov	r1, r0
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	4650      	mov	r0, sl
 8005bd6:	f000 fbe3 	bl	80063a0 <__mcmp>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	f73f adb6 	bgt.w	800574c <_dtoa_r+0x4cc>
 8005be0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005be2:	9f08      	ldr	r7, [sp, #32]
 8005be4:	ea6f 0903 	mvn.w	r9, r3
 8005be8:	f04f 0800 	mov.w	r8, #0
 8005bec:	4621      	mov	r1, r4
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f000 f99c 	bl	8005f2c <_Bfree>
 8005bf4:	2e00      	cmp	r6, #0
 8005bf6:	f43f aea4 	beq.w	8005942 <_dtoa_r+0x6c2>
 8005bfa:	f1b8 0f00 	cmp.w	r8, #0
 8005bfe:	d005      	beq.n	8005c0c <_dtoa_r+0x98c>
 8005c00:	45b0      	cmp	r8, r6
 8005c02:	d003      	beq.n	8005c0c <_dtoa_r+0x98c>
 8005c04:	4641      	mov	r1, r8
 8005c06:	4628      	mov	r0, r5
 8005c08:	f000 f990 	bl	8005f2c <_Bfree>
 8005c0c:	4631      	mov	r1, r6
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f000 f98c 	bl	8005f2c <_Bfree>
 8005c14:	e695      	b.n	8005942 <_dtoa_r+0x6c2>
 8005c16:	2400      	movs	r4, #0
 8005c18:	4626      	mov	r6, r4
 8005c1a:	e7e1      	b.n	8005be0 <_dtoa_r+0x960>
 8005c1c:	46c1      	mov	r9, r8
 8005c1e:	4626      	mov	r6, r4
 8005c20:	e594      	b.n	800574c <_dtoa_r+0x4cc>
 8005c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c24:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 80fc 	beq.w	8005e26 <_dtoa_r+0xba6>
 8005c2e:	2f00      	cmp	r7, #0
 8005c30:	dd05      	ble.n	8005c3e <_dtoa_r+0x9be>
 8005c32:	4631      	mov	r1, r6
 8005c34:	463a      	mov	r2, r7
 8005c36:	4628      	mov	r0, r5
 8005c38:	f000 fb46 	bl	80062c8 <__lshift>
 8005c3c:	4606      	mov	r6, r0
 8005c3e:	f1b8 0f00 	cmp.w	r8, #0
 8005c42:	d05c      	beq.n	8005cfe <_dtoa_r+0xa7e>
 8005c44:	4628      	mov	r0, r5
 8005c46:	6871      	ldr	r1, [r6, #4]
 8005c48:	f000 f930 	bl	8005eac <_Balloc>
 8005c4c:	4607      	mov	r7, r0
 8005c4e:	b928      	cbnz	r0, 8005c5c <_dtoa_r+0x9dc>
 8005c50:	4602      	mov	r2, r0
 8005c52:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c56:	4b7e      	ldr	r3, [pc, #504]	; (8005e50 <_dtoa_r+0xbd0>)
 8005c58:	f7ff bb26 	b.w	80052a8 <_dtoa_r+0x28>
 8005c5c:	6932      	ldr	r2, [r6, #16]
 8005c5e:	f106 010c 	add.w	r1, r6, #12
 8005c62:	3202      	adds	r2, #2
 8005c64:	0092      	lsls	r2, r2, #2
 8005c66:	300c      	adds	r0, #12
 8005c68:	f000 f912 	bl	8005e90 <memcpy>
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	4639      	mov	r1, r7
 8005c70:	4628      	mov	r0, r5
 8005c72:	f000 fb29 	bl	80062c8 <__lshift>
 8005c76:	46b0      	mov	r8, r6
 8005c78:	4606      	mov	r6, r0
 8005c7a:	9b08      	ldr	r3, [sp, #32]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	9302      	str	r3, [sp, #8]
 8005c80:	9b08      	ldr	r3, [sp, #32]
 8005c82:	445b      	add	r3, fp
 8005c84:	930a      	str	r3, [sp, #40]	; 0x28
 8005c86:	9b04      	ldr	r3, [sp, #16]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c8e:	9b02      	ldr	r3, [sp, #8]
 8005c90:	4621      	mov	r1, r4
 8005c92:	4650      	mov	r0, sl
 8005c94:	f103 3bff 	add.w	fp, r3, #4294967295
 8005c98:	f7ff fa64 	bl	8005164 <quorem>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	4641      	mov	r1, r8
 8005ca0:	3330      	adds	r3, #48	; 0x30
 8005ca2:	9004      	str	r0, [sp, #16]
 8005ca4:	4650      	mov	r0, sl
 8005ca6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ca8:	f000 fb7a 	bl	80063a0 <__mcmp>
 8005cac:	4632      	mov	r2, r6
 8005cae:	9006      	str	r0, [sp, #24]
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	f000 fb90 	bl	80063d8 <__mdiff>
 8005cb8:	68c2      	ldr	r2, [r0, #12]
 8005cba:	4607      	mov	r7, r0
 8005cbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cbe:	bb02      	cbnz	r2, 8005d02 <_dtoa_r+0xa82>
 8005cc0:	4601      	mov	r1, r0
 8005cc2:	4650      	mov	r0, sl
 8005cc4:	f000 fb6c 	bl	80063a0 <__mcmp>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ccc:	4639      	mov	r1, r7
 8005cce:	4628      	mov	r0, r5
 8005cd0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005cd4:	f000 f92a 	bl	8005f2c <_Bfree>
 8005cd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cdc:	9f02      	ldr	r7, [sp, #8]
 8005cde:	ea43 0102 	orr.w	r1, r3, r2
 8005ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce4:	430b      	orrs	r3, r1
 8005ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ce8:	d10d      	bne.n	8005d06 <_dtoa_r+0xa86>
 8005cea:	2b39      	cmp	r3, #57	; 0x39
 8005cec:	d027      	beq.n	8005d3e <_dtoa_r+0xabe>
 8005cee:	9a06      	ldr	r2, [sp, #24]
 8005cf0:	2a00      	cmp	r2, #0
 8005cf2:	dd01      	ble.n	8005cf8 <_dtoa_r+0xa78>
 8005cf4:	9b04      	ldr	r3, [sp, #16]
 8005cf6:	3331      	adds	r3, #49	; 0x31
 8005cf8:	f88b 3000 	strb.w	r3, [fp]
 8005cfc:	e776      	b.n	8005bec <_dtoa_r+0x96c>
 8005cfe:	4630      	mov	r0, r6
 8005d00:	e7b9      	b.n	8005c76 <_dtoa_r+0x9f6>
 8005d02:	2201      	movs	r2, #1
 8005d04:	e7e2      	b.n	8005ccc <_dtoa_r+0xa4c>
 8005d06:	9906      	ldr	r1, [sp, #24]
 8005d08:	2900      	cmp	r1, #0
 8005d0a:	db04      	blt.n	8005d16 <_dtoa_r+0xa96>
 8005d0c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005d0e:	4301      	orrs	r1, r0
 8005d10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d12:	4301      	orrs	r1, r0
 8005d14:	d120      	bne.n	8005d58 <_dtoa_r+0xad8>
 8005d16:	2a00      	cmp	r2, #0
 8005d18:	ddee      	ble.n	8005cf8 <_dtoa_r+0xa78>
 8005d1a:	4651      	mov	r1, sl
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	4628      	mov	r0, r5
 8005d20:	9302      	str	r3, [sp, #8]
 8005d22:	f000 fad1 	bl	80062c8 <__lshift>
 8005d26:	4621      	mov	r1, r4
 8005d28:	4682      	mov	sl, r0
 8005d2a:	f000 fb39 	bl	80063a0 <__mcmp>
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	9b02      	ldr	r3, [sp, #8]
 8005d32:	dc02      	bgt.n	8005d3a <_dtoa_r+0xaba>
 8005d34:	d1e0      	bne.n	8005cf8 <_dtoa_r+0xa78>
 8005d36:	07da      	lsls	r2, r3, #31
 8005d38:	d5de      	bpl.n	8005cf8 <_dtoa_r+0xa78>
 8005d3a:	2b39      	cmp	r3, #57	; 0x39
 8005d3c:	d1da      	bne.n	8005cf4 <_dtoa_r+0xa74>
 8005d3e:	2339      	movs	r3, #57	; 0x39
 8005d40:	f88b 3000 	strb.w	r3, [fp]
 8005d44:	463b      	mov	r3, r7
 8005d46:	461f      	mov	r7, r3
 8005d48:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	2a39      	cmp	r2, #57	; 0x39
 8005d50:	d050      	beq.n	8005df4 <_dtoa_r+0xb74>
 8005d52:	3201      	adds	r2, #1
 8005d54:	701a      	strb	r2, [r3, #0]
 8005d56:	e749      	b.n	8005bec <_dtoa_r+0x96c>
 8005d58:	2a00      	cmp	r2, #0
 8005d5a:	dd03      	ble.n	8005d64 <_dtoa_r+0xae4>
 8005d5c:	2b39      	cmp	r3, #57	; 0x39
 8005d5e:	d0ee      	beq.n	8005d3e <_dtoa_r+0xabe>
 8005d60:	3301      	adds	r3, #1
 8005d62:	e7c9      	b.n	8005cf8 <_dtoa_r+0xa78>
 8005d64:	9a02      	ldr	r2, [sp, #8]
 8005d66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d68:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005d6c:	428a      	cmp	r2, r1
 8005d6e:	d02a      	beq.n	8005dc6 <_dtoa_r+0xb46>
 8005d70:	4651      	mov	r1, sl
 8005d72:	2300      	movs	r3, #0
 8005d74:	220a      	movs	r2, #10
 8005d76:	4628      	mov	r0, r5
 8005d78:	f000 f8fa 	bl	8005f70 <__multadd>
 8005d7c:	45b0      	cmp	r8, r6
 8005d7e:	4682      	mov	sl, r0
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	f04f 020a 	mov.w	r2, #10
 8005d88:	4641      	mov	r1, r8
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	d107      	bne.n	8005d9e <_dtoa_r+0xb1e>
 8005d8e:	f000 f8ef 	bl	8005f70 <__multadd>
 8005d92:	4680      	mov	r8, r0
 8005d94:	4606      	mov	r6, r0
 8005d96:	9b02      	ldr	r3, [sp, #8]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	9302      	str	r3, [sp, #8]
 8005d9c:	e777      	b.n	8005c8e <_dtoa_r+0xa0e>
 8005d9e:	f000 f8e7 	bl	8005f70 <__multadd>
 8005da2:	4631      	mov	r1, r6
 8005da4:	4680      	mov	r8, r0
 8005da6:	2300      	movs	r3, #0
 8005da8:	220a      	movs	r2, #10
 8005daa:	4628      	mov	r0, r5
 8005dac:	f000 f8e0 	bl	8005f70 <__multadd>
 8005db0:	4606      	mov	r6, r0
 8005db2:	e7f0      	b.n	8005d96 <_dtoa_r+0xb16>
 8005db4:	f1bb 0f00 	cmp.w	fp, #0
 8005db8:	bfcc      	ite	gt
 8005dba:	465f      	movgt	r7, fp
 8005dbc:	2701      	movle	r7, #1
 8005dbe:	f04f 0800 	mov.w	r8, #0
 8005dc2:	9a08      	ldr	r2, [sp, #32]
 8005dc4:	4417      	add	r7, r2
 8005dc6:	4651      	mov	r1, sl
 8005dc8:	2201      	movs	r2, #1
 8005dca:	4628      	mov	r0, r5
 8005dcc:	9302      	str	r3, [sp, #8]
 8005dce:	f000 fa7b 	bl	80062c8 <__lshift>
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	4682      	mov	sl, r0
 8005dd6:	f000 fae3 	bl	80063a0 <__mcmp>
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	dcb2      	bgt.n	8005d44 <_dtoa_r+0xac4>
 8005dde:	d102      	bne.n	8005de6 <_dtoa_r+0xb66>
 8005de0:	9b02      	ldr	r3, [sp, #8]
 8005de2:	07db      	lsls	r3, r3, #31
 8005de4:	d4ae      	bmi.n	8005d44 <_dtoa_r+0xac4>
 8005de6:	463b      	mov	r3, r7
 8005de8:	461f      	mov	r7, r3
 8005dea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005dee:	2a30      	cmp	r2, #48	; 0x30
 8005df0:	d0fa      	beq.n	8005de8 <_dtoa_r+0xb68>
 8005df2:	e6fb      	b.n	8005bec <_dtoa_r+0x96c>
 8005df4:	9a08      	ldr	r2, [sp, #32]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d1a5      	bne.n	8005d46 <_dtoa_r+0xac6>
 8005dfa:	2331      	movs	r3, #49	; 0x31
 8005dfc:	f109 0901 	add.w	r9, r9, #1
 8005e00:	7013      	strb	r3, [r2, #0]
 8005e02:	e6f3      	b.n	8005bec <_dtoa_r+0x96c>
 8005e04:	4b13      	ldr	r3, [pc, #76]	; (8005e54 <_dtoa_r+0xbd4>)
 8005e06:	f7ff baa7 	b.w	8005358 <_dtoa_r+0xd8>
 8005e0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f47f aa80 	bne.w	8005312 <_dtoa_r+0x92>
 8005e12:	4b11      	ldr	r3, [pc, #68]	; (8005e58 <_dtoa_r+0xbd8>)
 8005e14:	f7ff baa0 	b.w	8005358 <_dtoa_r+0xd8>
 8005e18:	f1bb 0f00 	cmp.w	fp, #0
 8005e1c:	dc03      	bgt.n	8005e26 <_dtoa_r+0xba6>
 8005e1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	f73f aecc 	bgt.w	8005bbe <_dtoa_r+0x93e>
 8005e26:	9f08      	ldr	r7, [sp, #32]
 8005e28:	4621      	mov	r1, r4
 8005e2a:	4650      	mov	r0, sl
 8005e2c:	f7ff f99a 	bl	8005164 <quorem>
 8005e30:	9a08      	ldr	r2, [sp, #32]
 8005e32:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005e36:	f807 3b01 	strb.w	r3, [r7], #1
 8005e3a:	1aba      	subs	r2, r7, r2
 8005e3c:	4593      	cmp	fp, r2
 8005e3e:	ddb9      	ble.n	8005db4 <_dtoa_r+0xb34>
 8005e40:	4651      	mov	r1, sl
 8005e42:	2300      	movs	r3, #0
 8005e44:	220a      	movs	r2, #10
 8005e46:	4628      	mov	r0, r5
 8005e48:	f000 f892 	bl	8005f70 <__multadd>
 8005e4c:	4682      	mov	sl, r0
 8005e4e:	e7eb      	b.n	8005e28 <_dtoa_r+0xba8>
 8005e50:	08008bb3 	.word	0x08008bb3
 8005e54:	08008b0c 	.word	0x08008b0c
 8005e58:	08008b30 	.word	0x08008b30

08005e5c <_localeconv_r>:
 8005e5c:	4800      	ldr	r0, [pc, #0]	; (8005e60 <_localeconv_r+0x4>)
 8005e5e:	4770      	bx	lr
 8005e60:	20000170 	.word	0x20000170

08005e64 <malloc>:
 8005e64:	4b02      	ldr	r3, [pc, #8]	; (8005e70 <malloc+0xc>)
 8005e66:	4601      	mov	r1, r0
 8005e68:	6818      	ldr	r0, [r3, #0]
 8005e6a:	f000 bbfb 	b.w	8006664 <_malloc_r>
 8005e6e:	bf00      	nop
 8005e70:	2000001c 	.word	0x2000001c

08005e74 <memchr>:
 8005e74:	4603      	mov	r3, r0
 8005e76:	b510      	push	{r4, lr}
 8005e78:	b2c9      	uxtb	r1, r1
 8005e7a:	4402      	add	r2, r0
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	4618      	mov	r0, r3
 8005e80:	d101      	bne.n	8005e86 <memchr+0x12>
 8005e82:	2000      	movs	r0, #0
 8005e84:	e003      	b.n	8005e8e <memchr+0x1a>
 8005e86:	7804      	ldrb	r4, [r0, #0]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	428c      	cmp	r4, r1
 8005e8c:	d1f6      	bne.n	8005e7c <memchr+0x8>
 8005e8e:	bd10      	pop	{r4, pc}

08005e90 <memcpy>:
 8005e90:	440a      	add	r2, r1
 8005e92:	4291      	cmp	r1, r2
 8005e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e98:	d100      	bne.n	8005e9c <memcpy+0xc>
 8005e9a:	4770      	bx	lr
 8005e9c:	b510      	push	{r4, lr}
 8005e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ea2:	4291      	cmp	r1, r2
 8005ea4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ea8:	d1f9      	bne.n	8005e9e <memcpy+0xe>
 8005eaa:	bd10      	pop	{r4, pc}

08005eac <_Balloc>:
 8005eac:	b570      	push	{r4, r5, r6, lr}
 8005eae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	460d      	mov	r5, r1
 8005eb4:	b976      	cbnz	r6, 8005ed4 <_Balloc+0x28>
 8005eb6:	2010      	movs	r0, #16
 8005eb8:	f7ff ffd4 	bl	8005e64 <malloc>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	6260      	str	r0, [r4, #36]	; 0x24
 8005ec0:	b920      	cbnz	r0, 8005ecc <_Balloc+0x20>
 8005ec2:	2166      	movs	r1, #102	; 0x66
 8005ec4:	4b17      	ldr	r3, [pc, #92]	; (8005f24 <_Balloc+0x78>)
 8005ec6:	4818      	ldr	r0, [pc, #96]	; (8005f28 <_Balloc+0x7c>)
 8005ec8:	f000 fd92 	bl	80069f0 <__assert_func>
 8005ecc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ed0:	6006      	str	r6, [r0, #0]
 8005ed2:	60c6      	str	r6, [r0, #12]
 8005ed4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005ed6:	68f3      	ldr	r3, [r6, #12]
 8005ed8:	b183      	cbz	r3, 8005efc <_Balloc+0x50>
 8005eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ee2:	b9b8      	cbnz	r0, 8005f14 <_Balloc+0x68>
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	fa01 f605 	lsl.w	r6, r1, r5
 8005eea:	1d72      	adds	r2, r6, #5
 8005eec:	4620      	mov	r0, r4
 8005eee:	0092      	lsls	r2, r2, #2
 8005ef0:	f000 fb5e 	bl	80065b0 <_calloc_r>
 8005ef4:	b160      	cbz	r0, 8005f10 <_Balloc+0x64>
 8005ef6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005efa:	e00e      	b.n	8005f1a <_Balloc+0x6e>
 8005efc:	2221      	movs	r2, #33	; 0x21
 8005efe:	2104      	movs	r1, #4
 8005f00:	4620      	mov	r0, r4
 8005f02:	f000 fb55 	bl	80065b0 <_calloc_r>
 8005f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f08:	60f0      	str	r0, [r6, #12]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1e4      	bne.n	8005eda <_Balloc+0x2e>
 8005f10:	2000      	movs	r0, #0
 8005f12:	bd70      	pop	{r4, r5, r6, pc}
 8005f14:	6802      	ldr	r2, [r0, #0]
 8005f16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f20:	e7f7      	b.n	8005f12 <_Balloc+0x66>
 8005f22:	bf00      	nop
 8005f24:	08008b3d 	.word	0x08008b3d
 8005f28:	08008bc4 	.word	0x08008bc4

08005f2c <_Bfree>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f30:	4605      	mov	r5, r0
 8005f32:	460c      	mov	r4, r1
 8005f34:	b976      	cbnz	r6, 8005f54 <_Bfree+0x28>
 8005f36:	2010      	movs	r0, #16
 8005f38:	f7ff ff94 	bl	8005e64 <malloc>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	6268      	str	r0, [r5, #36]	; 0x24
 8005f40:	b920      	cbnz	r0, 8005f4c <_Bfree+0x20>
 8005f42:	218a      	movs	r1, #138	; 0x8a
 8005f44:	4b08      	ldr	r3, [pc, #32]	; (8005f68 <_Bfree+0x3c>)
 8005f46:	4809      	ldr	r0, [pc, #36]	; (8005f6c <_Bfree+0x40>)
 8005f48:	f000 fd52 	bl	80069f0 <__assert_func>
 8005f4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f50:	6006      	str	r6, [r0, #0]
 8005f52:	60c6      	str	r6, [r0, #12]
 8005f54:	b13c      	cbz	r4, 8005f66 <_Bfree+0x3a>
 8005f56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f58:	6862      	ldr	r2, [r4, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f60:	6021      	str	r1, [r4, #0]
 8005f62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f66:	bd70      	pop	{r4, r5, r6, pc}
 8005f68:	08008b3d 	.word	0x08008b3d
 8005f6c:	08008bc4 	.word	0x08008bc4

08005f70 <__multadd>:
 8005f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f74:	4698      	mov	r8, r3
 8005f76:	460c      	mov	r4, r1
 8005f78:	2300      	movs	r3, #0
 8005f7a:	690e      	ldr	r6, [r1, #16]
 8005f7c:	4607      	mov	r7, r0
 8005f7e:	f101 0014 	add.w	r0, r1, #20
 8005f82:	6805      	ldr	r5, [r0, #0]
 8005f84:	3301      	adds	r3, #1
 8005f86:	b2a9      	uxth	r1, r5
 8005f88:	fb02 8101 	mla	r1, r2, r1, r8
 8005f8c:	0c2d      	lsrs	r5, r5, #16
 8005f8e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005f92:	fb02 c505 	mla	r5, r2, r5, ip
 8005f96:	b289      	uxth	r1, r1
 8005f98:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005f9c:	429e      	cmp	r6, r3
 8005f9e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005fa2:	f840 1b04 	str.w	r1, [r0], #4
 8005fa6:	dcec      	bgt.n	8005f82 <__multadd+0x12>
 8005fa8:	f1b8 0f00 	cmp.w	r8, #0
 8005fac:	d022      	beq.n	8005ff4 <__multadd+0x84>
 8005fae:	68a3      	ldr	r3, [r4, #8]
 8005fb0:	42b3      	cmp	r3, r6
 8005fb2:	dc19      	bgt.n	8005fe8 <__multadd+0x78>
 8005fb4:	6861      	ldr	r1, [r4, #4]
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	3101      	adds	r1, #1
 8005fba:	f7ff ff77 	bl	8005eac <_Balloc>
 8005fbe:	4605      	mov	r5, r0
 8005fc0:	b928      	cbnz	r0, 8005fce <__multadd+0x5e>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	21b5      	movs	r1, #181	; 0xb5
 8005fc6:	4b0d      	ldr	r3, [pc, #52]	; (8005ffc <__multadd+0x8c>)
 8005fc8:	480d      	ldr	r0, [pc, #52]	; (8006000 <__multadd+0x90>)
 8005fca:	f000 fd11 	bl	80069f0 <__assert_func>
 8005fce:	6922      	ldr	r2, [r4, #16]
 8005fd0:	f104 010c 	add.w	r1, r4, #12
 8005fd4:	3202      	adds	r2, #2
 8005fd6:	0092      	lsls	r2, r2, #2
 8005fd8:	300c      	adds	r0, #12
 8005fda:	f7ff ff59 	bl	8005e90 <memcpy>
 8005fde:	4621      	mov	r1, r4
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	f7ff ffa3 	bl	8005f2c <_Bfree>
 8005fe6:	462c      	mov	r4, r5
 8005fe8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005fec:	3601      	adds	r6, #1
 8005fee:	f8c3 8014 	str.w	r8, [r3, #20]
 8005ff2:	6126      	str	r6, [r4, #16]
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ffa:	bf00      	nop
 8005ffc:	08008bb3 	.word	0x08008bb3
 8006000:	08008bc4 	.word	0x08008bc4

08006004 <__hi0bits>:
 8006004:	0c02      	lsrs	r2, r0, #16
 8006006:	0412      	lsls	r2, r2, #16
 8006008:	4603      	mov	r3, r0
 800600a:	b9ca      	cbnz	r2, 8006040 <__hi0bits+0x3c>
 800600c:	0403      	lsls	r3, r0, #16
 800600e:	2010      	movs	r0, #16
 8006010:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006014:	bf04      	itt	eq
 8006016:	021b      	lsleq	r3, r3, #8
 8006018:	3008      	addeq	r0, #8
 800601a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800601e:	bf04      	itt	eq
 8006020:	011b      	lsleq	r3, r3, #4
 8006022:	3004      	addeq	r0, #4
 8006024:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006028:	bf04      	itt	eq
 800602a:	009b      	lsleq	r3, r3, #2
 800602c:	3002      	addeq	r0, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	db05      	blt.n	800603e <__hi0bits+0x3a>
 8006032:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006036:	f100 0001 	add.w	r0, r0, #1
 800603a:	bf08      	it	eq
 800603c:	2020      	moveq	r0, #32
 800603e:	4770      	bx	lr
 8006040:	2000      	movs	r0, #0
 8006042:	e7e5      	b.n	8006010 <__hi0bits+0xc>

08006044 <__lo0bits>:
 8006044:	6803      	ldr	r3, [r0, #0]
 8006046:	4602      	mov	r2, r0
 8006048:	f013 0007 	ands.w	r0, r3, #7
 800604c:	d00b      	beq.n	8006066 <__lo0bits+0x22>
 800604e:	07d9      	lsls	r1, r3, #31
 8006050:	d422      	bmi.n	8006098 <__lo0bits+0x54>
 8006052:	0798      	lsls	r0, r3, #30
 8006054:	bf49      	itett	mi
 8006056:	085b      	lsrmi	r3, r3, #1
 8006058:	089b      	lsrpl	r3, r3, #2
 800605a:	2001      	movmi	r0, #1
 800605c:	6013      	strmi	r3, [r2, #0]
 800605e:	bf5c      	itt	pl
 8006060:	2002      	movpl	r0, #2
 8006062:	6013      	strpl	r3, [r2, #0]
 8006064:	4770      	bx	lr
 8006066:	b299      	uxth	r1, r3
 8006068:	b909      	cbnz	r1, 800606e <__lo0bits+0x2a>
 800606a:	2010      	movs	r0, #16
 800606c:	0c1b      	lsrs	r3, r3, #16
 800606e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006072:	bf04      	itt	eq
 8006074:	0a1b      	lsreq	r3, r3, #8
 8006076:	3008      	addeq	r0, #8
 8006078:	0719      	lsls	r1, r3, #28
 800607a:	bf04      	itt	eq
 800607c:	091b      	lsreq	r3, r3, #4
 800607e:	3004      	addeq	r0, #4
 8006080:	0799      	lsls	r1, r3, #30
 8006082:	bf04      	itt	eq
 8006084:	089b      	lsreq	r3, r3, #2
 8006086:	3002      	addeq	r0, #2
 8006088:	07d9      	lsls	r1, r3, #31
 800608a:	d403      	bmi.n	8006094 <__lo0bits+0x50>
 800608c:	085b      	lsrs	r3, r3, #1
 800608e:	f100 0001 	add.w	r0, r0, #1
 8006092:	d003      	beq.n	800609c <__lo0bits+0x58>
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	4770      	bx	lr
 8006098:	2000      	movs	r0, #0
 800609a:	4770      	bx	lr
 800609c:	2020      	movs	r0, #32
 800609e:	4770      	bx	lr

080060a0 <__i2b>:
 80060a0:	b510      	push	{r4, lr}
 80060a2:	460c      	mov	r4, r1
 80060a4:	2101      	movs	r1, #1
 80060a6:	f7ff ff01 	bl	8005eac <_Balloc>
 80060aa:	4602      	mov	r2, r0
 80060ac:	b928      	cbnz	r0, 80060ba <__i2b+0x1a>
 80060ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80060b2:	4b04      	ldr	r3, [pc, #16]	; (80060c4 <__i2b+0x24>)
 80060b4:	4804      	ldr	r0, [pc, #16]	; (80060c8 <__i2b+0x28>)
 80060b6:	f000 fc9b 	bl	80069f0 <__assert_func>
 80060ba:	2301      	movs	r3, #1
 80060bc:	6144      	str	r4, [r0, #20]
 80060be:	6103      	str	r3, [r0, #16]
 80060c0:	bd10      	pop	{r4, pc}
 80060c2:	bf00      	nop
 80060c4:	08008bb3 	.word	0x08008bb3
 80060c8:	08008bc4 	.word	0x08008bc4

080060cc <__multiply>:
 80060cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d0:	4614      	mov	r4, r2
 80060d2:	690a      	ldr	r2, [r1, #16]
 80060d4:	6923      	ldr	r3, [r4, #16]
 80060d6:	460d      	mov	r5, r1
 80060d8:	429a      	cmp	r2, r3
 80060da:	bfbe      	ittt	lt
 80060dc:	460b      	movlt	r3, r1
 80060de:	4625      	movlt	r5, r4
 80060e0:	461c      	movlt	r4, r3
 80060e2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80060e6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80060ea:	68ab      	ldr	r3, [r5, #8]
 80060ec:	6869      	ldr	r1, [r5, #4]
 80060ee:	eb0a 0709 	add.w	r7, sl, r9
 80060f2:	42bb      	cmp	r3, r7
 80060f4:	b085      	sub	sp, #20
 80060f6:	bfb8      	it	lt
 80060f8:	3101      	addlt	r1, #1
 80060fa:	f7ff fed7 	bl	8005eac <_Balloc>
 80060fe:	b930      	cbnz	r0, 800610e <__multiply+0x42>
 8006100:	4602      	mov	r2, r0
 8006102:	f240 115d 	movw	r1, #349	; 0x15d
 8006106:	4b41      	ldr	r3, [pc, #260]	; (800620c <__multiply+0x140>)
 8006108:	4841      	ldr	r0, [pc, #260]	; (8006210 <__multiply+0x144>)
 800610a:	f000 fc71 	bl	80069f0 <__assert_func>
 800610e:	f100 0614 	add.w	r6, r0, #20
 8006112:	4633      	mov	r3, r6
 8006114:	2200      	movs	r2, #0
 8006116:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800611a:	4543      	cmp	r3, r8
 800611c:	d31e      	bcc.n	800615c <__multiply+0x90>
 800611e:	f105 0c14 	add.w	ip, r5, #20
 8006122:	f104 0314 	add.w	r3, r4, #20
 8006126:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800612a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800612e:	9202      	str	r2, [sp, #8]
 8006130:	ebac 0205 	sub.w	r2, ip, r5
 8006134:	3a15      	subs	r2, #21
 8006136:	f022 0203 	bic.w	r2, r2, #3
 800613a:	3204      	adds	r2, #4
 800613c:	f105 0115 	add.w	r1, r5, #21
 8006140:	458c      	cmp	ip, r1
 8006142:	bf38      	it	cc
 8006144:	2204      	movcc	r2, #4
 8006146:	9201      	str	r2, [sp, #4]
 8006148:	9a02      	ldr	r2, [sp, #8]
 800614a:	9303      	str	r3, [sp, #12]
 800614c:	429a      	cmp	r2, r3
 800614e:	d808      	bhi.n	8006162 <__multiply+0x96>
 8006150:	2f00      	cmp	r7, #0
 8006152:	dc55      	bgt.n	8006200 <__multiply+0x134>
 8006154:	6107      	str	r7, [r0, #16]
 8006156:	b005      	add	sp, #20
 8006158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800615c:	f843 2b04 	str.w	r2, [r3], #4
 8006160:	e7db      	b.n	800611a <__multiply+0x4e>
 8006162:	f8b3 a000 	ldrh.w	sl, [r3]
 8006166:	f1ba 0f00 	cmp.w	sl, #0
 800616a:	d020      	beq.n	80061ae <__multiply+0xe2>
 800616c:	46b1      	mov	r9, r6
 800616e:	2200      	movs	r2, #0
 8006170:	f105 0e14 	add.w	lr, r5, #20
 8006174:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006178:	f8d9 b000 	ldr.w	fp, [r9]
 800617c:	b2a1      	uxth	r1, r4
 800617e:	fa1f fb8b 	uxth.w	fp, fp
 8006182:	fb0a b101 	mla	r1, sl, r1, fp
 8006186:	4411      	add	r1, r2
 8006188:	f8d9 2000 	ldr.w	r2, [r9]
 800618c:	0c24      	lsrs	r4, r4, #16
 800618e:	0c12      	lsrs	r2, r2, #16
 8006190:	fb0a 2404 	mla	r4, sl, r4, r2
 8006194:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006198:	b289      	uxth	r1, r1
 800619a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800619e:	45f4      	cmp	ip, lr
 80061a0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80061a4:	f849 1b04 	str.w	r1, [r9], #4
 80061a8:	d8e4      	bhi.n	8006174 <__multiply+0xa8>
 80061aa:	9901      	ldr	r1, [sp, #4]
 80061ac:	5072      	str	r2, [r6, r1]
 80061ae:	9a03      	ldr	r2, [sp, #12]
 80061b0:	3304      	adds	r3, #4
 80061b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80061b6:	f1b9 0f00 	cmp.w	r9, #0
 80061ba:	d01f      	beq.n	80061fc <__multiply+0x130>
 80061bc:	46b6      	mov	lr, r6
 80061be:	f04f 0a00 	mov.w	sl, #0
 80061c2:	6834      	ldr	r4, [r6, #0]
 80061c4:	f105 0114 	add.w	r1, r5, #20
 80061c8:	880a      	ldrh	r2, [r1, #0]
 80061ca:	f8be b002 	ldrh.w	fp, [lr, #2]
 80061ce:	b2a4      	uxth	r4, r4
 80061d0:	fb09 b202 	mla	r2, r9, r2, fp
 80061d4:	4492      	add	sl, r2
 80061d6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80061da:	f84e 4b04 	str.w	r4, [lr], #4
 80061de:	f851 4b04 	ldr.w	r4, [r1], #4
 80061e2:	f8be 2000 	ldrh.w	r2, [lr]
 80061e6:	0c24      	lsrs	r4, r4, #16
 80061e8:	fb09 2404 	mla	r4, r9, r4, r2
 80061ec:	458c      	cmp	ip, r1
 80061ee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80061f2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80061f6:	d8e7      	bhi.n	80061c8 <__multiply+0xfc>
 80061f8:	9a01      	ldr	r2, [sp, #4]
 80061fa:	50b4      	str	r4, [r6, r2]
 80061fc:	3604      	adds	r6, #4
 80061fe:	e7a3      	b.n	8006148 <__multiply+0x7c>
 8006200:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1a5      	bne.n	8006154 <__multiply+0x88>
 8006208:	3f01      	subs	r7, #1
 800620a:	e7a1      	b.n	8006150 <__multiply+0x84>
 800620c:	08008bb3 	.word	0x08008bb3
 8006210:	08008bc4 	.word	0x08008bc4

08006214 <__pow5mult>:
 8006214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006218:	4615      	mov	r5, r2
 800621a:	f012 0203 	ands.w	r2, r2, #3
 800621e:	4606      	mov	r6, r0
 8006220:	460f      	mov	r7, r1
 8006222:	d007      	beq.n	8006234 <__pow5mult+0x20>
 8006224:	4c25      	ldr	r4, [pc, #148]	; (80062bc <__pow5mult+0xa8>)
 8006226:	3a01      	subs	r2, #1
 8006228:	2300      	movs	r3, #0
 800622a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800622e:	f7ff fe9f 	bl	8005f70 <__multadd>
 8006232:	4607      	mov	r7, r0
 8006234:	10ad      	asrs	r5, r5, #2
 8006236:	d03d      	beq.n	80062b4 <__pow5mult+0xa0>
 8006238:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800623a:	b97c      	cbnz	r4, 800625c <__pow5mult+0x48>
 800623c:	2010      	movs	r0, #16
 800623e:	f7ff fe11 	bl	8005e64 <malloc>
 8006242:	4602      	mov	r2, r0
 8006244:	6270      	str	r0, [r6, #36]	; 0x24
 8006246:	b928      	cbnz	r0, 8006254 <__pow5mult+0x40>
 8006248:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800624c:	4b1c      	ldr	r3, [pc, #112]	; (80062c0 <__pow5mult+0xac>)
 800624e:	481d      	ldr	r0, [pc, #116]	; (80062c4 <__pow5mult+0xb0>)
 8006250:	f000 fbce 	bl	80069f0 <__assert_func>
 8006254:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006258:	6004      	str	r4, [r0, #0]
 800625a:	60c4      	str	r4, [r0, #12]
 800625c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006260:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006264:	b94c      	cbnz	r4, 800627a <__pow5mult+0x66>
 8006266:	f240 2171 	movw	r1, #625	; 0x271
 800626a:	4630      	mov	r0, r6
 800626c:	f7ff ff18 	bl	80060a0 <__i2b>
 8006270:	2300      	movs	r3, #0
 8006272:	4604      	mov	r4, r0
 8006274:	f8c8 0008 	str.w	r0, [r8, #8]
 8006278:	6003      	str	r3, [r0, #0]
 800627a:	f04f 0900 	mov.w	r9, #0
 800627e:	07eb      	lsls	r3, r5, #31
 8006280:	d50a      	bpl.n	8006298 <__pow5mult+0x84>
 8006282:	4639      	mov	r1, r7
 8006284:	4622      	mov	r2, r4
 8006286:	4630      	mov	r0, r6
 8006288:	f7ff ff20 	bl	80060cc <__multiply>
 800628c:	4680      	mov	r8, r0
 800628e:	4639      	mov	r1, r7
 8006290:	4630      	mov	r0, r6
 8006292:	f7ff fe4b 	bl	8005f2c <_Bfree>
 8006296:	4647      	mov	r7, r8
 8006298:	106d      	asrs	r5, r5, #1
 800629a:	d00b      	beq.n	80062b4 <__pow5mult+0xa0>
 800629c:	6820      	ldr	r0, [r4, #0]
 800629e:	b938      	cbnz	r0, 80062b0 <__pow5mult+0x9c>
 80062a0:	4622      	mov	r2, r4
 80062a2:	4621      	mov	r1, r4
 80062a4:	4630      	mov	r0, r6
 80062a6:	f7ff ff11 	bl	80060cc <__multiply>
 80062aa:	6020      	str	r0, [r4, #0]
 80062ac:	f8c0 9000 	str.w	r9, [r0]
 80062b0:	4604      	mov	r4, r0
 80062b2:	e7e4      	b.n	800627e <__pow5mult+0x6a>
 80062b4:	4638      	mov	r0, r7
 80062b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062ba:	bf00      	nop
 80062bc:	08008d18 	.word	0x08008d18
 80062c0:	08008b3d 	.word	0x08008b3d
 80062c4:	08008bc4 	.word	0x08008bc4

080062c8 <__lshift>:
 80062c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062cc:	460c      	mov	r4, r1
 80062ce:	4607      	mov	r7, r0
 80062d0:	4691      	mov	r9, r2
 80062d2:	6923      	ldr	r3, [r4, #16]
 80062d4:	6849      	ldr	r1, [r1, #4]
 80062d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80062da:	68a3      	ldr	r3, [r4, #8]
 80062dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062e0:	f108 0601 	add.w	r6, r8, #1
 80062e4:	42b3      	cmp	r3, r6
 80062e6:	db0b      	blt.n	8006300 <__lshift+0x38>
 80062e8:	4638      	mov	r0, r7
 80062ea:	f7ff fddf 	bl	8005eac <_Balloc>
 80062ee:	4605      	mov	r5, r0
 80062f0:	b948      	cbnz	r0, 8006306 <__lshift+0x3e>
 80062f2:	4602      	mov	r2, r0
 80062f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80062f8:	4b27      	ldr	r3, [pc, #156]	; (8006398 <__lshift+0xd0>)
 80062fa:	4828      	ldr	r0, [pc, #160]	; (800639c <__lshift+0xd4>)
 80062fc:	f000 fb78 	bl	80069f0 <__assert_func>
 8006300:	3101      	adds	r1, #1
 8006302:	005b      	lsls	r3, r3, #1
 8006304:	e7ee      	b.n	80062e4 <__lshift+0x1c>
 8006306:	2300      	movs	r3, #0
 8006308:	f100 0114 	add.w	r1, r0, #20
 800630c:	f100 0210 	add.w	r2, r0, #16
 8006310:	4618      	mov	r0, r3
 8006312:	4553      	cmp	r3, sl
 8006314:	db33      	blt.n	800637e <__lshift+0xb6>
 8006316:	6920      	ldr	r0, [r4, #16]
 8006318:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800631c:	f104 0314 	add.w	r3, r4, #20
 8006320:	f019 091f 	ands.w	r9, r9, #31
 8006324:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006328:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800632c:	d02b      	beq.n	8006386 <__lshift+0xbe>
 800632e:	468a      	mov	sl, r1
 8006330:	2200      	movs	r2, #0
 8006332:	f1c9 0e20 	rsb	lr, r9, #32
 8006336:	6818      	ldr	r0, [r3, #0]
 8006338:	fa00 f009 	lsl.w	r0, r0, r9
 800633c:	4302      	orrs	r2, r0
 800633e:	f84a 2b04 	str.w	r2, [sl], #4
 8006342:	f853 2b04 	ldr.w	r2, [r3], #4
 8006346:	459c      	cmp	ip, r3
 8006348:	fa22 f20e 	lsr.w	r2, r2, lr
 800634c:	d8f3      	bhi.n	8006336 <__lshift+0x6e>
 800634e:	ebac 0304 	sub.w	r3, ip, r4
 8006352:	3b15      	subs	r3, #21
 8006354:	f023 0303 	bic.w	r3, r3, #3
 8006358:	3304      	adds	r3, #4
 800635a:	f104 0015 	add.w	r0, r4, #21
 800635e:	4584      	cmp	ip, r0
 8006360:	bf38      	it	cc
 8006362:	2304      	movcc	r3, #4
 8006364:	50ca      	str	r2, [r1, r3]
 8006366:	b10a      	cbz	r2, 800636c <__lshift+0xa4>
 8006368:	f108 0602 	add.w	r6, r8, #2
 800636c:	3e01      	subs	r6, #1
 800636e:	4638      	mov	r0, r7
 8006370:	4621      	mov	r1, r4
 8006372:	612e      	str	r6, [r5, #16]
 8006374:	f7ff fdda 	bl	8005f2c <_Bfree>
 8006378:	4628      	mov	r0, r5
 800637a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006382:	3301      	adds	r3, #1
 8006384:	e7c5      	b.n	8006312 <__lshift+0x4a>
 8006386:	3904      	subs	r1, #4
 8006388:	f853 2b04 	ldr.w	r2, [r3], #4
 800638c:	459c      	cmp	ip, r3
 800638e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006392:	d8f9      	bhi.n	8006388 <__lshift+0xc0>
 8006394:	e7ea      	b.n	800636c <__lshift+0xa4>
 8006396:	bf00      	nop
 8006398:	08008bb3 	.word	0x08008bb3
 800639c:	08008bc4 	.word	0x08008bc4

080063a0 <__mcmp>:
 80063a0:	4603      	mov	r3, r0
 80063a2:	690a      	ldr	r2, [r1, #16]
 80063a4:	6900      	ldr	r0, [r0, #16]
 80063a6:	b530      	push	{r4, r5, lr}
 80063a8:	1a80      	subs	r0, r0, r2
 80063aa:	d10d      	bne.n	80063c8 <__mcmp+0x28>
 80063ac:	3314      	adds	r3, #20
 80063ae:	3114      	adds	r1, #20
 80063b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80063b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80063b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80063bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80063c0:	4295      	cmp	r5, r2
 80063c2:	d002      	beq.n	80063ca <__mcmp+0x2a>
 80063c4:	d304      	bcc.n	80063d0 <__mcmp+0x30>
 80063c6:	2001      	movs	r0, #1
 80063c8:	bd30      	pop	{r4, r5, pc}
 80063ca:	42a3      	cmp	r3, r4
 80063cc:	d3f4      	bcc.n	80063b8 <__mcmp+0x18>
 80063ce:	e7fb      	b.n	80063c8 <__mcmp+0x28>
 80063d0:	f04f 30ff 	mov.w	r0, #4294967295
 80063d4:	e7f8      	b.n	80063c8 <__mcmp+0x28>
	...

080063d8 <__mdiff>:
 80063d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063dc:	460c      	mov	r4, r1
 80063de:	4606      	mov	r6, r0
 80063e0:	4611      	mov	r1, r2
 80063e2:	4620      	mov	r0, r4
 80063e4:	4692      	mov	sl, r2
 80063e6:	f7ff ffdb 	bl	80063a0 <__mcmp>
 80063ea:	1e05      	subs	r5, r0, #0
 80063ec:	d111      	bne.n	8006412 <__mdiff+0x3a>
 80063ee:	4629      	mov	r1, r5
 80063f0:	4630      	mov	r0, r6
 80063f2:	f7ff fd5b 	bl	8005eac <_Balloc>
 80063f6:	4602      	mov	r2, r0
 80063f8:	b928      	cbnz	r0, 8006406 <__mdiff+0x2e>
 80063fa:	f240 2132 	movw	r1, #562	; 0x232
 80063fe:	4b3c      	ldr	r3, [pc, #240]	; (80064f0 <__mdiff+0x118>)
 8006400:	483c      	ldr	r0, [pc, #240]	; (80064f4 <__mdiff+0x11c>)
 8006402:	f000 faf5 	bl	80069f0 <__assert_func>
 8006406:	2301      	movs	r3, #1
 8006408:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800640c:	4610      	mov	r0, r2
 800640e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006412:	bfa4      	itt	ge
 8006414:	4653      	movge	r3, sl
 8006416:	46a2      	movge	sl, r4
 8006418:	4630      	mov	r0, r6
 800641a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800641e:	bfa6      	itte	ge
 8006420:	461c      	movge	r4, r3
 8006422:	2500      	movge	r5, #0
 8006424:	2501      	movlt	r5, #1
 8006426:	f7ff fd41 	bl	8005eac <_Balloc>
 800642a:	4602      	mov	r2, r0
 800642c:	b918      	cbnz	r0, 8006436 <__mdiff+0x5e>
 800642e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006432:	4b2f      	ldr	r3, [pc, #188]	; (80064f0 <__mdiff+0x118>)
 8006434:	e7e4      	b.n	8006400 <__mdiff+0x28>
 8006436:	f100 0814 	add.w	r8, r0, #20
 800643a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800643e:	60c5      	str	r5, [r0, #12]
 8006440:	f04f 0c00 	mov.w	ip, #0
 8006444:	f10a 0514 	add.w	r5, sl, #20
 8006448:	f10a 0010 	add.w	r0, sl, #16
 800644c:	46c2      	mov	sl, r8
 800644e:	6926      	ldr	r6, [r4, #16]
 8006450:	f104 0914 	add.w	r9, r4, #20
 8006454:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006458:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800645c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006460:	f859 3b04 	ldr.w	r3, [r9], #4
 8006464:	fa1f f18b 	uxth.w	r1, fp
 8006468:	4461      	add	r1, ip
 800646a:	fa1f fc83 	uxth.w	ip, r3
 800646e:	0c1b      	lsrs	r3, r3, #16
 8006470:	eba1 010c 	sub.w	r1, r1, ip
 8006474:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006478:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800647c:	b289      	uxth	r1, r1
 800647e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006482:	454e      	cmp	r6, r9
 8006484:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006488:	f84a 3b04 	str.w	r3, [sl], #4
 800648c:	d8e6      	bhi.n	800645c <__mdiff+0x84>
 800648e:	1b33      	subs	r3, r6, r4
 8006490:	3b15      	subs	r3, #21
 8006492:	f023 0303 	bic.w	r3, r3, #3
 8006496:	3415      	adds	r4, #21
 8006498:	3304      	adds	r3, #4
 800649a:	42a6      	cmp	r6, r4
 800649c:	bf38      	it	cc
 800649e:	2304      	movcc	r3, #4
 80064a0:	441d      	add	r5, r3
 80064a2:	4443      	add	r3, r8
 80064a4:	461e      	mov	r6, r3
 80064a6:	462c      	mov	r4, r5
 80064a8:	4574      	cmp	r4, lr
 80064aa:	d30e      	bcc.n	80064ca <__mdiff+0xf2>
 80064ac:	f10e 0103 	add.w	r1, lr, #3
 80064b0:	1b49      	subs	r1, r1, r5
 80064b2:	f021 0103 	bic.w	r1, r1, #3
 80064b6:	3d03      	subs	r5, #3
 80064b8:	45ae      	cmp	lr, r5
 80064ba:	bf38      	it	cc
 80064bc:	2100      	movcc	r1, #0
 80064be:	4419      	add	r1, r3
 80064c0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80064c4:	b18b      	cbz	r3, 80064ea <__mdiff+0x112>
 80064c6:	6117      	str	r7, [r2, #16]
 80064c8:	e7a0      	b.n	800640c <__mdiff+0x34>
 80064ca:	f854 8b04 	ldr.w	r8, [r4], #4
 80064ce:	fa1f f188 	uxth.w	r1, r8
 80064d2:	4461      	add	r1, ip
 80064d4:	1408      	asrs	r0, r1, #16
 80064d6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80064da:	b289      	uxth	r1, r1
 80064dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80064e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80064e4:	f846 1b04 	str.w	r1, [r6], #4
 80064e8:	e7de      	b.n	80064a8 <__mdiff+0xd0>
 80064ea:	3f01      	subs	r7, #1
 80064ec:	e7e8      	b.n	80064c0 <__mdiff+0xe8>
 80064ee:	bf00      	nop
 80064f0:	08008bb3 	.word	0x08008bb3
 80064f4:	08008bc4 	.word	0x08008bc4

080064f8 <__d2b>:
 80064f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80064fc:	2101      	movs	r1, #1
 80064fe:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006502:	4690      	mov	r8, r2
 8006504:	461d      	mov	r5, r3
 8006506:	f7ff fcd1 	bl	8005eac <_Balloc>
 800650a:	4604      	mov	r4, r0
 800650c:	b930      	cbnz	r0, 800651c <__d2b+0x24>
 800650e:	4602      	mov	r2, r0
 8006510:	f240 310a 	movw	r1, #778	; 0x30a
 8006514:	4b24      	ldr	r3, [pc, #144]	; (80065a8 <__d2b+0xb0>)
 8006516:	4825      	ldr	r0, [pc, #148]	; (80065ac <__d2b+0xb4>)
 8006518:	f000 fa6a 	bl	80069f0 <__assert_func>
 800651c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006520:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006524:	bb2d      	cbnz	r5, 8006572 <__d2b+0x7a>
 8006526:	9301      	str	r3, [sp, #4]
 8006528:	f1b8 0300 	subs.w	r3, r8, #0
 800652c:	d026      	beq.n	800657c <__d2b+0x84>
 800652e:	4668      	mov	r0, sp
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	f7ff fd87 	bl	8006044 <__lo0bits>
 8006536:	9900      	ldr	r1, [sp, #0]
 8006538:	b1f0      	cbz	r0, 8006578 <__d2b+0x80>
 800653a:	9a01      	ldr	r2, [sp, #4]
 800653c:	f1c0 0320 	rsb	r3, r0, #32
 8006540:	fa02 f303 	lsl.w	r3, r2, r3
 8006544:	430b      	orrs	r3, r1
 8006546:	40c2      	lsrs	r2, r0
 8006548:	6163      	str	r3, [r4, #20]
 800654a:	9201      	str	r2, [sp, #4]
 800654c:	9b01      	ldr	r3, [sp, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	bf14      	ite	ne
 8006552:	2102      	movne	r1, #2
 8006554:	2101      	moveq	r1, #1
 8006556:	61a3      	str	r3, [r4, #24]
 8006558:	6121      	str	r1, [r4, #16]
 800655a:	b1c5      	cbz	r5, 800658e <__d2b+0x96>
 800655c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006560:	4405      	add	r5, r0
 8006562:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006566:	603d      	str	r5, [r7, #0]
 8006568:	6030      	str	r0, [r6, #0]
 800656a:	4620      	mov	r0, r4
 800656c:	b002      	add	sp, #8
 800656e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006576:	e7d6      	b.n	8006526 <__d2b+0x2e>
 8006578:	6161      	str	r1, [r4, #20]
 800657a:	e7e7      	b.n	800654c <__d2b+0x54>
 800657c:	a801      	add	r0, sp, #4
 800657e:	f7ff fd61 	bl	8006044 <__lo0bits>
 8006582:	2101      	movs	r1, #1
 8006584:	9b01      	ldr	r3, [sp, #4]
 8006586:	6121      	str	r1, [r4, #16]
 8006588:	6163      	str	r3, [r4, #20]
 800658a:	3020      	adds	r0, #32
 800658c:	e7e5      	b.n	800655a <__d2b+0x62>
 800658e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006592:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006596:	6038      	str	r0, [r7, #0]
 8006598:	6918      	ldr	r0, [r3, #16]
 800659a:	f7ff fd33 	bl	8006004 <__hi0bits>
 800659e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80065a2:	6031      	str	r1, [r6, #0]
 80065a4:	e7e1      	b.n	800656a <__d2b+0x72>
 80065a6:	bf00      	nop
 80065a8:	08008bb3 	.word	0x08008bb3
 80065ac:	08008bc4 	.word	0x08008bc4

080065b0 <_calloc_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	fb02 f501 	mul.w	r5, r2, r1
 80065b6:	4629      	mov	r1, r5
 80065b8:	f000 f854 	bl	8006664 <_malloc_r>
 80065bc:	4604      	mov	r4, r0
 80065be:	b118      	cbz	r0, 80065c8 <_calloc_r+0x18>
 80065c0:	462a      	mov	r2, r5
 80065c2:	2100      	movs	r1, #0
 80065c4:	f7fe f946 	bl	8004854 <memset>
 80065c8:	4620      	mov	r0, r4
 80065ca:	bd38      	pop	{r3, r4, r5, pc}

080065cc <_free_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4605      	mov	r5, r0
 80065d0:	2900      	cmp	r1, #0
 80065d2:	d043      	beq.n	800665c <_free_r+0x90>
 80065d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065d8:	1f0c      	subs	r4, r1, #4
 80065da:	2b00      	cmp	r3, #0
 80065dc:	bfb8      	it	lt
 80065de:	18e4      	addlt	r4, r4, r3
 80065e0:	f000 fa62 	bl	8006aa8 <__malloc_lock>
 80065e4:	4a1e      	ldr	r2, [pc, #120]	; (8006660 <_free_r+0x94>)
 80065e6:	6813      	ldr	r3, [r2, #0]
 80065e8:	4610      	mov	r0, r2
 80065ea:	b933      	cbnz	r3, 80065fa <_free_r+0x2e>
 80065ec:	6063      	str	r3, [r4, #4]
 80065ee:	6014      	str	r4, [r2, #0]
 80065f0:	4628      	mov	r0, r5
 80065f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065f6:	f000 ba5d 	b.w	8006ab4 <__malloc_unlock>
 80065fa:	42a3      	cmp	r3, r4
 80065fc:	d90a      	bls.n	8006614 <_free_r+0x48>
 80065fe:	6821      	ldr	r1, [r4, #0]
 8006600:	1862      	adds	r2, r4, r1
 8006602:	4293      	cmp	r3, r2
 8006604:	bf01      	itttt	eq
 8006606:	681a      	ldreq	r2, [r3, #0]
 8006608:	685b      	ldreq	r3, [r3, #4]
 800660a:	1852      	addeq	r2, r2, r1
 800660c:	6022      	streq	r2, [r4, #0]
 800660e:	6063      	str	r3, [r4, #4]
 8006610:	6004      	str	r4, [r0, #0]
 8006612:	e7ed      	b.n	80065f0 <_free_r+0x24>
 8006614:	461a      	mov	r2, r3
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	b10b      	cbz	r3, 800661e <_free_r+0x52>
 800661a:	42a3      	cmp	r3, r4
 800661c:	d9fa      	bls.n	8006614 <_free_r+0x48>
 800661e:	6811      	ldr	r1, [r2, #0]
 8006620:	1850      	adds	r0, r2, r1
 8006622:	42a0      	cmp	r0, r4
 8006624:	d10b      	bne.n	800663e <_free_r+0x72>
 8006626:	6820      	ldr	r0, [r4, #0]
 8006628:	4401      	add	r1, r0
 800662a:	1850      	adds	r0, r2, r1
 800662c:	4283      	cmp	r3, r0
 800662e:	6011      	str	r1, [r2, #0]
 8006630:	d1de      	bne.n	80065f0 <_free_r+0x24>
 8006632:	6818      	ldr	r0, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	4401      	add	r1, r0
 8006638:	6011      	str	r1, [r2, #0]
 800663a:	6053      	str	r3, [r2, #4]
 800663c:	e7d8      	b.n	80065f0 <_free_r+0x24>
 800663e:	d902      	bls.n	8006646 <_free_r+0x7a>
 8006640:	230c      	movs	r3, #12
 8006642:	602b      	str	r3, [r5, #0]
 8006644:	e7d4      	b.n	80065f0 <_free_r+0x24>
 8006646:	6820      	ldr	r0, [r4, #0]
 8006648:	1821      	adds	r1, r4, r0
 800664a:	428b      	cmp	r3, r1
 800664c:	bf01      	itttt	eq
 800664e:	6819      	ldreq	r1, [r3, #0]
 8006650:	685b      	ldreq	r3, [r3, #4]
 8006652:	1809      	addeq	r1, r1, r0
 8006654:	6021      	streq	r1, [r4, #0]
 8006656:	6063      	str	r3, [r4, #4]
 8006658:	6054      	str	r4, [r2, #4]
 800665a:	e7c9      	b.n	80065f0 <_free_r+0x24>
 800665c:	bd38      	pop	{r3, r4, r5, pc}
 800665e:	bf00      	nop
 8006660:	20000624 	.word	0x20000624

08006664 <_malloc_r>:
 8006664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006666:	1ccd      	adds	r5, r1, #3
 8006668:	f025 0503 	bic.w	r5, r5, #3
 800666c:	3508      	adds	r5, #8
 800666e:	2d0c      	cmp	r5, #12
 8006670:	bf38      	it	cc
 8006672:	250c      	movcc	r5, #12
 8006674:	2d00      	cmp	r5, #0
 8006676:	4606      	mov	r6, r0
 8006678:	db01      	blt.n	800667e <_malloc_r+0x1a>
 800667a:	42a9      	cmp	r1, r5
 800667c:	d903      	bls.n	8006686 <_malloc_r+0x22>
 800667e:	230c      	movs	r3, #12
 8006680:	6033      	str	r3, [r6, #0]
 8006682:	2000      	movs	r0, #0
 8006684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006686:	f000 fa0f 	bl	8006aa8 <__malloc_lock>
 800668a:	4921      	ldr	r1, [pc, #132]	; (8006710 <_malloc_r+0xac>)
 800668c:	680a      	ldr	r2, [r1, #0]
 800668e:	4614      	mov	r4, r2
 8006690:	b99c      	cbnz	r4, 80066ba <_malloc_r+0x56>
 8006692:	4f20      	ldr	r7, [pc, #128]	; (8006714 <_malloc_r+0xb0>)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	b923      	cbnz	r3, 80066a2 <_malloc_r+0x3e>
 8006698:	4621      	mov	r1, r4
 800669a:	4630      	mov	r0, r6
 800669c:	f000 f998 	bl	80069d0 <_sbrk_r>
 80066a0:	6038      	str	r0, [r7, #0]
 80066a2:	4629      	mov	r1, r5
 80066a4:	4630      	mov	r0, r6
 80066a6:	f000 f993 	bl	80069d0 <_sbrk_r>
 80066aa:	1c43      	adds	r3, r0, #1
 80066ac:	d123      	bne.n	80066f6 <_malloc_r+0x92>
 80066ae:	230c      	movs	r3, #12
 80066b0:	4630      	mov	r0, r6
 80066b2:	6033      	str	r3, [r6, #0]
 80066b4:	f000 f9fe 	bl	8006ab4 <__malloc_unlock>
 80066b8:	e7e3      	b.n	8006682 <_malloc_r+0x1e>
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	1b5b      	subs	r3, r3, r5
 80066be:	d417      	bmi.n	80066f0 <_malloc_r+0x8c>
 80066c0:	2b0b      	cmp	r3, #11
 80066c2:	d903      	bls.n	80066cc <_malloc_r+0x68>
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	441c      	add	r4, r3
 80066c8:	6025      	str	r5, [r4, #0]
 80066ca:	e004      	b.n	80066d6 <_malloc_r+0x72>
 80066cc:	6863      	ldr	r3, [r4, #4]
 80066ce:	42a2      	cmp	r2, r4
 80066d0:	bf0c      	ite	eq
 80066d2:	600b      	streq	r3, [r1, #0]
 80066d4:	6053      	strne	r3, [r2, #4]
 80066d6:	4630      	mov	r0, r6
 80066d8:	f000 f9ec 	bl	8006ab4 <__malloc_unlock>
 80066dc:	f104 000b 	add.w	r0, r4, #11
 80066e0:	1d23      	adds	r3, r4, #4
 80066e2:	f020 0007 	bic.w	r0, r0, #7
 80066e6:	1ac2      	subs	r2, r0, r3
 80066e8:	d0cc      	beq.n	8006684 <_malloc_r+0x20>
 80066ea:	1a1b      	subs	r3, r3, r0
 80066ec:	50a3      	str	r3, [r4, r2]
 80066ee:	e7c9      	b.n	8006684 <_malloc_r+0x20>
 80066f0:	4622      	mov	r2, r4
 80066f2:	6864      	ldr	r4, [r4, #4]
 80066f4:	e7cc      	b.n	8006690 <_malloc_r+0x2c>
 80066f6:	1cc4      	adds	r4, r0, #3
 80066f8:	f024 0403 	bic.w	r4, r4, #3
 80066fc:	42a0      	cmp	r0, r4
 80066fe:	d0e3      	beq.n	80066c8 <_malloc_r+0x64>
 8006700:	1a21      	subs	r1, r4, r0
 8006702:	4630      	mov	r0, r6
 8006704:	f000 f964 	bl	80069d0 <_sbrk_r>
 8006708:	3001      	adds	r0, #1
 800670a:	d1dd      	bne.n	80066c8 <_malloc_r+0x64>
 800670c:	e7cf      	b.n	80066ae <_malloc_r+0x4a>
 800670e:	bf00      	nop
 8006710:	20000624 	.word	0x20000624
 8006714:	20000628 	.word	0x20000628

08006718 <__ssputs_r>:
 8006718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800671c:	688e      	ldr	r6, [r1, #8]
 800671e:	4682      	mov	sl, r0
 8006720:	429e      	cmp	r6, r3
 8006722:	460c      	mov	r4, r1
 8006724:	4690      	mov	r8, r2
 8006726:	461f      	mov	r7, r3
 8006728:	d838      	bhi.n	800679c <__ssputs_r+0x84>
 800672a:	898a      	ldrh	r2, [r1, #12]
 800672c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006730:	d032      	beq.n	8006798 <__ssputs_r+0x80>
 8006732:	6825      	ldr	r5, [r4, #0]
 8006734:	6909      	ldr	r1, [r1, #16]
 8006736:	3301      	adds	r3, #1
 8006738:	eba5 0901 	sub.w	r9, r5, r1
 800673c:	6965      	ldr	r5, [r4, #20]
 800673e:	444b      	add	r3, r9
 8006740:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006744:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006748:	106d      	asrs	r5, r5, #1
 800674a:	429d      	cmp	r5, r3
 800674c:	bf38      	it	cc
 800674e:	461d      	movcc	r5, r3
 8006750:	0553      	lsls	r3, r2, #21
 8006752:	d531      	bpl.n	80067b8 <__ssputs_r+0xa0>
 8006754:	4629      	mov	r1, r5
 8006756:	f7ff ff85 	bl	8006664 <_malloc_r>
 800675a:	4606      	mov	r6, r0
 800675c:	b950      	cbnz	r0, 8006774 <__ssputs_r+0x5c>
 800675e:	230c      	movs	r3, #12
 8006760:	f04f 30ff 	mov.w	r0, #4294967295
 8006764:	f8ca 3000 	str.w	r3, [sl]
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800676e:	81a3      	strh	r3, [r4, #12]
 8006770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006774:	464a      	mov	r2, r9
 8006776:	6921      	ldr	r1, [r4, #16]
 8006778:	f7ff fb8a 	bl	8005e90 <memcpy>
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006786:	81a3      	strh	r3, [r4, #12]
 8006788:	6126      	str	r6, [r4, #16]
 800678a:	444e      	add	r6, r9
 800678c:	6026      	str	r6, [r4, #0]
 800678e:	463e      	mov	r6, r7
 8006790:	6165      	str	r5, [r4, #20]
 8006792:	eba5 0509 	sub.w	r5, r5, r9
 8006796:	60a5      	str	r5, [r4, #8]
 8006798:	42be      	cmp	r6, r7
 800679a:	d900      	bls.n	800679e <__ssputs_r+0x86>
 800679c:	463e      	mov	r6, r7
 800679e:	4632      	mov	r2, r6
 80067a0:	4641      	mov	r1, r8
 80067a2:	6820      	ldr	r0, [r4, #0]
 80067a4:	f000 f966 	bl	8006a74 <memmove>
 80067a8:	68a3      	ldr	r3, [r4, #8]
 80067aa:	6822      	ldr	r2, [r4, #0]
 80067ac:	1b9b      	subs	r3, r3, r6
 80067ae:	4432      	add	r2, r6
 80067b0:	2000      	movs	r0, #0
 80067b2:	60a3      	str	r3, [r4, #8]
 80067b4:	6022      	str	r2, [r4, #0]
 80067b6:	e7db      	b.n	8006770 <__ssputs_r+0x58>
 80067b8:	462a      	mov	r2, r5
 80067ba:	f000 f981 	bl	8006ac0 <_realloc_r>
 80067be:	4606      	mov	r6, r0
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d1e1      	bne.n	8006788 <__ssputs_r+0x70>
 80067c4:	4650      	mov	r0, sl
 80067c6:	6921      	ldr	r1, [r4, #16]
 80067c8:	f7ff ff00 	bl	80065cc <_free_r>
 80067cc:	e7c7      	b.n	800675e <__ssputs_r+0x46>
	...

080067d0 <_svfiprintf_r>:
 80067d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d4:	4698      	mov	r8, r3
 80067d6:	898b      	ldrh	r3, [r1, #12]
 80067d8:	4607      	mov	r7, r0
 80067da:	061b      	lsls	r3, r3, #24
 80067dc:	460d      	mov	r5, r1
 80067de:	4614      	mov	r4, r2
 80067e0:	b09d      	sub	sp, #116	; 0x74
 80067e2:	d50e      	bpl.n	8006802 <_svfiprintf_r+0x32>
 80067e4:	690b      	ldr	r3, [r1, #16]
 80067e6:	b963      	cbnz	r3, 8006802 <_svfiprintf_r+0x32>
 80067e8:	2140      	movs	r1, #64	; 0x40
 80067ea:	f7ff ff3b 	bl	8006664 <_malloc_r>
 80067ee:	6028      	str	r0, [r5, #0]
 80067f0:	6128      	str	r0, [r5, #16]
 80067f2:	b920      	cbnz	r0, 80067fe <_svfiprintf_r+0x2e>
 80067f4:	230c      	movs	r3, #12
 80067f6:	603b      	str	r3, [r7, #0]
 80067f8:	f04f 30ff 	mov.w	r0, #4294967295
 80067fc:	e0d1      	b.n	80069a2 <_svfiprintf_r+0x1d2>
 80067fe:	2340      	movs	r3, #64	; 0x40
 8006800:	616b      	str	r3, [r5, #20]
 8006802:	2300      	movs	r3, #0
 8006804:	9309      	str	r3, [sp, #36]	; 0x24
 8006806:	2320      	movs	r3, #32
 8006808:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800680c:	2330      	movs	r3, #48	; 0x30
 800680e:	f04f 0901 	mov.w	r9, #1
 8006812:	f8cd 800c 	str.w	r8, [sp, #12]
 8006816:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80069bc <_svfiprintf_r+0x1ec>
 800681a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800681e:	4623      	mov	r3, r4
 8006820:	469a      	mov	sl, r3
 8006822:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006826:	b10a      	cbz	r2, 800682c <_svfiprintf_r+0x5c>
 8006828:	2a25      	cmp	r2, #37	; 0x25
 800682a:	d1f9      	bne.n	8006820 <_svfiprintf_r+0x50>
 800682c:	ebba 0b04 	subs.w	fp, sl, r4
 8006830:	d00b      	beq.n	800684a <_svfiprintf_r+0x7a>
 8006832:	465b      	mov	r3, fp
 8006834:	4622      	mov	r2, r4
 8006836:	4629      	mov	r1, r5
 8006838:	4638      	mov	r0, r7
 800683a:	f7ff ff6d 	bl	8006718 <__ssputs_r>
 800683e:	3001      	adds	r0, #1
 8006840:	f000 80aa 	beq.w	8006998 <_svfiprintf_r+0x1c8>
 8006844:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006846:	445a      	add	r2, fp
 8006848:	9209      	str	r2, [sp, #36]	; 0x24
 800684a:	f89a 3000 	ldrb.w	r3, [sl]
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 80a2 	beq.w	8006998 <_svfiprintf_r+0x1c8>
 8006854:	2300      	movs	r3, #0
 8006856:	f04f 32ff 	mov.w	r2, #4294967295
 800685a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800685e:	f10a 0a01 	add.w	sl, sl, #1
 8006862:	9304      	str	r3, [sp, #16]
 8006864:	9307      	str	r3, [sp, #28]
 8006866:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800686a:	931a      	str	r3, [sp, #104]	; 0x68
 800686c:	4654      	mov	r4, sl
 800686e:	2205      	movs	r2, #5
 8006870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006874:	4851      	ldr	r0, [pc, #324]	; (80069bc <_svfiprintf_r+0x1ec>)
 8006876:	f7ff fafd 	bl	8005e74 <memchr>
 800687a:	9a04      	ldr	r2, [sp, #16]
 800687c:	b9d8      	cbnz	r0, 80068b6 <_svfiprintf_r+0xe6>
 800687e:	06d0      	lsls	r0, r2, #27
 8006880:	bf44      	itt	mi
 8006882:	2320      	movmi	r3, #32
 8006884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006888:	0711      	lsls	r1, r2, #28
 800688a:	bf44      	itt	mi
 800688c:	232b      	movmi	r3, #43	; 0x2b
 800688e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006892:	f89a 3000 	ldrb.w	r3, [sl]
 8006896:	2b2a      	cmp	r3, #42	; 0x2a
 8006898:	d015      	beq.n	80068c6 <_svfiprintf_r+0xf6>
 800689a:	4654      	mov	r4, sl
 800689c:	2000      	movs	r0, #0
 800689e:	f04f 0c0a 	mov.w	ip, #10
 80068a2:	9a07      	ldr	r2, [sp, #28]
 80068a4:	4621      	mov	r1, r4
 80068a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068aa:	3b30      	subs	r3, #48	; 0x30
 80068ac:	2b09      	cmp	r3, #9
 80068ae:	d94e      	bls.n	800694e <_svfiprintf_r+0x17e>
 80068b0:	b1b0      	cbz	r0, 80068e0 <_svfiprintf_r+0x110>
 80068b2:	9207      	str	r2, [sp, #28]
 80068b4:	e014      	b.n	80068e0 <_svfiprintf_r+0x110>
 80068b6:	eba0 0308 	sub.w	r3, r0, r8
 80068ba:	fa09 f303 	lsl.w	r3, r9, r3
 80068be:	4313      	orrs	r3, r2
 80068c0:	46a2      	mov	sl, r4
 80068c2:	9304      	str	r3, [sp, #16]
 80068c4:	e7d2      	b.n	800686c <_svfiprintf_r+0x9c>
 80068c6:	9b03      	ldr	r3, [sp, #12]
 80068c8:	1d19      	adds	r1, r3, #4
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	9103      	str	r1, [sp, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	bfbb      	ittet	lt
 80068d2:	425b      	neglt	r3, r3
 80068d4:	f042 0202 	orrlt.w	r2, r2, #2
 80068d8:	9307      	strge	r3, [sp, #28]
 80068da:	9307      	strlt	r3, [sp, #28]
 80068dc:	bfb8      	it	lt
 80068de:	9204      	strlt	r2, [sp, #16]
 80068e0:	7823      	ldrb	r3, [r4, #0]
 80068e2:	2b2e      	cmp	r3, #46	; 0x2e
 80068e4:	d10c      	bne.n	8006900 <_svfiprintf_r+0x130>
 80068e6:	7863      	ldrb	r3, [r4, #1]
 80068e8:	2b2a      	cmp	r3, #42	; 0x2a
 80068ea:	d135      	bne.n	8006958 <_svfiprintf_r+0x188>
 80068ec:	9b03      	ldr	r3, [sp, #12]
 80068ee:	3402      	adds	r4, #2
 80068f0:	1d1a      	adds	r2, r3, #4
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	9203      	str	r2, [sp, #12]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	bfb8      	it	lt
 80068fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80068fe:	9305      	str	r3, [sp, #20]
 8006900:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80069cc <_svfiprintf_r+0x1fc>
 8006904:	2203      	movs	r2, #3
 8006906:	4650      	mov	r0, sl
 8006908:	7821      	ldrb	r1, [r4, #0]
 800690a:	f7ff fab3 	bl	8005e74 <memchr>
 800690e:	b140      	cbz	r0, 8006922 <_svfiprintf_r+0x152>
 8006910:	2340      	movs	r3, #64	; 0x40
 8006912:	eba0 000a 	sub.w	r0, r0, sl
 8006916:	fa03 f000 	lsl.w	r0, r3, r0
 800691a:	9b04      	ldr	r3, [sp, #16]
 800691c:	3401      	adds	r4, #1
 800691e:	4303      	orrs	r3, r0
 8006920:	9304      	str	r3, [sp, #16]
 8006922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006926:	2206      	movs	r2, #6
 8006928:	4825      	ldr	r0, [pc, #148]	; (80069c0 <_svfiprintf_r+0x1f0>)
 800692a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800692e:	f7ff faa1 	bl	8005e74 <memchr>
 8006932:	2800      	cmp	r0, #0
 8006934:	d038      	beq.n	80069a8 <_svfiprintf_r+0x1d8>
 8006936:	4b23      	ldr	r3, [pc, #140]	; (80069c4 <_svfiprintf_r+0x1f4>)
 8006938:	bb1b      	cbnz	r3, 8006982 <_svfiprintf_r+0x1b2>
 800693a:	9b03      	ldr	r3, [sp, #12]
 800693c:	3307      	adds	r3, #7
 800693e:	f023 0307 	bic.w	r3, r3, #7
 8006942:	3308      	adds	r3, #8
 8006944:	9303      	str	r3, [sp, #12]
 8006946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006948:	4433      	add	r3, r6
 800694a:	9309      	str	r3, [sp, #36]	; 0x24
 800694c:	e767      	b.n	800681e <_svfiprintf_r+0x4e>
 800694e:	460c      	mov	r4, r1
 8006950:	2001      	movs	r0, #1
 8006952:	fb0c 3202 	mla	r2, ip, r2, r3
 8006956:	e7a5      	b.n	80068a4 <_svfiprintf_r+0xd4>
 8006958:	2300      	movs	r3, #0
 800695a:	f04f 0c0a 	mov.w	ip, #10
 800695e:	4619      	mov	r1, r3
 8006960:	3401      	adds	r4, #1
 8006962:	9305      	str	r3, [sp, #20]
 8006964:	4620      	mov	r0, r4
 8006966:	f810 2b01 	ldrb.w	r2, [r0], #1
 800696a:	3a30      	subs	r2, #48	; 0x30
 800696c:	2a09      	cmp	r2, #9
 800696e:	d903      	bls.n	8006978 <_svfiprintf_r+0x1a8>
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0c5      	beq.n	8006900 <_svfiprintf_r+0x130>
 8006974:	9105      	str	r1, [sp, #20]
 8006976:	e7c3      	b.n	8006900 <_svfiprintf_r+0x130>
 8006978:	4604      	mov	r4, r0
 800697a:	2301      	movs	r3, #1
 800697c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006980:	e7f0      	b.n	8006964 <_svfiprintf_r+0x194>
 8006982:	ab03      	add	r3, sp, #12
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	462a      	mov	r2, r5
 8006988:	4638      	mov	r0, r7
 800698a:	4b0f      	ldr	r3, [pc, #60]	; (80069c8 <_svfiprintf_r+0x1f8>)
 800698c:	a904      	add	r1, sp, #16
 800698e:	f7fe f807 	bl	80049a0 <_printf_float>
 8006992:	1c42      	adds	r2, r0, #1
 8006994:	4606      	mov	r6, r0
 8006996:	d1d6      	bne.n	8006946 <_svfiprintf_r+0x176>
 8006998:	89ab      	ldrh	r3, [r5, #12]
 800699a:	065b      	lsls	r3, r3, #25
 800699c:	f53f af2c 	bmi.w	80067f8 <_svfiprintf_r+0x28>
 80069a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069a2:	b01d      	add	sp, #116	; 0x74
 80069a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a8:	ab03      	add	r3, sp, #12
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	462a      	mov	r2, r5
 80069ae:	4638      	mov	r0, r7
 80069b0:	4b05      	ldr	r3, [pc, #20]	; (80069c8 <_svfiprintf_r+0x1f8>)
 80069b2:	a904      	add	r1, sp, #16
 80069b4:	f7fe fa90 	bl	8004ed8 <_printf_i>
 80069b8:	e7eb      	b.n	8006992 <_svfiprintf_r+0x1c2>
 80069ba:	bf00      	nop
 80069bc:	08008d24 	.word	0x08008d24
 80069c0:	08008d2e 	.word	0x08008d2e
 80069c4:	080049a1 	.word	0x080049a1
 80069c8:	08006719 	.word	0x08006719
 80069cc:	08008d2a 	.word	0x08008d2a

080069d0 <_sbrk_r>:
 80069d0:	b538      	push	{r3, r4, r5, lr}
 80069d2:	2300      	movs	r3, #0
 80069d4:	4d05      	ldr	r5, [pc, #20]	; (80069ec <_sbrk_r+0x1c>)
 80069d6:	4604      	mov	r4, r0
 80069d8:	4608      	mov	r0, r1
 80069da:	602b      	str	r3, [r5, #0]
 80069dc:	f7fb fa00 	bl	8001de0 <_sbrk>
 80069e0:	1c43      	adds	r3, r0, #1
 80069e2:	d102      	bne.n	80069ea <_sbrk_r+0x1a>
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	b103      	cbz	r3, 80069ea <_sbrk_r+0x1a>
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	bd38      	pop	{r3, r4, r5, pc}
 80069ec:	2000071c 	.word	0x2000071c

080069f0 <__assert_func>:
 80069f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069f2:	4614      	mov	r4, r2
 80069f4:	461a      	mov	r2, r3
 80069f6:	4b09      	ldr	r3, [pc, #36]	; (8006a1c <__assert_func+0x2c>)
 80069f8:	4605      	mov	r5, r0
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68d8      	ldr	r0, [r3, #12]
 80069fe:	b14c      	cbz	r4, 8006a14 <__assert_func+0x24>
 8006a00:	4b07      	ldr	r3, [pc, #28]	; (8006a20 <__assert_func+0x30>)
 8006a02:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a06:	9100      	str	r1, [sp, #0]
 8006a08:	462b      	mov	r3, r5
 8006a0a:	4906      	ldr	r1, [pc, #24]	; (8006a24 <__assert_func+0x34>)
 8006a0c:	f000 f80e 	bl	8006a2c <fiprintf>
 8006a10:	f000 faa2 	bl	8006f58 <abort>
 8006a14:	4b04      	ldr	r3, [pc, #16]	; (8006a28 <__assert_func+0x38>)
 8006a16:	461c      	mov	r4, r3
 8006a18:	e7f3      	b.n	8006a02 <__assert_func+0x12>
 8006a1a:	bf00      	nop
 8006a1c:	2000001c 	.word	0x2000001c
 8006a20:	08008d35 	.word	0x08008d35
 8006a24:	08008d42 	.word	0x08008d42
 8006a28:	08008d70 	.word	0x08008d70

08006a2c <fiprintf>:
 8006a2c:	b40e      	push	{r1, r2, r3}
 8006a2e:	b503      	push	{r0, r1, lr}
 8006a30:	4601      	mov	r1, r0
 8006a32:	ab03      	add	r3, sp, #12
 8006a34:	4805      	ldr	r0, [pc, #20]	; (8006a4c <fiprintf+0x20>)
 8006a36:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a3a:	6800      	ldr	r0, [r0, #0]
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	f000 f88d 	bl	8006b5c <_vfiprintf_r>
 8006a42:	b002      	add	sp, #8
 8006a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a48:	b003      	add	sp, #12
 8006a4a:	4770      	bx	lr
 8006a4c:	2000001c 	.word	0x2000001c

08006a50 <__ascii_mbtowc>:
 8006a50:	b082      	sub	sp, #8
 8006a52:	b901      	cbnz	r1, 8006a56 <__ascii_mbtowc+0x6>
 8006a54:	a901      	add	r1, sp, #4
 8006a56:	b142      	cbz	r2, 8006a6a <__ascii_mbtowc+0x1a>
 8006a58:	b14b      	cbz	r3, 8006a6e <__ascii_mbtowc+0x1e>
 8006a5a:	7813      	ldrb	r3, [r2, #0]
 8006a5c:	600b      	str	r3, [r1, #0]
 8006a5e:	7812      	ldrb	r2, [r2, #0]
 8006a60:	1e10      	subs	r0, r2, #0
 8006a62:	bf18      	it	ne
 8006a64:	2001      	movne	r0, #1
 8006a66:	b002      	add	sp, #8
 8006a68:	4770      	bx	lr
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	e7fb      	b.n	8006a66 <__ascii_mbtowc+0x16>
 8006a6e:	f06f 0001 	mvn.w	r0, #1
 8006a72:	e7f8      	b.n	8006a66 <__ascii_mbtowc+0x16>

08006a74 <memmove>:
 8006a74:	4288      	cmp	r0, r1
 8006a76:	b510      	push	{r4, lr}
 8006a78:	eb01 0402 	add.w	r4, r1, r2
 8006a7c:	d902      	bls.n	8006a84 <memmove+0x10>
 8006a7e:	4284      	cmp	r4, r0
 8006a80:	4623      	mov	r3, r4
 8006a82:	d807      	bhi.n	8006a94 <memmove+0x20>
 8006a84:	1e43      	subs	r3, r0, #1
 8006a86:	42a1      	cmp	r1, r4
 8006a88:	d008      	beq.n	8006a9c <memmove+0x28>
 8006a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a92:	e7f8      	b.n	8006a86 <memmove+0x12>
 8006a94:	4601      	mov	r1, r0
 8006a96:	4402      	add	r2, r0
 8006a98:	428a      	cmp	r2, r1
 8006a9a:	d100      	bne.n	8006a9e <memmove+0x2a>
 8006a9c:	bd10      	pop	{r4, pc}
 8006a9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006aa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006aa6:	e7f7      	b.n	8006a98 <memmove+0x24>

08006aa8 <__malloc_lock>:
 8006aa8:	4801      	ldr	r0, [pc, #4]	; (8006ab0 <__malloc_lock+0x8>)
 8006aaa:	f000 bc15 	b.w	80072d8 <__retarget_lock_acquire_recursive>
 8006aae:	bf00      	nop
 8006ab0:	20000724 	.word	0x20000724

08006ab4 <__malloc_unlock>:
 8006ab4:	4801      	ldr	r0, [pc, #4]	; (8006abc <__malloc_unlock+0x8>)
 8006ab6:	f000 bc10 	b.w	80072da <__retarget_lock_release_recursive>
 8006aba:	bf00      	nop
 8006abc:	20000724 	.word	0x20000724

08006ac0 <_realloc_r>:
 8006ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac2:	4607      	mov	r7, r0
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	460e      	mov	r6, r1
 8006ac8:	b921      	cbnz	r1, 8006ad4 <_realloc_r+0x14>
 8006aca:	4611      	mov	r1, r2
 8006acc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006ad0:	f7ff bdc8 	b.w	8006664 <_malloc_r>
 8006ad4:	b922      	cbnz	r2, 8006ae0 <_realloc_r+0x20>
 8006ad6:	f7ff fd79 	bl	80065cc <_free_r>
 8006ada:	4625      	mov	r5, r4
 8006adc:	4628      	mov	r0, r5
 8006ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ae0:	f000 fc60 	bl	80073a4 <_malloc_usable_size_r>
 8006ae4:	42a0      	cmp	r0, r4
 8006ae6:	d20f      	bcs.n	8006b08 <_realloc_r+0x48>
 8006ae8:	4621      	mov	r1, r4
 8006aea:	4638      	mov	r0, r7
 8006aec:	f7ff fdba 	bl	8006664 <_malloc_r>
 8006af0:	4605      	mov	r5, r0
 8006af2:	2800      	cmp	r0, #0
 8006af4:	d0f2      	beq.n	8006adc <_realloc_r+0x1c>
 8006af6:	4631      	mov	r1, r6
 8006af8:	4622      	mov	r2, r4
 8006afa:	f7ff f9c9 	bl	8005e90 <memcpy>
 8006afe:	4631      	mov	r1, r6
 8006b00:	4638      	mov	r0, r7
 8006b02:	f7ff fd63 	bl	80065cc <_free_r>
 8006b06:	e7e9      	b.n	8006adc <_realloc_r+0x1c>
 8006b08:	4635      	mov	r5, r6
 8006b0a:	e7e7      	b.n	8006adc <_realloc_r+0x1c>

08006b0c <__sfputc_r>:
 8006b0c:	6893      	ldr	r3, [r2, #8]
 8006b0e:	b410      	push	{r4}
 8006b10:	3b01      	subs	r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	6093      	str	r3, [r2, #8]
 8006b16:	da07      	bge.n	8006b28 <__sfputc_r+0x1c>
 8006b18:	6994      	ldr	r4, [r2, #24]
 8006b1a:	42a3      	cmp	r3, r4
 8006b1c:	db01      	blt.n	8006b22 <__sfputc_r+0x16>
 8006b1e:	290a      	cmp	r1, #10
 8006b20:	d102      	bne.n	8006b28 <__sfputc_r+0x1c>
 8006b22:	bc10      	pop	{r4}
 8006b24:	f000 b94a 	b.w	8006dbc <__swbuf_r>
 8006b28:	6813      	ldr	r3, [r2, #0]
 8006b2a:	1c58      	adds	r0, r3, #1
 8006b2c:	6010      	str	r0, [r2, #0]
 8006b2e:	7019      	strb	r1, [r3, #0]
 8006b30:	4608      	mov	r0, r1
 8006b32:	bc10      	pop	{r4}
 8006b34:	4770      	bx	lr

08006b36 <__sfputs_r>:
 8006b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b38:	4606      	mov	r6, r0
 8006b3a:	460f      	mov	r7, r1
 8006b3c:	4614      	mov	r4, r2
 8006b3e:	18d5      	adds	r5, r2, r3
 8006b40:	42ac      	cmp	r4, r5
 8006b42:	d101      	bne.n	8006b48 <__sfputs_r+0x12>
 8006b44:	2000      	movs	r0, #0
 8006b46:	e007      	b.n	8006b58 <__sfputs_r+0x22>
 8006b48:	463a      	mov	r2, r7
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b50:	f7ff ffdc 	bl	8006b0c <__sfputc_r>
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	d1f3      	bne.n	8006b40 <__sfputs_r+0xa>
 8006b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b5c <_vfiprintf_r>:
 8006b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b60:	460d      	mov	r5, r1
 8006b62:	4614      	mov	r4, r2
 8006b64:	4698      	mov	r8, r3
 8006b66:	4606      	mov	r6, r0
 8006b68:	b09d      	sub	sp, #116	; 0x74
 8006b6a:	b118      	cbz	r0, 8006b74 <_vfiprintf_r+0x18>
 8006b6c:	6983      	ldr	r3, [r0, #24]
 8006b6e:	b90b      	cbnz	r3, 8006b74 <_vfiprintf_r+0x18>
 8006b70:	f000 fb14 	bl	800719c <__sinit>
 8006b74:	4b89      	ldr	r3, [pc, #548]	; (8006d9c <_vfiprintf_r+0x240>)
 8006b76:	429d      	cmp	r5, r3
 8006b78:	d11b      	bne.n	8006bb2 <_vfiprintf_r+0x56>
 8006b7a:	6875      	ldr	r5, [r6, #4]
 8006b7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b7e:	07d9      	lsls	r1, r3, #31
 8006b80:	d405      	bmi.n	8006b8e <_vfiprintf_r+0x32>
 8006b82:	89ab      	ldrh	r3, [r5, #12]
 8006b84:	059a      	lsls	r2, r3, #22
 8006b86:	d402      	bmi.n	8006b8e <_vfiprintf_r+0x32>
 8006b88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b8a:	f000 fba5 	bl	80072d8 <__retarget_lock_acquire_recursive>
 8006b8e:	89ab      	ldrh	r3, [r5, #12]
 8006b90:	071b      	lsls	r3, r3, #28
 8006b92:	d501      	bpl.n	8006b98 <_vfiprintf_r+0x3c>
 8006b94:	692b      	ldr	r3, [r5, #16]
 8006b96:	b9eb      	cbnz	r3, 8006bd4 <_vfiprintf_r+0x78>
 8006b98:	4629      	mov	r1, r5
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	f000 f96e 	bl	8006e7c <__swsetup_r>
 8006ba0:	b1c0      	cbz	r0, 8006bd4 <_vfiprintf_r+0x78>
 8006ba2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ba4:	07dc      	lsls	r4, r3, #31
 8006ba6:	d50e      	bpl.n	8006bc6 <_vfiprintf_r+0x6a>
 8006ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bac:	b01d      	add	sp, #116	; 0x74
 8006bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb2:	4b7b      	ldr	r3, [pc, #492]	; (8006da0 <_vfiprintf_r+0x244>)
 8006bb4:	429d      	cmp	r5, r3
 8006bb6:	d101      	bne.n	8006bbc <_vfiprintf_r+0x60>
 8006bb8:	68b5      	ldr	r5, [r6, #8]
 8006bba:	e7df      	b.n	8006b7c <_vfiprintf_r+0x20>
 8006bbc:	4b79      	ldr	r3, [pc, #484]	; (8006da4 <_vfiprintf_r+0x248>)
 8006bbe:	429d      	cmp	r5, r3
 8006bc0:	bf08      	it	eq
 8006bc2:	68f5      	ldreq	r5, [r6, #12]
 8006bc4:	e7da      	b.n	8006b7c <_vfiprintf_r+0x20>
 8006bc6:	89ab      	ldrh	r3, [r5, #12]
 8006bc8:	0598      	lsls	r0, r3, #22
 8006bca:	d4ed      	bmi.n	8006ba8 <_vfiprintf_r+0x4c>
 8006bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bce:	f000 fb84 	bl	80072da <__retarget_lock_release_recursive>
 8006bd2:	e7e9      	b.n	8006ba8 <_vfiprintf_r+0x4c>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8006bd8:	2320      	movs	r3, #32
 8006bda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bde:	2330      	movs	r3, #48	; 0x30
 8006be0:	f04f 0901 	mov.w	r9, #1
 8006be4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006be8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006da8 <_vfiprintf_r+0x24c>
 8006bec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bf0:	4623      	mov	r3, r4
 8006bf2:	469a      	mov	sl, r3
 8006bf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bf8:	b10a      	cbz	r2, 8006bfe <_vfiprintf_r+0xa2>
 8006bfa:	2a25      	cmp	r2, #37	; 0x25
 8006bfc:	d1f9      	bne.n	8006bf2 <_vfiprintf_r+0x96>
 8006bfe:	ebba 0b04 	subs.w	fp, sl, r4
 8006c02:	d00b      	beq.n	8006c1c <_vfiprintf_r+0xc0>
 8006c04:	465b      	mov	r3, fp
 8006c06:	4622      	mov	r2, r4
 8006c08:	4629      	mov	r1, r5
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f7ff ff93 	bl	8006b36 <__sfputs_r>
 8006c10:	3001      	adds	r0, #1
 8006c12:	f000 80aa 	beq.w	8006d6a <_vfiprintf_r+0x20e>
 8006c16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c18:	445a      	add	r2, fp
 8006c1a:	9209      	str	r2, [sp, #36]	; 0x24
 8006c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 80a2 	beq.w	8006d6a <_vfiprintf_r+0x20e>
 8006c26:	2300      	movs	r3, #0
 8006c28:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c30:	f10a 0a01 	add.w	sl, sl, #1
 8006c34:	9304      	str	r3, [sp, #16]
 8006c36:	9307      	str	r3, [sp, #28]
 8006c38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c3c:	931a      	str	r3, [sp, #104]	; 0x68
 8006c3e:	4654      	mov	r4, sl
 8006c40:	2205      	movs	r2, #5
 8006c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c46:	4858      	ldr	r0, [pc, #352]	; (8006da8 <_vfiprintf_r+0x24c>)
 8006c48:	f7ff f914 	bl	8005e74 <memchr>
 8006c4c:	9a04      	ldr	r2, [sp, #16]
 8006c4e:	b9d8      	cbnz	r0, 8006c88 <_vfiprintf_r+0x12c>
 8006c50:	06d1      	lsls	r1, r2, #27
 8006c52:	bf44      	itt	mi
 8006c54:	2320      	movmi	r3, #32
 8006c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c5a:	0713      	lsls	r3, r2, #28
 8006c5c:	bf44      	itt	mi
 8006c5e:	232b      	movmi	r3, #43	; 0x2b
 8006c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c64:	f89a 3000 	ldrb.w	r3, [sl]
 8006c68:	2b2a      	cmp	r3, #42	; 0x2a
 8006c6a:	d015      	beq.n	8006c98 <_vfiprintf_r+0x13c>
 8006c6c:	4654      	mov	r4, sl
 8006c6e:	2000      	movs	r0, #0
 8006c70:	f04f 0c0a 	mov.w	ip, #10
 8006c74:	9a07      	ldr	r2, [sp, #28]
 8006c76:	4621      	mov	r1, r4
 8006c78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c7c:	3b30      	subs	r3, #48	; 0x30
 8006c7e:	2b09      	cmp	r3, #9
 8006c80:	d94e      	bls.n	8006d20 <_vfiprintf_r+0x1c4>
 8006c82:	b1b0      	cbz	r0, 8006cb2 <_vfiprintf_r+0x156>
 8006c84:	9207      	str	r2, [sp, #28]
 8006c86:	e014      	b.n	8006cb2 <_vfiprintf_r+0x156>
 8006c88:	eba0 0308 	sub.w	r3, r0, r8
 8006c8c:	fa09 f303 	lsl.w	r3, r9, r3
 8006c90:	4313      	orrs	r3, r2
 8006c92:	46a2      	mov	sl, r4
 8006c94:	9304      	str	r3, [sp, #16]
 8006c96:	e7d2      	b.n	8006c3e <_vfiprintf_r+0xe2>
 8006c98:	9b03      	ldr	r3, [sp, #12]
 8006c9a:	1d19      	adds	r1, r3, #4
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	9103      	str	r1, [sp, #12]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	bfbb      	ittet	lt
 8006ca4:	425b      	neglt	r3, r3
 8006ca6:	f042 0202 	orrlt.w	r2, r2, #2
 8006caa:	9307      	strge	r3, [sp, #28]
 8006cac:	9307      	strlt	r3, [sp, #28]
 8006cae:	bfb8      	it	lt
 8006cb0:	9204      	strlt	r2, [sp, #16]
 8006cb2:	7823      	ldrb	r3, [r4, #0]
 8006cb4:	2b2e      	cmp	r3, #46	; 0x2e
 8006cb6:	d10c      	bne.n	8006cd2 <_vfiprintf_r+0x176>
 8006cb8:	7863      	ldrb	r3, [r4, #1]
 8006cba:	2b2a      	cmp	r3, #42	; 0x2a
 8006cbc:	d135      	bne.n	8006d2a <_vfiprintf_r+0x1ce>
 8006cbe:	9b03      	ldr	r3, [sp, #12]
 8006cc0:	3402      	adds	r4, #2
 8006cc2:	1d1a      	adds	r2, r3, #4
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	9203      	str	r2, [sp, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	bfb8      	it	lt
 8006ccc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cd0:	9305      	str	r3, [sp, #20]
 8006cd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006db8 <_vfiprintf_r+0x25c>
 8006cd6:	2203      	movs	r2, #3
 8006cd8:	4650      	mov	r0, sl
 8006cda:	7821      	ldrb	r1, [r4, #0]
 8006cdc:	f7ff f8ca 	bl	8005e74 <memchr>
 8006ce0:	b140      	cbz	r0, 8006cf4 <_vfiprintf_r+0x198>
 8006ce2:	2340      	movs	r3, #64	; 0x40
 8006ce4:	eba0 000a 	sub.w	r0, r0, sl
 8006ce8:	fa03 f000 	lsl.w	r0, r3, r0
 8006cec:	9b04      	ldr	r3, [sp, #16]
 8006cee:	3401      	adds	r4, #1
 8006cf0:	4303      	orrs	r3, r0
 8006cf2:	9304      	str	r3, [sp, #16]
 8006cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cf8:	2206      	movs	r2, #6
 8006cfa:	482c      	ldr	r0, [pc, #176]	; (8006dac <_vfiprintf_r+0x250>)
 8006cfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d00:	f7ff f8b8 	bl	8005e74 <memchr>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d03f      	beq.n	8006d88 <_vfiprintf_r+0x22c>
 8006d08:	4b29      	ldr	r3, [pc, #164]	; (8006db0 <_vfiprintf_r+0x254>)
 8006d0a:	bb1b      	cbnz	r3, 8006d54 <_vfiprintf_r+0x1f8>
 8006d0c:	9b03      	ldr	r3, [sp, #12]
 8006d0e:	3307      	adds	r3, #7
 8006d10:	f023 0307 	bic.w	r3, r3, #7
 8006d14:	3308      	adds	r3, #8
 8006d16:	9303      	str	r3, [sp, #12]
 8006d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d1a:	443b      	add	r3, r7
 8006d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d1e:	e767      	b.n	8006bf0 <_vfiprintf_r+0x94>
 8006d20:	460c      	mov	r4, r1
 8006d22:	2001      	movs	r0, #1
 8006d24:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d28:	e7a5      	b.n	8006c76 <_vfiprintf_r+0x11a>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f04f 0c0a 	mov.w	ip, #10
 8006d30:	4619      	mov	r1, r3
 8006d32:	3401      	adds	r4, #1
 8006d34:	9305      	str	r3, [sp, #20]
 8006d36:	4620      	mov	r0, r4
 8006d38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d3c:	3a30      	subs	r2, #48	; 0x30
 8006d3e:	2a09      	cmp	r2, #9
 8006d40:	d903      	bls.n	8006d4a <_vfiprintf_r+0x1ee>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0c5      	beq.n	8006cd2 <_vfiprintf_r+0x176>
 8006d46:	9105      	str	r1, [sp, #20]
 8006d48:	e7c3      	b.n	8006cd2 <_vfiprintf_r+0x176>
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d52:	e7f0      	b.n	8006d36 <_vfiprintf_r+0x1da>
 8006d54:	ab03      	add	r3, sp, #12
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	462a      	mov	r2, r5
 8006d5a:	4630      	mov	r0, r6
 8006d5c:	4b15      	ldr	r3, [pc, #84]	; (8006db4 <_vfiprintf_r+0x258>)
 8006d5e:	a904      	add	r1, sp, #16
 8006d60:	f7fd fe1e 	bl	80049a0 <_printf_float>
 8006d64:	4607      	mov	r7, r0
 8006d66:	1c78      	adds	r0, r7, #1
 8006d68:	d1d6      	bne.n	8006d18 <_vfiprintf_r+0x1bc>
 8006d6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d6c:	07d9      	lsls	r1, r3, #31
 8006d6e:	d405      	bmi.n	8006d7c <_vfiprintf_r+0x220>
 8006d70:	89ab      	ldrh	r3, [r5, #12]
 8006d72:	059a      	lsls	r2, r3, #22
 8006d74:	d402      	bmi.n	8006d7c <_vfiprintf_r+0x220>
 8006d76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d78:	f000 faaf 	bl	80072da <__retarget_lock_release_recursive>
 8006d7c:	89ab      	ldrh	r3, [r5, #12]
 8006d7e:	065b      	lsls	r3, r3, #25
 8006d80:	f53f af12 	bmi.w	8006ba8 <_vfiprintf_r+0x4c>
 8006d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d86:	e711      	b.n	8006bac <_vfiprintf_r+0x50>
 8006d88:	ab03      	add	r3, sp, #12
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	462a      	mov	r2, r5
 8006d8e:	4630      	mov	r0, r6
 8006d90:	4b08      	ldr	r3, [pc, #32]	; (8006db4 <_vfiprintf_r+0x258>)
 8006d92:	a904      	add	r1, sp, #16
 8006d94:	f7fe f8a0 	bl	8004ed8 <_printf_i>
 8006d98:	e7e4      	b.n	8006d64 <_vfiprintf_r+0x208>
 8006d9a:	bf00      	nop
 8006d9c:	08008e9c 	.word	0x08008e9c
 8006da0:	08008ebc 	.word	0x08008ebc
 8006da4:	08008e7c 	.word	0x08008e7c
 8006da8:	08008d24 	.word	0x08008d24
 8006dac:	08008d2e 	.word	0x08008d2e
 8006db0:	080049a1 	.word	0x080049a1
 8006db4:	08006b37 	.word	0x08006b37
 8006db8:	08008d2a 	.word	0x08008d2a

08006dbc <__swbuf_r>:
 8006dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dbe:	460e      	mov	r6, r1
 8006dc0:	4614      	mov	r4, r2
 8006dc2:	4605      	mov	r5, r0
 8006dc4:	b118      	cbz	r0, 8006dce <__swbuf_r+0x12>
 8006dc6:	6983      	ldr	r3, [r0, #24]
 8006dc8:	b90b      	cbnz	r3, 8006dce <__swbuf_r+0x12>
 8006dca:	f000 f9e7 	bl	800719c <__sinit>
 8006dce:	4b21      	ldr	r3, [pc, #132]	; (8006e54 <__swbuf_r+0x98>)
 8006dd0:	429c      	cmp	r4, r3
 8006dd2:	d12b      	bne.n	8006e2c <__swbuf_r+0x70>
 8006dd4:	686c      	ldr	r4, [r5, #4]
 8006dd6:	69a3      	ldr	r3, [r4, #24]
 8006dd8:	60a3      	str	r3, [r4, #8]
 8006dda:	89a3      	ldrh	r3, [r4, #12]
 8006ddc:	071a      	lsls	r2, r3, #28
 8006dde:	d52f      	bpl.n	8006e40 <__swbuf_r+0x84>
 8006de0:	6923      	ldr	r3, [r4, #16]
 8006de2:	b36b      	cbz	r3, 8006e40 <__swbuf_r+0x84>
 8006de4:	6923      	ldr	r3, [r4, #16]
 8006de6:	6820      	ldr	r0, [r4, #0]
 8006de8:	b2f6      	uxtb	r6, r6
 8006dea:	1ac0      	subs	r0, r0, r3
 8006dec:	6963      	ldr	r3, [r4, #20]
 8006dee:	4637      	mov	r7, r6
 8006df0:	4283      	cmp	r3, r0
 8006df2:	dc04      	bgt.n	8006dfe <__swbuf_r+0x42>
 8006df4:	4621      	mov	r1, r4
 8006df6:	4628      	mov	r0, r5
 8006df8:	f000 f93c 	bl	8007074 <_fflush_r>
 8006dfc:	bb30      	cbnz	r0, 8006e4c <__swbuf_r+0x90>
 8006dfe:	68a3      	ldr	r3, [r4, #8]
 8006e00:	3001      	adds	r0, #1
 8006e02:	3b01      	subs	r3, #1
 8006e04:	60a3      	str	r3, [r4, #8]
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	1c5a      	adds	r2, r3, #1
 8006e0a:	6022      	str	r2, [r4, #0]
 8006e0c:	701e      	strb	r6, [r3, #0]
 8006e0e:	6963      	ldr	r3, [r4, #20]
 8006e10:	4283      	cmp	r3, r0
 8006e12:	d004      	beq.n	8006e1e <__swbuf_r+0x62>
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	07db      	lsls	r3, r3, #31
 8006e18:	d506      	bpl.n	8006e28 <__swbuf_r+0x6c>
 8006e1a:	2e0a      	cmp	r6, #10
 8006e1c:	d104      	bne.n	8006e28 <__swbuf_r+0x6c>
 8006e1e:	4621      	mov	r1, r4
 8006e20:	4628      	mov	r0, r5
 8006e22:	f000 f927 	bl	8007074 <_fflush_r>
 8006e26:	b988      	cbnz	r0, 8006e4c <__swbuf_r+0x90>
 8006e28:	4638      	mov	r0, r7
 8006e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e2c:	4b0a      	ldr	r3, [pc, #40]	; (8006e58 <__swbuf_r+0x9c>)
 8006e2e:	429c      	cmp	r4, r3
 8006e30:	d101      	bne.n	8006e36 <__swbuf_r+0x7a>
 8006e32:	68ac      	ldr	r4, [r5, #8]
 8006e34:	e7cf      	b.n	8006dd6 <__swbuf_r+0x1a>
 8006e36:	4b09      	ldr	r3, [pc, #36]	; (8006e5c <__swbuf_r+0xa0>)
 8006e38:	429c      	cmp	r4, r3
 8006e3a:	bf08      	it	eq
 8006e3c:	68ec      	ldreq	r4, [r5, #12]
 8006e3e:	e7ca      	b.n	8006dd6 <__swbuf_r+0x1a>
 8006e40:	4621      	mov	r1, r4
 8006e42:	4628      	mov	r0, r5
 8006e44:	f000 f81a 	bl	8006e7c <__swsetup_r>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d0cb      	beq.n	8006de4 <__swbuf_r+0x28>
 8006e4c:	f04f 37ff 	mov.w	r7, #4294967295
 8006e50:	e7ea      	b.n	8006e28 <__swbuf_r+0x6c>
 8006e52:	bf00      	nop
 8006e54:	08008e9c 	.word	0x08008e9c
 8006e58:	08008ebc 	.word	0x08008ebc
 8006e5c:	08008e7c 	.word	0x08008e7c

08006e60 <__ascii_wctomb>:
 8006e60:	4603      	mov	r3, r0
 8006e62:	4608      	mov	r0, r1
 8006e64:	b141      	cbz	r1, 8006e78 <__ascii_wctomb+0x18>
 8006e66:	2aff      	cmp	r2, #255	; 0xff
 8006e68:	d904      	bls.n	8006e74 <__ascii_wctomb+0x14>
 8006e6a:	228a      	movs	r2, #138	; 0x8a
 8006e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	4770      	bx	lr
 8006e74:	2001      	movs	r0, #1
 8006e76:	700a      	strb	r2, [r1, #0]
 8006e78:	4770      	bx	lr
	...

08006e7c <__swsetup_r>:
 8006e7c:	4b32      	ldr	r3, [pc, #200]	; (8006f48 <__swsetup_r+0xcc>)
 8006e7e:	b570      	push	{r4, r5, r6, lr}
 8006e80:	681d      	ldr	r5, [r3, #0]
 8006e82:	4606      	mov	r6, r0
 8006e84:	460c      	mov	r4, r1
 8006e86:	b125      	cbz	r5, 8006e92 <__swsetup_r+0x16>
 8006e88:	69ab      	ldr	r3, [r5, #24]
 8006e8a:	b913      	cbnz	r3, 8006e92 <__swsetup_r+0x16>
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	f000 f985 	bl	800719c <__sinit>
 8006e92:	4b2e      	ldr	r3, [pc, #184]	; (8006f4c <__swsetup_r+0xd0>)
 8006e94:	429c      	cmp	r4, r3
 8006e96:	d10f      	bne.n	8006eb8 <__swsetup_r+0x3c>
 8006e98:	686c      	ldr	r4, [r5, #4]
 8006e9a:	89a3      	ldrh	r3, [r4, #12]
 8006e9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ea0:	0719      	lsls	r1, r3, #28
 8006ea2:	d42c      	bmi.n	8006efe <__swsetup_r+0x82>
 8006ea4:	06dd      	lsls	r5, r3, #27
 8006ea6:	d411      	bmi.n	8006ecc <__swsetup_r+0x50>
 8006ea8:	2309      	movs	r3, #9
 8006eaa:	6033      	str	r3, [r6, #0]
 8006eac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb4:	81a3      	strh	r3, [r4, #12]
 8006eb6:	e03e      	b.n	8006f36 <__swsetup_r+0xba>
 8006eb8:	4b25      	ldr	r3, [pc, #148]	; (8006f50 <__swsetup_r+0xd4>)
 8006eba:	429c      	cmp	r4, r3
 8006ebc:	d101      	bne.n	8006ec2 <__swsetup_r+0x46>
 8006ebe:	68ac      	ldr	r4, [r5, #8]
 8006ec0:	e7eb      	b.n	8006e9a <__swsetup_r+0x1e>
 8006ec2:	4b24      	ldr	r3, [pc, #144]	; (8006f54 <__swsetup_r+0xd8>)
 8006ec4:	429c      	cmp	r4, r3
 8006ec6:	bf08      	it	eq
 8006ec8:	68ec      	ldreq	r4, [r5, #12]
 8006eca:	e7e6      	b.n	8006e9a <__swsetup_r+0x1e>
 8006ecc:	0758      	lsls	r0, r3, #29
 8006ece:	d512      	bpl.n	8006ef6 <__swsetup_r+0x7a>
 8006ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ed2:	b141      	cbz	r1, 8006ee6 <__swsetup_r+0x6a>
 8006ed4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ed8:	4299      	cmp	r1, r3
 8006eda:	d002      	beq.n	8006ee2 <__swsetup_r+0x66>
 8006edc:	4630      	mov	r0, r6
 8006ede:	f7ff fb75 	bl	80065cc <_free_r>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	6363      	str	r3, [r4, #52]	; 0x34
 8006ee6:	89a3      	ldrh	r3, [r4, #12]
 8006ee8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006eec:	81a3      	strh	r3, [r4, #12]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	6063      	str	r3, [r4, #4]
 8006ef2:	6923      	ldr	r3, [r4, #16]
 8006ef4:	6023      	str	r3, [r4, #0]
 8006ef6:	89a3      	ldrh	r3, [r4, #12]
 8006ef8:	f043 0308 	orr.w	r3, r3, #8
 8006efc:	81a3      	strh	r3, [r4, #12]
 8006efe:	6923      	ldr	r3, [r4, #16]
 8006f00:	b94b      	cbnz	r3, 8006f16 <__swsetup_r+0x9a>
 8006f02:	89a3      	ldrh	r3, [r4, #12]
 8006f04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f0c:	d003      	beq.n	8006f16 <__swsetup_r+0x9a>
 8006f0e:	4621      	mov	r1, r4
 8006f10:	4630      	mov	r0, r6
 8006f12:	f000 fa07 	bl	8007324 <__smakebuf_r>
 8006f16:	89a0      	ldrh	r0, [r4, #12]
 8006f18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f1c:	f010 0301 	ands.w	r3, r0, #1
 8006f20:	d00a      	beq.n	8006f38 <__swsetup_r+0xbc>
 8006f22:	2300      	movs	r3, #0
 8006f24:	60a3      	str	r3, [r4, #8]
 8006f26:	6963      	ldr	r3, [r4, #20]
 8006f28:	425b      	negs	r3, r3
 8006f2a:	61a3      	str	r3, [r4, #24]
 8006f2c:	6923      	ldr	r3, [r4, #16]
 8006f2e:	b943      	cbnz	r3, 8006f42 <__swsetup_r+0xc6>
 8006f30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f34:	d1ba      	bne.n	8006eac <__swsetup_r+0x30>
 8006f36:	bd70      	pop	{r4, r5, r6, pc}
 8006f38:	0781      	lsls	r1, r0, #30
 8006f3a:	bf58      	it	pl
 8006f3c:	6963      	ldrpl	r3, [r4, #20]
 8006f3e:	60a3      	str	r3, [r4, #8]
 8006f40:	e7f4      	b.n	8006f2c <__swsetup_r+0xb0>
 8006f42:	2000      	movs	r0, #0
 8006f44:	e7f7      	b.n	8006f36 <__swsetup_r+0xba>
 8006f46:	bf00      	nop
 8006f48:	2000001c 	.word	0x2000001c
 8006f4c:	08008e9c 	.word	0x08008e9c
 8006f50:	08008ebc 	.word	0x08008ebc
 8006f54:	08008e7c 	.word	0x08008e7c

08006f58 <abort>:
 8006f58:	2006      	movs	r0, #6
 8006f5a:	b508      	push	{r3, lr}
 8006f5c:	f000 fa52 	bl	8007404 <raise>
 8006f60:	2001      	movs	r0, #1
 8006f62:	f7fa fec9 	bl	8001cf8 <_exit>
	...

08006f68 <__sflush_r>:
 8006f68:	898a      	ldrh	r2, [r1, #12]
 8006f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f6e:	4605      	mov	r5, r0
 8006f70:	0710      	lsls	r0, r2, #28
 8006f72:	460c      	mov	r4, r1
 8006f74:	d458      	bmi.n	8007028 <__sflush_r+0xc0>
 8006f76:	684b      	ldr	r3, [r1, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	dc05      	bgt.n	8006f88 <__sflush_r+0x20>
 8006f7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	dc02      	bgt.n	8006f88 <__sflush_r+0x20>
 8006f82:	2000      	movs	r0, #0
 8006f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f8a:	2e00      	cmp	r6, #0
 8006f8c:	d0f9      	beq.n	8006f82 <__sflush_r+0x1a>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f94:	682f      	ldr	r7, [r5, #0]
 8006f96:	602b      	str	r3, [r5, #0]
 8006f98:	d032      	beq.n	8007000 <__sflush_r+0x98>
 8006f9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f9c:	89a3      	ldrh	r3, [r4, #12]
 8006f9e:	075a      	lsls	r2, r3, #29
 8006fa0:	d505      	bpl.n	8006fae <__sflush_r+0x46>
 8006fa2:	6863      	ldr	r3, [r4, #4]
 8006fa4:	1ac0      	subs	r0, r0, r3
 8006fa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006fa8:	b10b      	cbz	r3, 8006fae <__sflush_r+0x46>
 8006faa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fac:	1ac0      	subs	r0, r0, r3
 8006fae:	2300      	movs	r3, #0
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	6a21      	ldr	r1, [r4, #32]
 8006fb8:	47b0      	blx	r6
 8006fba:	1c43      	adds	r3, r0, #1
 8006fbc:	89a3      	ldrh	r3, [r4, #12]
 8006fbe:	d106      	bne.n	8006fce <__sflush_r+0x66>
 8006fc0:	6829      	ldr	r1, [r5, #0]
 8006fc2:	291d      	cmp	r1, #29
 8006fc4:	d82c      	bhi.n	8007020 <__sflush_r+0xb8>
 8006fc6:	4a2a      	ldr	r2, [pc, #168]	; (8007070 <__sflush_r+0x108>)
 8006fc8:	40ca      	lsrs	r2, r1
 8006fca:	07d6      	lsls	r6, r2, #31
 8006fcc:	d528      	bpl.n	8007020 <__sflush_r+0xb8>
 8006fce:	2200      	movs	r2, #0
 8006fd0:	6062      	str	r2, [r4, #4]
 8006fd2:	6922      	ldr	r2, [r4, #16]
 8006fd4:	04d9      	lsls	r1, r3, #19
 8006fd6:	6022      	str	r2, [r4, #0]
 8006fd8:	d504      	bpl.n	8006fe4 <__sflush_r+0x7c>
 8006fda:	1c42      	adds	r2, r0, #1
 8006fdc:	d101      	bne.n	8006fe2 <__sflush_r+0x7a>
 8006fde:	682b      	ldr	r3, [r5, #0]
 8006fe0:	b903      	cbnz	r3, 8006fe4 <__sflush_r+0x7c>
 8006fe2:	6560      	str	r0, [r4, #84]	; 0x54
 8006fe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fe6:	602f      	str	r7, [r5, #0]
 8006fe8:	2900      	cmp	r1, #0
 8006fea:	d0ca      	beq.n	8006f82 <__sflush_r+0x1a>
 8006fec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ff0:	4299      	cmp	r1, r3
 8006ff2:	d002      	beq.n	8006ffa <__sflush_r+0x92>
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	f7ff fae9 	bl	80065cc <_free_r>
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	6360      	str	r0, [r4, #52]	; 0x34
 8006ffe:	e7c1      	b.n	8006f84 <__sflush_r+0x1c>
 8007000:	6a21      	ldr	r1, [r4, #32]
 8007002:	2301      	movs	r3, #1
 8007004:	4628      	mov	r0, r5
 8007006:	47b0      	blx	r6
 8007008:	1c41      	adds	r1, r0, #1
 800700a:	d1c7      	bne.n	8006f9c <__sflush_r+0x34>
 800700c:	682b      	ldr	r3, [r5, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d0c4      	beq.n	8006f9c <__sflush_r+0x34>
 8007012:	2b1d      	cmp	r3, #29
 8007014:	d001      	beq.n	800701a <__sflush_r+0xb2>
 8007016:	2b16      	cmp	r3, #22
 8007018:	d101      	bne.n	800701e <__sflush_r+0xb6>
 800701a:	602f      	str	r7, [r5, #0]
 800701c:	e7b1      	b.n	8006f82 <__sflush_r+0x1a>
 800701e:	89a3      	ldrh	r3, [r4, #12]
 8007020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007024:	81a3      	strh	r3, [r4, #12]
 8007026:	e7ad      	b.n	8006f84 <__sflush_r+0x1c>
 8007028:	690f      	ldr	r7, [r1, #16]
 800702a:	2f00      	cmp	r7, #0
 800702c:	d0a9      	beq.n	8006f82 <__sflush_r+0x1a>
 800702e:	0793      	lsls	r3, r2, #30
 8007030:	bf18      	it	ne
 8007032:	2300      	movne	r3, #0
 8007034:	680e      	ldr	r6, [r1, #0]
 8007036:	bf08      	it	eq
 8007038:	694b      	ldreq	r3, [r1, #20]
 800703a:	eba6 0807 	sub.w	r8, r6, r7
 800703e:	600f      	str	r7, [r1, #0]
 8007040:	608b      	str	r3, [r1, #8]
 8007042:	f1b8 0f00 	cmp.w	r8, #0
 8007046:	dd9c      	ble.n	8006f82 <__sflush_r+0x1a>
 8007048:	4643      	mov	r3, r8
 800704a:	463a      	mov	r2, r7
 800704c:	4628      	mov	r0, r5
 800704e:	6a21      	ldr	r1, [r4, #32]
 8007050:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007052:	47b0      	blx	r6
 8007054:	2800      	cmp	r0, #0
 8007056:	dc06      	bgt.n	8007066 <__sflush_r+0xfe>
 8007058:	89a3      	ldrh	r3, [r4, #12]
 800705a:	f04f 30ff 	mov.w	r0, #4294967295
 800705e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007062:	81a3      	strh	r3, [r4, #12]
 8007064:	e78e      	b.n	8006f84 <__sflush_r+0x1c>
 8007066:	4407      	add	r7, r0
 8007068:	eba8 0800 	sub.w	r8, r8, r0
 800706c:	e7e9      	b.n	8007042 <__sflush_r+0xda>
 800706e:	bf00      	nop
 8007070:	20400001 	.word	0x20400001

08007074 <_fflush_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	690b      	ldr	r3, [r1, #16]
 8007078:	4605      	mov	r5, r0
 800707a:	460c      	mov	r4, r1
 800707c:	b913      	cbnz	r3, 8007084 <_fflush_r+0x10>
 800707e:	2500      	movs	r5, #0
 8007080:	4628      	mov	r0, r5
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	b118      	cbz	r0, 800708e <_fflush_r+0x1a>
 8007086:	6983      	ldr	r3, [r0, #24]
 8007088:	b90b      	cbnz	r3, 800708e <_fflush_r+0x1a>
 800708a:	f000 f887 	bl	800719c <__sinit>
 800708e:	4b14      	ldr	r3, [pc, #80]	; (80070e0 <_fflush_r+0x6c>)
 8007090:	429c      	cmp	r4, r3
 8007092:	d11b      	bne.n	80070cc <_fflush_r+0x58>
 8007094:	686c      	ldr	r4, [r5, #4]
 8007096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d0ef      	beq.n	800707e <_fflush_r+0xa>
 800709e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070a0:	07d0      	lsls	r0, r2, #31
 80070a2:	d404      	bmi.n	80070ae <_fflush_r+0x3a>
 80070a4:	0599      	lsls	r1, r3, #22
 80070a6:	d402      	bmi.n	80070ae <_fflush_r+0x3a>
 80070a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070aa:	f000 f915 	bl	80072d8 <__retarget_lock_acquire_recursive>
 80070ae:	4628      	mov	r0, r5
 80070b0:	4621      	mov	r1, r4
 80070b2:	f7ff ff59 	bl	8006f68 <__sflush_r>
 80070b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070b8:	4605      	mov	r5, r0
 80070ba:	07da      	lsls	r2, r3, #31
 80070bc:	d4e0      	bmi.n	8007080 <_fflush_r+0xc>
 80070be:	89a3      	ldrh	r3, [r4, #12]
 80070c0:	059b      	lsls	r3, r3, #22
 80070c2:	d4dd      	bmi.n	8007080 <_fflush_r+0xc>
 80070c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070c6:	f000 f908 	bl	80072da <__retarget_lock_release_recursive>
 80070ca:	e7d9      	b.n	8007080 <_fflush_r+0xc>
 80070cc:	4b05      	ldr	r3, [pc, #20]	; (80070e4 <_fflush_r+0x70>)
 80070ce:	429c      	cmp	r4, r3
 80070d0:	d101      	bne.n	80070d6 <_fflush_r+0x62>
 80070d2:	68ac      	ldr	r4, [r5, #8]
 80070d4:	e7df      	b.n	8007096 <_fflush_r+0x22>
 80070d6:	4b04      	ldr	r3, [pc, #16]	; (80070e8 <_fflush_r+0x74>)
 80070d8:	429c      	cmp	r4, r3
 80070da:	bf08      	it	eq
 80070dc:	68ec      	ldreq	r4, [r5, #12]
 80070de:	e7da      	b.n	8007096 <_fflush_r+0x22>
 80070e0:	08008e9c 	.word	0x08008e9c
 80070e4:	08008ebc 	.word	0x08008ebc
 80070e8:	08008e7c 	.word	0x08008e7c

080070ec <std>:
 80070ec:	2300      	movs	r3, #0
 80070ee:	b510      	push	{r4, lr}
 80070f0:	4604      	mov	r4, r0
 80070f2:	e9c0 3300 	strd	r3, r3, [r0]
 80070f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070fa:	6083      	str	r3, [r0, #8]
 80070fc:	8181      	strh	r1, [r0, #12]
 80070fe:	6643      	str	r3, [r0, #100]	; 0x64
 8007100:	81c2      	strh	r2, [r0, #14]
 8007102:	6183      	str	r3, [r0, #24]
 8007104:	4619      	mov	r1, r3
 8007106:	2208      	movs	r2, #8
 8007108:	305c      	adds	r0, #92	; 0x5c
 800710a:	f7fd fba3 	bl	8004854 <memset>
 800710e:	4b05      	ldr	r3, [pc, #20]	; (8007124 <std+0x38>)
 8007110:	6224      	str	r4, [r4, #32]
 8007112:	6263      	str	r3, [r4, #36]	; 0x24
 8007114:	4b04      	ldr	r3, [pc, #16]	; (8007128 <std+0x3c>)
 8007116:	62a3      	str	r3, [r4, #40]	; 0x28
 8007118:	4b04      	ldr	r3, [pc, #16]	; (800712c <std+0x40>)
 800711a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800711c:	4b04      	ldr	r3, [pc, #16]	; (8007130 <std+0x44>)
 800711e:	6323      	str	r3, [r4, #48]	; 0x30
 8007120:	bd10      	pop	{r4, pc}
 8007122:	bf00      	nop
 8007124:	0800743d 	.word	0x0800743d
 8007128:	0800745f 	.word	0x0800745f
 800712c:	08007497 	.word	0x08007497
 8007130:	080074bb 	.word	0x080074bb

08007134 <_cleanup_r>:
 8007134:	4901      	ldr	r1, [pc, #4]	; (800713c <_cleanup_r+0x8>)
 8007136:	f000 b8af 	b.w	8007298 <_fwalk_reent>
 800713a:	bf00      	nop
 800713c:	08007075 	.word	0x08007075

08007140 <__sfmoreglue>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	2568      	movs	r5, #104	; 0x68
 8007144:	1e4a      	subs	r2, r1, #1
 8007146:	4355      	muls	r5, r2
 8007148:	460e      	mov	r6, r1
 800714a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800714e:	f7ff fa89 	bl	8006664 <_malloc_r>
 8007152:	4604      	mov	r4, r0
 8007154:	b140      	cbz	r0, 8007168 <__sfmoreglue+0x28>
 8007156:	2100      	movs	r1, #0
 8007158:	e9c0 1600 	strd	r1, r6, [r0]
 800715c:	300c      	adds	r0, #12
 800715e:	60a0      	str	r0, [r4, #8]
 8007160:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007164:	f7fd fb76 	bl	8004854 <memset>
 8007168:	4620      	mov	r0, r4
 800716a:	bd70      	pop	{r4, r5, r6, pc}

0800716c <__sfp_lock_acquire>:
 800716c:	4801      	ldr	r0, [pc, #4]	; (8007174 <__sfp_lock_acquire+0x8>)
 800716e:	f000 b8b3 	b.w	80072d8 <__retarget_lock_acquire_recursive>
 8007172:	bf00      	nop
 8007174:	20000728 	.word	0x20000728

08007178 <__sfp_lock_release>:
 8007178:	4801      	ldr	r0, [pc, #4]	; (8007180 <__sfp_lock_release+0x8>)
 800717a:	f000 b8ae 	b.w	80072da <__retarget_lock_release_recursive>
 800717e:	bf00      	nop
 8007180:	20000728 	.word	0x20000728

08007184 <__sinit_lock_acquire>:
 8007184:	4801      	ldr	r0, [pc, #4]	; (800718c <__sinit_lock_acquire+0x8>)
 8007186:	f000 b8a7 	b.w	80072d8 <__retarget_lock_acquire_recursive>
 800718a:	bf00      	nop
 800718c:	20000723 	.word	0x20000723

08007190 <__sinit_lock_release>:
 8007190:	4801      	ldr	r0, [pc, #4]	; (8007198 <__sinit_lock_release+0x8>)
 8007192:	f000 b8a2 	b.w	80072da <__retarget_lock_release_recursive>
 8007196:	bf00      	nop
 8007198:	20000723 	.word	0x20000723

0800719c <__sinit>:
 800719c:	b510      	push	{r4, lr}
 800719e:	4604      	mov	r4, r0
 80071a0:	f7ff fff0 	bl	8007184 <__sinit_lock_acquire>
 80071a4:	69a3      	ldr	r3, [r4, #24]
 80071a6:	b11b      	cbz	r3, 80071b0 <__sinit+0x14>
 80071a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071ac:	f7ff bff0 	b.w	8007190 <__sinit_lock_release>
 80071b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80071b4:	6523      	str	r3, [r4, #80]	; 0x50
 80071b6:	4b13      	ldr	r3, [pc, #76]	; (8007204 <__sinit+0x68>)
 80071b8:	4a13      	ldr	r2, [pc, #76]	; (8007208 <__sinit+0x6c>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80071be:	42a3      	cmp	r3, r4
 80071c0:	bf08      	it	eq
 80071c2:	2301      	moveq	r3, #1
 80071c4:	4620      	mov	r0, r4
 80071c6:	bf08      	it	eq
 80071c8:	61a3      	streq	r3, [r4, #24]
 80071ca:	f000 f81f 	bl	800720c <__sfp>
 80071ce:	6060      	str	r0, [r4, #4]
 80071d0:	4620      	mov	r0, r4
 80071d2:	f000 f81b 	bl	800720c <__sfp>
 80071d6:	60a0      	str	r0, [r4, #8]
 80071d8:	4620      	mov	r0, r4
 80071da:	f000 f817 	bl	800720c <__sfp>
 80071de:	2200      	movs	r2, #0
 80071e0:	2104      	movs	r1, #4
 80071e2:	60e0      	str	r0, [r4, #12]
 80071e4:	6860      	ldr	r0, [r4, #4]
 80071e6:	f7ff ff81 	bl	80070ec <std>
 80071ea:	2201      	movs	r2, #1
 80071ec:	2109      	movs	r1, #9
 80071ee:	68a0      	ldr	r0, [r4, #8]
 80071f0:	f7ff ff7c 	bl	80070ec <std>
 80071f4:	2202      	movs	r2, #2
 80071f6:	2112      	movs	r1, #18
 80071f8:	68e0      	ldr	r0, [r4, #12]
 80071fa:	f7ff ff77 	bl	80070ec <std>
 80071fe:	2301      	movs	r3, #1
 8007200:	61a3      	str	r3, [r4, #24]
 8007202:	e7d1      	b.n	80071a8 <__sinit+0xc>
 8007204:	08008af8 	.word	0x08008af8
 8007208:	08007135 	.word	0x08007135

0800720c <__sfp>:
 800720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720e:	4607      	mov	r7, r0
 8007210:	f7ff ffac 	bl	800716c <__sfp_lock_acquire>
 8007214:	4b1e      	ldr	r3, [pc, #120]	; (8007290 <__sfp+0x84>)
 8007216:	681e      	ldr	r6, [r3, #0]
 8007218:	69b3      	ldr	r3, [r6, #24]
 800721a:	b913      	cbnz	r3, 8007222 <__sfp+0x16>
 800721c:	4630      	mov	r0, r6
 800721e:	f7ff ffbd 	bl	800719c <__sinit>
 8007222:	3648      	adds	r6, #72	; 0x48
 8007224:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007228:	3b01      	subs	r3, #1
 800722a:	d503      	bpl.n	8007234 <__sfp+0x28>
 800722c:	6833      	ldr	r3, [r6, #0]
 800722e:	b30b      	cbz	r3, 8007274 <__sfp+0x68>
 8007230:	6836      	ldr	r6, [r6, #0]
 8007232:	e7f7      	b.n	8007224 <__sfp+0x18>
 8007234:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007238:	b9d5      	cbnz	r5, 8007270 <__sfp+0x64>
 800723a:	4b16      	ldr	r3, [pc, #88]	; (8007294 <__sfp+0x88>)
 800723c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007240:	60e3      	str	r3, [r4, #12]
 8007242:	6665      	str	r5, [r4, #100]	; 0x64
 8007244:	f000 f847 	bl	80072d6 <__retarget_lock_init_recursive>
 8007248:	f7ff ff96 	bl	8007178 <__sfp_lock_release>
 800724c:	2208      	movs	r2, #8
 800724e:	4629      	mov	r1, r5
 8007250:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007254:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007258:	6025      	str	r5, [r4, #0]
 800725a:	61a5      	str	r5, [r4, #24]
 800725c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007260:	f7fd faf8 	bl	8004854 <memset>
 8007264:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007268:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800726c:	4620      	mov	r0, r4
 800726e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007270:	3468      	adds	r4, #104	; 0x68
 8007272:	e7d9      	b.n	8007228 <__sfp+0x1c>
 8007274:	2104      	movs	r1, #4
 8007276:	4638      	mov	r0, r7
 8007278:	f7ff ff62 	bl	8007140 <__sfmoreglue>
 800727c:	4604      	mov	r4, r0
 800727e:	6030      	str	r0, [r6, #0]
 8007280:	2800      	cmp	r0, #0
 8007282:	d1d5      	bne.n	8007230 <__sfp+0x24>
 8007284:	f7ff ff78 	bl	8007178 <__sfp_lock_release>
 8007288:	230c      	movs	r3, #12
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	e7ee      	b.n	800726c <__sfp+0x60>
 800728e:	bf00      	nop
 8007290:	08008af8 	.word	0x08008af8
 8007294:	ffff0001 	.word	0xffff0001

08007298 <_fwalk_reent>:
 8007298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800729c:	4606      	mov	r6, r0
 800729e:	4688      	mov	r8, r1
 80072a0:	2700      	movs	r7, #0
 80072a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072aa:	f1b9 0901 	subs.w	r9, r9, #1
 80072ae:	d505      	bpl.n	80072bc <_fwalk_reent+0x24>
 80072b0:	6824      	ldr	r4, [r4, #0]
 80072b2:	2c00      	cmp	r4, #0
 80072b4:	d1f7      	bne.n	80072a6 <_fwalk_reent+0xe>
 80072b6:	4638      	mov	r0, r7
 80072b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072bc:	89ab      	ldrh	r3, [r5, #12]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d907      	bls.n	80072d2 <_fwalk_reent+0x3a>
 80072c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072c6:	3301      	adds	r3, #1
 80072c8:	d003      	beq.n	80072d2 <_fwalk_reent+0x3a>
 80072ca:	4629      	mov	r1, r5
 80072cc:	4630      	mov	r0, r6
 80072ce:	47c0      	blx	r8
 80072d0:	4307      	orrs	r7, r0
 80072d2:	3568      	adds	r5, #104	; 0x68
 80072d4:	e7e9      	b.n	80072aa <_fwalk_reent+0x12>

080072d6 <__retarget_lock_init_recursive>:
 80072d6:	4770      	bx	lr

080072d8 <__retarget_lock_acquire_recursive>:
 80072d8:	4770      	bx	lr

080072da <__retarget_lock_release_recursive>:
 80072da:	4770      	bx	lr

080072dc <__swhatbuf_r>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	460e      	mov	r6, r1
 80072e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e4:	4614      	mov	r4, r2
 80072e6:	2900      	cmp	r1, #0
 80072e8:	461d      	mov	r5, r3
 80072ea:	b096      	sub	sp, #88	; 0x58
 80072ec:	da07      	bge.n	80072fe <__swhatbuf_r+0x22>
 80072ee:	2300      	movs	r3, #0
 80072f0:	602b      	str	r3, [r5, #0]
 80072f2:	89b3      	ldrh	r3, [r6, #12]
 80072f4:	061a      	lsls	r2, r3, #24
 80072f6:	d410      	bmi.n	800731a <__swhatbuf_r+0x3e>
 80072f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072fc:	e00e      	b.n	800731c <__swhatbuf_r+0x40>
 80072fe:	466a      	mov	r2, sp
 8007300:	f000 f902 	bl	8007508 <_fstat_r>
 8007304:	2800      	cmp	r0, #0
 8007306:	dbf2      	blt.n	80072ee <__swhatbuf_r+0x12>
 8007308:	9a01      	ldr	r2, [sp, #4]
 800730a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800730e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007312:	425a      	negs	r2, r3
 8007314:	415a      	adcs	r2, r3
 8007316:	602a      	str	r2, [r5, #0]
 8007318:	e7ee      	b.n	80072f8 <__swhatbuf_r+0x1c>
 800731a:	2340      	movs	r3, #64	; 0x40
 800731c:	2000      	movs	r0, #0
 800731e:	6023      	str	r3, [r4, #0]
 8007320:	b016      	add	sp, #88	; 0x58
 8007322:	bd70      	pop	{r4, r5, r6, pc}

08007324 <__smakebuf_r>:
 8007324:	898b      	ldrh	r3, [r1, #12]
 8007326:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007328:	079d      	lsls	r5, r3, #30
 800732a:	4606      	mov	r6, r0
 800732c:	460c      	mov	r4, r1
 800732e:	d507      	bpl.n	8007340 <__smakebuf_r+0x1c>
 8007330:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007334:	6023      	str	r3, [r4, #0]
 8007336:	6123      	str	r3, [r4, #16]
 8007338:	2301      	movs	r3, #1
 800733a:	6163      	str	r3, [r4, #20]
 800733c:	b002      	add	sp, #8
 800733e:	bd70      	pop	{r4, r5, r6, pc}
 8007340:	466a      	mov	r2, sp
 8007342:	ab01      	add	r3, sp, #4
 8007344:	f7ff ffca 	bl	80072dc <__swhatbuf_r>
 8007348:	9900      	ldr	r1, [sp, #0]
 800734a:	4605      	mov	r5, r0
 800734c:	4630      	mov	r0, r6
 800734e:	f7ff f989 	bl	8006664 <_malloc_r>
 8007352:	b948      	cbnz	r0, 8007368 <__smakebuf_r+0x44>
 8007354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007358:	059a      	lsls	r2, r3, #22
 800735a:	d4ef      	bmi.n	800733c <__smakebuf_r+0x18>
 800735c:	f023 0303 	bic.w	r3, r3, #3
 8007360:	f043 0302 	orr.w	r3, r3, #2
 8007364:	81a3      	strh	r3, [r4, #12]
 8007366:	e7e3      	b.n	8007330 <__smakebuf_r+0xc>
 8007368:	4b0d      	ldr	r3, [pc, #52]	; (80073a0 <__smakebuf_r+0x7c>)
 800736a:	62b3      	str	r3, [r6, #40]	; 0x28
 800736c:	89a3      	ldrh	r3, [r4, #12]
 800736e:	6020      	str	r0, [r4, #0]
 8007370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007374:	81a3      	strh	r3, [r4, #12]
 8007376:	9b00      	ldr	r3, [sp, #0]
 8007378:	6120      	str	r0, [r4, #16]
 800737a:	6163      	str	r3, [r4, #20]
 800737c:	9b01      	ldr	r3, [sp, #4]
 800737e:	b15b      	cbz	r3, 8007398 <__smakebuf_r+0x74>
 8007380:	4630      	mov	r0, r6
 8007382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007386:	f000 f8d1 	bl	800752c <_isatty_r>
 800738a:	b128      	cbz	r0, 8007398 <__smakebuf_r+0x74>
 800738c:	89a3      	ldrh	r3, [r4, #12]
 800738e:	f023 0303 	bic.w	r3, r3, #3
 8007392:	f043 0301 	orr.w	r3, r3, #1
 8007396:	81a3      	strh	r3, [r4, #12]
 8007398:	89a0      	ldrh	r0, [r4, #12]
 800739a:	4305      	orrs	r5, r0
 800739c:	81a5      	strh	r5, [r4, #12]
 800739e:	e7cd      	b.n	800733c <__smakebuf_r+0x18>
 80073a0:	08007135 	.word	0x08007135

080073a4 <_malloc_usable_size_r>:
 80073a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073a8:	1f18      	subs	r0, r3, #4
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	bfbc      	itt	lt
 80073ae:	580b      	ldrlt	r3, [r1, r0]
 80073b0:	18c0      	addlt	r0, r0, r3
 80073b2:	4770      	bx	lr

080073b4 <_raise_r>:
 80073b4:	291f      	cmp	r1, #31
 80073b6:	b538      	push	{r3, r4, r5, lr}
 80073b8:	4604      	mov	r4, r0
 80073ba:	460d      	mov	r5, r1
 80073bc:	d904      	bls.n	80073c8 <_raise_r+0x14>
 80073be:	2316      	movs	r3, #22
 80073c0:	6003      	str	r3, [r0, #0]
 80073c2:	f04f 30ff 	mov.w	r0, #4294967295
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80073ca:	b112      	cbz	r2, 80073d2 <_raise_r+0x1e>
 80073cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073d0:	b94b      	cbnz	r3, 80073e6 <_raise_r+0x32>
 80073d2:	4620      	mov	r0, r4
 80073d4:	f000 f830 	bl	8007438 <_getpid_r>
 80073d8:	462a      	mov	r2, r5
 80073da:	4601      	mov	r1, r0
 80073dc:	4620      	mov	r0, r4
 80073de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073e2:	f000 b817 	b.w	8007414 <_kill_r>
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d00a      	beq.n	8007400 <_raise_r+0x4c>
 80073ea:	1c59      	adds	r1, r3, #1
 80073ec:	d103      	bne.n	80073f6 <_raise_r+0x42>
 80073ee:	2316      	movs	r3, #22
 80073f0:	6003      	str	r3, [r0, #0]
 80073f2:	2001      	movs	r0, #1
 80073f4:	e7e7      	b.n	80073c6 <_raise_r+0x12>
 80073f6:	2400      	movs	r4, #0
 80073f8:	4628      	mov	r0, r5
 80073fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80073fe:	4798      	blx	r3
 8007400:	2000      	movs	r0, #0
 8007402:	e7e0      	b.n	80073c6 <_raise_r+0x12>

08007404 <raise>:
 8007404:	4b02      	ldr	r3, [pc, #8]	; (8007410 <raise+0xc>)
 8007406:	4601      	mov	r1, r0
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	f7ff bfd3 	b.w	80073b4 <_raise_r>
 800740e:	bf00      	nop
 8007410:	2000001c 	.word	0x2000001c

08007414 <_kill_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	2300      	movs	r3, #0
 8007418:	4d06      	ldr	r5, [pc, #24]	; (8007434 <_kill_r+0x20>)
 800741a:	4604      	mov	r4, r0
 800741c:	4608      	mov	r0, r1
 800741e:	4611      	mov	r1, r2
 8007420:	602b      	str	r3, [r5, #0]
 8007422:	f7fa fc59 	bl	8001cd8 <_kill>
 8007426:	1c43      	adds	r3, r0, #1
 8007428:	d102      	bne.n	8007430 <_kill_r+0x1c>
 800742a:	682b      	ldr	r3, [r5, #0]
 800742c:	b103      	cbz	r3, 8007430 <_kill_r+0x1c>
 800742e:	6023      	str	r3, [r4, #0]
 8007430:	bd38      	pop	{r3, r4, r5, pc}
 8007432:	bf00      	nop
 8007434:	2000071c 	.word	0x2000071c

08007438 <_getpid_r>:
 8007438:	f7fa bc47 	b.w	8001cca <_getpid>

0800743c <__sread>:
 800743c:	b510      	push	{r4, lr}
 800743e:	460c      	mov	r4, r1
 8007440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007444:	f000 f894 	bl	8007570 <_read_r>
 8007448:	2800      	cmp	r0, #0
 800744a:	bfab      	itete	ge
 800744c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800744e:	89a3      	ldrhlt	r3, [r4, #12]
 8007450:	181b      	addge	r3, r3, r0
 8007452:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007456:	bfac      	ite	ge
 8007458:	6563      	strge	r3, [r4, #84]	; 0x54
 800745a:	81a3      	strhlt	r3, [r4, #12]
 800745c:	bd10      	pop	{r4, pc}

0800745e <__swrite>:
 800745e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007462:	461f      	mov	r7, r3
 8007464:	898b      	ldrh	r3, [r1, #12]
 8007466:	4605      	mov	r5, r0
 8007468:	05db      	lsls	r3, r3, #23
 800746a:	460c      	mov	r4, r1
 800746c:	4616      	mov	r6, r2
 800746e:	d505      	bpl.n	800747c <__swrite+0x1e>
 8007470:	2302      	movs	r3, #2
 8007472:	2200      	movs	r2, #0
 8007474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007478:	f000 f868 	bl	800754c <_lseek_r>
 800747c:	89a3      	ldrh	r3, [r4, #12]
 800747e:	4632      	mov	r2, r6
 8007480:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007484:	81a3      	strh	r3, [r4, #12]
 8007486:	4628      	mov	r0, r5
 8007488:	463b      	mov	r3, r7
 800748a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800748e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007492:	f000 b817 	b.w	80074c4 <_write_r>

08007496 <__sseek>:
 8007496:	b510      	push	{r4, lr}
 8007498:	460c      	mov	r4, r1
 800749a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800749e:	f000 f855 	bl	800754c <_lseek_r>
 80074a2:	1c43      	adds	r3, r0, #1
 80074a4:	89a3      	ldrh	r3, [r4, #12]
 80074a6:	bf15      	itete	ne
 80074a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80074aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074b2:	81a3      	strheq	r3, [r4, #12]
 80074b4:	bf18      	it	ne
 80074b6:	81a3      	strhne	r3, [r4, #12]
 80074b8:	bd10      	pop	{r4, pc}

080074ba <__sclose>:
 80074ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074be:	f000 b813 	b.w	80074e8 <_close_r>
	...

080074c4 <_write_r>:
 80074c4:	b538      	push	{r3, r4, r5, lr}
 80074c6:	4604      	mov	r4, r0
 80074c8:	4608      	mov	r0, r1
 80074ca:	4611      	mov	r1, r2
 80074cc:	2200      	movs	r2, #0
 80074ce:	4d05      	ldr	r5, [pc, #20]	; (80074e4 <_write_r+0x20>)
 80074d0:	602a      	str	r2, [r5, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	f7fa fc37 	bl	8001d46 <_write>
 80074d8:	1c43      	adds	r3, r0, #1
 80074da:	d102      	bne.n	80074e2 <_write_r+0x1e>
 80074dc:	682b      	ldr	r3, [r5, #0]
 80074de:	b103      	cbz	r3, 80074e2 <_write_r+0x1e>
 80074e0:	6023      	str	r3, [r4, #0]
 80074e2:	bd38      	pop	{r3, r4, r5, pc}
 80074e4:	2000071c 	.word	0x2000071c

080074e8 <_close_r>:
 80074e8:	b538      	push	{r3, r4, r5, lr}
 80074ea:	2300      	movs	r3, #0
 80074ec:	4d05      	ldr	r5, [pc, #20]	; (8007504 <_close_r+0x1c>)
 80074ee:	4604      	mov	r4, r0
 80074f0:	4608      	mov	r0, r1
 80074f2:	602b      	str	r3, [r5, #0]
 80074f4:	f7fa fc43 	bl	8001d7e <_close>
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	d102      	bne.n	8007502 <_close_r+0x1a>
 80074fc:	682b      	ldr	r3, [r5, #0]
 80074fe:	b103      	cbz	r3, 8007502 <_close_r+0x1a>
 8007500:	6023      	str	r3, [r4, #0]
 8007502:	bd38      	pop	{r3, r4, r5, pc}
 8007504:	2000071c 	.word	0x2000071c

08007508 <_fstat_r>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	2300      	movs	r3, #0
 800750c:	4d06      	ldr	r5, [pc, #24]	; (8007528 <_fstat_r+0x20>)
 800750e:	4604      	mov	r4, r0
 8007510:	4608      	mov	r0, r1
 8007512:	4611      	mov	r1, r2
 8007514:	602b      	str	r3, [r5, #0]
 8007516:	f7fa fc3d 	bl	8001d94 <_fstat>
 800751a:	1c43      	adds	r3, r0, #1
 800751c:	d102      	bne.n	8007524 <_fstat_r+0x1c>
 800751e:	682b      	ldr	r3, [r5, #0]
 8007520:	b103      	cbz	r3, 8007524 <_fstat_r+0x1c>
 8007522:	6023      	str	r3, [r4, #0]
 8007524:	bd38      	pop	{r3, r4, r5, pc}
 8007526:	bf00      	nop
 8007528:	2000071c 	.word	0x2000071c

0800752c <_isatty_r>:
 800752c:	b538      	push	{r3, r4, r5, lr}
 800752e:	2300      	movs	r3, #0
 8007530:	4d05      	ldr	r5, [pc, #20]	; (8007548 <_isatty_r+0x1c>)
 8007532:	4604      	mov	r4, r0
 8007534:	4608      	mov	r0, r1
 8007536:	602b      	str	r3, [r5, #0]
 8007538:	f7fa fc3b 	bl	8001db2 <_isatty>
 800753c:	1c43      	adds	r3, r0, #1
 800753e:	d102      	bne.n	8007546 <_isatty_r+0x1a>
 8007540:	682b      	ldr	r3, [r5, #0]
 8007542:	b103      	cbz	r3, 8007546 <_isatty_r+0x1a>
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	bd38      	pop	{r3, r4, r5, pc}
 8007548:	2000071c 	.word	0x2000071c

0800754c <_lseek_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	4604      	mov	r4, r0
 8007550:	4608      	mov	r0, r1
 8007552:	4611      	mov	r1, r2
 8007554:	2200      	movs	r2, #0
 8007556:	4d05      	ldr	r5, [pc, #20]	; (800756c <_lseek_r+0x20>)
 8007558:	602a      	str	r2, [r5, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	f7fa fc33 	bl	8001dc6 <_lseek>
 8007560:	1c43      	adds	r3, r0, #1
 8007562:	d102      	bne.n	800756a <_lseek_r+0x1e>
 8007564:	682b      	ldr	r3, [r5, #0]
 8007566:	b103      	cbz	r3, 800756a <_lseek_r+0x1e>
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	bd38      	pop	{r3, r4, r5, pc}
 800756c:	2000071c 	.word	0x2000071c

08007570 <_read_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4604      	mov	r4, r0
 8007574:	4608      	mov	r0, r1
 8007576:	4611      	mov	r1, r2
 8007578:	2200      	movs	r2, #0
 800757a:	4d05      	ldr	r5, [pc, #20]	; (8007590 <_read_r+0x20>)
 800757c:	602a      	str	r2, [r5, #0]
 800757e:	461a      	mov	r2, r3
 8007580:	f7fa fbc4 	bl	8001d0c <_read>
 8007584:	1c43      	adds	r3, r0, #1
 8007586:	d102      	bne.n	800758e <_read_r+0x1e>
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	b103      	cbz	r3, 800758e <_read_r+0x1e>
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	bd38      	pop	{r3, r4, r5, pc}
 8007590:	2000071c 	.word	0x2000071c

08007594 <_init>:
 8007594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007596:	bf00      	nop
 8007598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800759a:	bc08      	pop	{r3}
 800759c:	469e      	mov	lr, r3
 800759e:	4770      	bx	lr

080075a0 <_fini>:
 80075a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a2:	bf00      	nop
 80075a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075a6:	bc08      	pop	{r3}
 80075a8:	469e      	mov	lr, r3
 80075aa:	4770      	bx	lr
